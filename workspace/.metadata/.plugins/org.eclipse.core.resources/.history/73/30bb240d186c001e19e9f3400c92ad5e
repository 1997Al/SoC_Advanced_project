/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>
#include <stdbool.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
#include <time.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
#define TRIG_PIN GPIO_PIN_8
#define TRIG_PORT GPIOC
#define WINDOW_SIZE 3
#define THRESHOLD 10
#define STRIKE_LIMIT 3
/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM1_Init(void);
static void MX_TIM8_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM4_Init(void);
/* USER CODE BEGIN PFP */
void uS_delay(uint16_t delay);
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim);
void start_measurement();
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin);
void turn_ignition_on();
void turn_ignition_off();
bool check_alcohol_level();
void turn_car_on();
void turn_car_off();
void check_sensor_measurements();
void verify_sensor_measurements();
void swap(float* a, float* b);
int Partition(float* arr, int l, int r);
int randomPartition(float* arr, int l, int r);
void MedianUtil(float* arr, int l, int r, int k, int* a, int* b);
float calculate_median(float* data_points);
void check_distance_status();
void driver_asleep();

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* Global variables for measurements */

// Car starting status
bool is_car_on = false;
bool is_ignition_on = false;
bool is_sleep_detected = false;

uint32_t oneSec = 0;
uint32_t twoSec = 0;
uint8_t measurements_count = 0;


float final_front_distance = 0;
float final_back_distance = 0;

// Front sensor 1
uint32_t start_of_pulse_front_sensor1 = 0;
uint32_t end_of_pulse_front_sensor1 = 0;
uint32_t difference_front_sensor1 = 0;
bool is_start_captured_front_sensor1 = false;
float distance_front_sensor1 = 0;
float window_front_sensor1[WINDOW_SIZE];
bool is_front_sensor1_operative = true;
uint8_t front_sensor1_strikes = 0;

// Front sensor 2
uint32_t start_of_pulse_front_sensor2 = 0;
uint32_t end_of_pulse_front_sensor2 = 0;
uint32_t difference_front_sensor2 = 0;
bool is_start_captured_front_sensor2 = false;
float distance_front_sensor2 = 0;
float window_front_sensor2[WINDOW_SIZE];
bool is_front_sensor2_operative = true;
uint8_t front_sensor2_strikes = 0;

// Back sensor 1
uint32_t start_of_pulse_back_sensor1 = 0;
uint32_t end_of_pulse_back_sensor1 = 0;
uint32_t difference_back_sensor1 = 0;
bool is_start_captured_back_sensor1 = false;
float distance_back_sensor1 = 0;
float window_back_sensor1[WINDOW_SIZE];
bool is_back_sensor1_operative = true;
uint8_t back_sensor1_strikes = 0;

// Back sensor 2
uint32_t start_of_pulse_back_sensor2 = 0;
uint32_t end_of_pulse_back_sensor2 = 0;
uint32_t difference_back_sensor2 = 0;
bool is_start_captured_back_sensor2 = false;
float distance_back_sensor2 = 0;
float window_back_sensor2[WINDOW_SIZE];
bool is_back_sensor2_operative = true;
uint8_t back_sensor2_strikes = 0;

// Delay function in us
void uS_delay(uint16_t delay)
{
	__HAL_TIM_SET_COUNTER(&htim1,0);
	while(__HAL_TIM_GET_COUNTER(&htim1) < delay);
}


// Callback function to capture inputs from the distance sensors on change
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
	// Front sensor
	if (htim->Instance == TIM1){
		// Start of pulse
		if (is_start_captured_front_sensor1 == false){
			start_of_pulse_front_sensor1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
			is_start_captured_front_sensor1 = true;
			// Change polarity to capture 'Falling Edge'
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
		}

		// End of pulse from sensor
		else if (is_start_captured_front_sensor1 == true){
			end_of_pulse_front_sensor1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
			__HAL_TIM_SET_COUNTER(htim, 0);

			if (end_of_pulse_front_sensor1 > start_of_pulse_front_sensor1){
				difference_front_sensor1 = end_of_pulse_front_sensor1-start_of_pulse_front_sensor1;
			}

			else if (start_of_pulse_front_sensor1 > end_of_pulse_front_sensor1){
				difference_front_sensor1 = (0xffff - start_of_pulse_front_sensor1) + end_of_pulse_front_sensor1;
			}

			distance_front_sensor1 = (difference_front_sensor1 * .034/2);
			is_start_captured_front_sensor1 = false;

			// Change polarity to capture 'Rising Edge'
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}

	// Right sensor
	else if (htim->Instance == TIM8){
		// Start of pulse
		if (is_start_captured_front_sensor2 == false){
			start_of_pulse_front_sensor2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
			is_start_captured_front_sensor2 = true;
			// Change polarity to capture 'Falling Edge'
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
		}

		// End of pulse from sensor
		else if (is_start_captured_front_sensor2 == true){
			end_of_pulse_front_sensor2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
			__HAL_TIM_SET_COUNTER(htim, 0);

			if (end_of_pulse_front_sensor2 > start_of_pulse_front_sensor2){
				difference_front_sensor2 = end_of_pulse_front_sensor2-start_of_pulse_front_sensor2;
			}

			else if (start_of_pulse_front_sensor2 > end_of_pulse_front_sensor2){
				difference_front_sensor2 = (0xffff - start_of_pulse_front_sensor2) + end_of_pulse_front_sensor2;
			}

			distance_front_sensor2 = (difference_front_sensor2 * .034/2);
			is_start_captured_front_sensor2 = false;

			// Change polarity to capture 'Rising Edge'
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim8, TIM_IT_CC1);
		}
	}

	// Back sensor
	else if (htim->Instance == TIM3){
		// Start of pulse
		if (is_start_captured_back_sensor2 == false){
			start_of_pulse_back_sensor2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
			is_start_captured_back_sensor2 = true;
			// Change polarity to capture 'Falling Edge'
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
		}

		// End of pulse from sensor
		else if (is_start_captured_back_sensor2 == true){
			end_of_pulse_back_sensor2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
			__HAL_TIM_SET_COUNTER(htim, 0);

			if (end_of_pulse_back_sensor2 > start_of_pulse_back_sensor2){
				difference_back_sensor2 = end_of_pulse_back_sensor2-start_of_pulse_back_sensor2;
			}

			else if (start_of_pulse_back_sensor2 > end_of_pulse_back_sensor2){
				difference_back_sensor2 = (0xffff - start_of_pulse_back_sensor2) + end_of_pulse_back_sensor2;
			}

			distance_back_sensor2 = (difference_back_sensor2 * .034/2);
			is_start_captured_back_sensor2 = false;

			// Change polarity to capture 'Rising Edge'
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1);
		}
	}

	// Left sensor
	else if (htim->Instance == TIM4){
		// Start of pulse
		if (is_start_captured_back_sensor1 == false){
			start_of_pulse_back_sensor1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
			is_start_captured_back_sensor1 = true;
			// Change polarity to capture 'Falling Edge'
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
		}

		// End of pulse from sensor
		else if (is_start_captured_back_sensor1 == true){
			end_of_pulse_back_sensor1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
			__HAL_TIM_SET_COUNTER(htim, 0);

			if (end_of_pulse_back_sensor1 > start_of_pulse_back_sensor1){
				difference_back_sensor1 = end_of_pulse_back_sensor1-start_of_pulse_back_sensor1;
			}

			else if (start_of_pulse_back_sensor1 > end_of_pulse_back_sensor1){
				difference_back_sensor1 = (0xffff - start_of_pulse_back_sensor1) + end_of_pulse_back_sensor1;
			}

			distance_back_sensor1 = (difference_back_sensor1 * .034/2);
			is_start_captured_back_sensor1 = false;

			// Change polarity to capture 'Rising Edge'
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
		}
	}
}

// Trigger measurement
void start_measurement()
{
	// Pull pin high for 10 us to trigger measurement
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
	uS_delay(10);
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
	__HAL_TIM_ENABLE_IT(&htim8, TIM_IT_CC1);
	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC1);
	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);

	measurements_count = measurements_count < 3 ? measurements_count + 1 : measurements_count;

	check_sensor_measurements();
}

// Callback function to capture changes on Push Button line and IR sensor line
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){

	  if(GPIO_Pin == GPIO_PIN_13) {
		  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET){
			  if(is_ignition_on == false){
				  turn_ignition_on();
			  }
			  else{
				  turn_car_off();
			  }
		  }
	  }

	  if(GPIO_Pin == GPIO_PIN_7){
		  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == GPIO_PIN_RESET){
			  twoSec = 0;
			  is_sleep_detected = true;
		  }
		  else if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == GPIO_PIN_SET){
			  if(twoSec > 2000){
				  char txt[] = "HAL_GPIO_EXTI_Callback\n\r";
				  HAL_UART_Transmit(&huart2, (const uint8_t*)txt, strlen(txt),100);
				  is_sleep_detected = true;
			  }
			  else{
				  is_sleep_detected = false;
			  }
		  }
	  }
}

void driver_asleep(){
	  char txt[] = "Driver  asleep!\n\rEntering Safe-State-Mode!\n\r";
	  HAL_UART_Transmit(&huart2, (const uint8_t*)txt, strlen(txt),100);
	  is_sleep_detected = false;
	  turn_car_off();
}

void turn_ignition_on(){
	  is_sleep_detected = false;
	  is_ignition_on = true;
	  char txt[] = "Turning Ignition ON...\n\r";
	  HAL_UART_Transmit(&huart2, (const uint8_t*)txt, strlen(txt),100);
}

void turn_ignition_off(){
	  is_ignition_on = false;
	  char txt[] = "Turning Ignition OFF...\n\r";
	  HAL_UART_Transmit(&huart2, (const uint8_t*)txt, strlen(txt),100);
	  measurements_count = 0;
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9,GPIO_PIN_SET);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12,GPIO_PIN_RESET);
}

bool check_alcohol_level(){
	char txt[] = "Testing alcohol level...\n\r";
	HAL_UART_Transmit(&huart2, (const uint8_t*)txt, strlen(txt),100);
	HAL_Delay(5000);
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == GPIO_PIN_RESET){
		char txt[] = "Alcohol level high! ";
		HAL_UART_Transmit(&huart2, (const uint8_t*)txt, strlen(txt),100);
		return true;
	}
	else{
		char txt[] = "Alcohol level low. ";
		HAL_UART_Transmit(&huart2, (const uint8_t*)txt, strlen(txt),100);
		return false;
	}
}

void turn_car_on(){
	char txt[] = "Turning car ON...\n\r";
	HAL_UART_Transmit(&huart2, (const uint8_t*)txt, strlen(txt),100);
	is_car_on = true;
}

void turn_car_off(){
	char txt[] = "Turning car OFF...\n\r";
	HAL_UART_Transmit(&huart2, (const uint8_t*)txt, strlen(txt),100);
	is_car_on = false;
	turn_ignition_off();

}

void check_sensor_measurements(){

	  verify_sensor_measurements();

	  bool isContinue = false;
	  // Both sensors operational
	  if(is_front_sensor1_operative == true && is_front_sensor2_operative == true){
		  final_front_distance = (distance_front_sensor1 + distance_front_sensor2)/2.0;
		  isContinue = true;
	  }
	  // One sensor faulty
	  else if(is_front_sensor1_operative == false && is_front_sensor2_operative == true){
		  final_front_distance = distance_front_sensor2;
		  isContinue = true;
	  }
	  else if(is_front_sensor1_operative == true && is_front_sensor2_operative == false){
		  final_front_distance = distance_front_sensor1;
		  isContinue = true;
	  }
	  // Both sensors faulty
	  else{
		  char txt[] = "Both front sensors failed!\n\rEntering Safe-State-Mode!\n\r";
		  HAL_UART_Transmit(&huart2, (const uint8_t*)txt, strlen(txt),100);
		  turn_car_off();
	  }


	  // Both sensors operational
	  if(is_back_sensor1_operative == true && is_back_sensor2_operative == true){
		  final_back_distance = (distance_back_sensor1 + distance_back_sensor2)/2.0;
		  isContinue = true;

	  }
	  // One sensor faulty
	  else if(is_back_sensor1_operative == false && is_back_sensor2_operative == true){
		  final_back_distance = distance_back_sensor2;
		  isContinue = true;
	  }
	  else if(is_back_sensor1_operative == true && is_back_sensor2_operative == false){
		  final_back_distance = distance_back_sensor1;
		  isContinue = true;
	  }
	  // Both sensors faulty
	  else{
		  char txt[] = "Both back sensors failed!\n\rGoing into Safe-State!\n\r";
		  HAL_UART_Transmit(&huart2, (const uint8_t*)txt, strlen(txt),100);
		  turn_car_off();
	  }

	  if(isContinue == true){
		  check_distance_status();
	  }
}

void check_distance_status(){

	  char buffer_front[26]; // buffer to store the string
	  char buffer_back[25]; // buffer to store the string

	  sprintf(buffer_front, "Front distance: %.2f cm\n\r", final_front_distance);
	  sprintf(buffer_back, "Back distance: %.2f cm\n\r", final_back_distance);


	  if(final_front_distance < 5.0 || final_back_distance < 5){
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9,GPIO_PIN_RESET);
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12,GPIO_PIN_SET);

		  if(oneSec > 1000){
			  HAL_UART_Transmit(&huart2, (const uint8_t*)buffer_front, strlen(buffer_front),100);
			  HAL_UART_Transmit(&huart2, (const uint8_t*)buffer_back, strlen(buffer_back),100);
			  oneSec = 0;
		  }
		  oneSec +=20;
		  twoSec +=20;
		  HAL_Delay(20);
	  }
	  else{
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9,GPIO_PIN_SET);
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12,GPIO_PIN_RESET);

		  if(oneSec > 1000){
			  HAL_UART_Transmit(&huart2, (const uint8_t*)buffer_front, strlen(buffer_front),100);
			  HAL_UART_Transmit(&huart2, (const uint8_t*)buffer_back, strlen(buffer_back),100);
			  oneSec = 0;
		  }
		  oneSec +=40;
		  twoSec +=40;
		  HAL_Delay(40);
	  }

	  if(is_sleep_detected == true && twoSec > 2000){
		  char txt[] = "is_sleep_detected == true && twoSec > 2000\n\r";
		  HAL_UART_Transmit(&huart2, (const uint8_t*)txt, strlen(txt),100);
		  if(is_car_on == true){
		  driver_asleep();
		  }
	  }
}

void verify_sensor_measurements(){
	switch(measurements_count) {
		case 1:
			window_front_sensor1[0] = floorf(distance_front_sensor1 * 100) / 100;
			window_front_sensor2[0] = floorf(distance_front_sensor2 * 100) / 100;
			window_back_sensor1[0] = floorf(distance_back_sensor1 * 100) / 100;
			window_back_sensor2[0] = floorf(distance_back_sensor2 * 100) / 100;
			break;
		case 2:
			window_front_sensor1[1] = floorf(distance_front_sensor1 * 100) / 100;
			window_front_sensor2[1] = floorf(distance_front_sensor2 * 100) / 100;
			window_back_sensor1[1] = floorf(distance_back_sensor1 * 100) / 100;
			window_back_sensor2[1] = floorf(distance_back_sensor2 * 100) / 100;
			break;
		case 3:
			window_front_sensor1[2] = floorf(distance_front_sensor1 * 100) / 100;
			window_front_sensor2[2] = floorf(distance_front_sensor2 * 100) / 100;
			window_back_sensor1[2] = floorf(distance_back_sensor1 * 100) / 100;
			window_back_sensor2[2] = floorf(distance_back_sensor2 * 100) / 100;
			break;
		default:

			for(int i = 0; i < WINDOW_SIZE-1; i++){
				window_front_sensor1[i] = window_front_sensor1[i+1];
				window_front_sensor2[i] = window_front_sensor2[i+1];
				window_back_sensor1[i] = window_back_sensor1[i+1];
				window_back_sensor2[i] = window_back_sensor2[i+1];
			}
			window_front_sensor1[2] = floorf(distance_front_sensor1 * 100) / 100;
			window_front_sensor2[2] = floorf(distance_front_sensor2 * 100) / 100;
			window_back_sensor1[2] = floorf(distance_back_sensor1 * 100) / 100;
			window_back_sensor2[2] = floorf(distance_back_sensor2 * 100) / 100;

			float median_front_sensor1 = calculate_median(window_front_sensor1);
			float median_front_sensor2 = calculate_median(window_front_sensor2);
			float median_back_sensor1 = calculate_median(window_back_sensor1);
			float median_back_sensor2 = calculate_median(window_back_sensor2);

			front_sensor1_strikes = (fabs(window_front_sensor1[2] - median_front_sensor1) > THRESHOLD) ? front_sensor1_strikes+1 : 0;
			front_sensor2_strikes = (fabs(window_front_sensor2[2] - median_front_sensor2) > THRESHOLD) ? front_sensor2_strikes+1 : 0;
			back_sensor1_strikes = (fabs(window_back_sensor1[2] - median_back_sensor1) > THRESHOLD) ? back_sensor1_strikes+1 : 0;
			back_sensor2_strikes = (fabs(window_back_sensor2[2] - median_back_sensor2) > THRESHOLD) ? back_sensor2_strikes+1 : 0;

			is_front_sensor1_operative = front_sensor1_strikes < STRIKE_LIMIT ? true : false;
			is_front_sensor2_operative = front_sensor2_strikes < STRIKE_LIMIT ? true : false;
			is_back_sensor1_operative = back_sensor1_strikes < STRIKE_LIMIT ? true : false;
			is_back_sensor2_operative = back_sensor2_strikes < STRIKE_LIMIT ? true : false;

			break;
	}
}


// Utility function to swapping of element
void swap(float* a, float* b){
    float temp = *a;
    *a = *b;
    *b = temp;
}

// Returns the correct position of
// pivot element
int Partition(float* arr, int l, int r){
    float lst = arr[r];
    int i = l;
    int j = l;
    while (j < r) {
        if (arr[j] < lst) {
            swap(&arr[i], &arr[j]);
            i++;
        }
        j++;
    }
    swap(&arr[i], &arr[r]);
    return i;
}

// Picks a random pivot element between
// l and r and partitions arr[l..r]
// around the randomly picked element
// using partition()
int randomPartition(float* arr, int l,int r){
    int n = r - l + 1;
    int pivot = rand() % n;
    swap(&arr[l + pivot], &arr[r]);
    return Partition(arr, l, r);
}

// Utility function to find median
void MedianUtil(float* arr, int l, int r, int k, int* a, int* b){

    // if l < r
    if (l <= r) {

        // Find the partition index
        int partitionIndex
            = randomPartition(arr, l, r);

        // If partition index = k, then
        // we found the median of odd
        // number element in arr[]
        if (partitionIndex == k) {
            *b = arr[partitionIndex];
            if (*a != -1)
                return;
        }

        // If index = k - 1, then we get
        // a & b as middle element of
        // arr[]
        else if (partitionIndex == k - 1) {
            *a = arr[partitionIndex];
            if (*b != -1)
                return;
        }

        // If partitionIndex >= k then
        // find the index in first half
        // of the arr[]
        if (partitionIndex >= k)
            return MedianUtil(arr, l, partitionIndex - 1, k, a, b);

        // If partitionIndex <= k then
        // find the index in second half
        // of the arr[]
        else
            return MedianUtil(arr,partitionIndex + 1, r, k, a, b);
    }

    return;
}



float calculate_median(float* data_points){
    int ans = 0;
    int a = -1;
    int b = -1;
    int n = WINDOW_SIZE;

    // If n is odd
    if (n % 2 == 1) {
        MedianUtil(data_points, 0, n - 1, n / 2, &a, &b);
        ans = b;
    }
    // If n is even
    else {
        MedianUtil(data_points, 0, n - 1, n / 2, &a, &b);
        ans = (a + b) / 2;
    }

    return ans;
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_TIM1_Init();
  MX_TIM8_Init();
  MX_TIM3_Init();
  MX_TIM4_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
  HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_1);
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  if(is_ignition_on == true){
		  if(is_car_on == false){
			  if(check_alcohol_level() == true){
				  turn_car_off();
			  }
			  else{
				  turn_car_on();
				  start_measurement();
			  }
		  }
		  else{
			  while(is_car_on == true){
			  start_measurement();
			  }
		  }
	  }

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_IC_InitTypeDef sConfigIC = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 84-1;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 65535;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
  sConfigIC.ICFilter = 0;
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}

/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_IC_InitTypeDef sConfigIC = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 84-1;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 65535;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
  sConfigIC.ICFilter = 0;
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}

/**
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_IC_InitTypeDef sConfigIC = {0};

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 84-1;
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 65535;
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
  sConfigIC.ICFilter = 0;
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}

/**
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_IC_InitTypeDef sConfigIC = {0};

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
  htim8.Init.Prescaler = 84-1;
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim8.Init.Period = 65535;
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim8.Init.RepetitionCounter = 0;
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
  sConfigIC.ICFilter = 0;
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

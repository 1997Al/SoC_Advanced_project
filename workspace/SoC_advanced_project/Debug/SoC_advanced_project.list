
SoC_advanced_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e94  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000698  0800a068  0800a068  0001a068  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a700  0800a700  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a700  0800a700  0001a700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a708  0800a708  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a708  0800a708  0001a708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a70c  0800a70c  0001a70c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800a710  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  200001e4  0800a8f4  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000424  0800a8f4  00020424  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eada  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e37  00000000  00000000  0002ecee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  00030b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd0  00000000  00000000  00031898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022b55  00000000  00000000  00032568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f015  00000000  00000000  000550bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2ced  00000000  00000000  000640d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00136dbf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ed4  00000000  00000000  00136e10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a04c 	.word	0x0800a04c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	0800a04c 	.word	0x0800a04c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <turn_ignition_on>:
/**
 * @brief Emulates turning on the car ignition.
 * @param None
 * @retval None
 */
void turn_ignition_on() {
 8001038:	b5b0      	push	{r4, r5, r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af00      	add	r7, sp, #0

	is_sleep_detected = false;
 800103e:	4b0f      	ldr	r3, [pc, #60]	; (800107c <turn_ignition_on+0x44>)
 8001040:	2200      	movs	r2, #0
 8001042:	701a      	strb	r2, [r3, #0]
	is_ignition_on = true;
 8001044:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <turn_ignition_on+0x48>)
 8001046:	2201      	movs	r2, #1
 8001048:	701a      	strb	r2, [r3, #0]
	char txt[] = "Turning Ignition ON...\n\r";
 800104a:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <turn_ignition_on+0x4c>)
 800104c:	1d3c      	adds	r4, r7, #4
 800104e:	461d      	mov	r5, r3
 8001050:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001052:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001054:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001058:	c403      	stmia	r4!, {r0, r1}
 800105a:	7022      	strb	r2, [r4, #0]
	HAL_UART_Transmit(&huart2, (const uint8_t*) txt, strlen(txt), 100);
 800105c:	1d3b      	adds	r3, r7, #4
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff f8d6 	bl	8000210 <strlen>
 8001064:	4603      	mov	r3, r0
 8001066:	b29a      	uxth	r2, r3
 8001068:	1d39      	adds	r1, r7, #4
 800106a:	2364      	movs	r3, #100	; 0x64
 800106c:	4806      	ldr	r0, [pc, #24]	; (8001088 <turn_ignition_on+0x50>)
 800106e:	f003 ff52 	bl	8004f16 <HAL_UART_Transmit>

}
 8001072:	bf00      	nop
 8001074:	3720      	adds	r7, #32
 8001076:	46bd      	mov	sp, r7
 8001078:	bdb0      	pop	{r4, r5, r7, pc}
 800107a:	bf00      	nop
 800107c:	20000366 	.word	0x20000366
 8001080:	20000365 	.word	0x20000365
 8001084:	0800a068 	.word	0x0800a068
 8001088:	20000320 	.word	0x20000320

0800108c <turn_vehicle_on>:
/**
 * @brief Emulates turning on the car.
 * @param None
 * @retval None
 */
void turn_vehicle_on() {
 800108c:	b5b0      	push	{r4, r5, r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0

	char txt[] = "Turning car ON...\n\r";
 8001092:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <turn_vehicle_on+0x38>)
 8001094:	1d3c      	adds	r4, r7, #4
 8001096:	461d      	mov	r5, r3
 8001098:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800109a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800109c:	682b      	ldr	r3, [r5, #0]
 800109e:	6023      	str	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, (const uint8_t*) txt, strlen(txt), 100);
 80010a0:	1d3b      	adds	r3, r7, #4
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff f8b4 	bl	8000210 <strlen>
 80010a8:	4603      	mov	r3, r0
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	1d39      	adds	r1, r7, #4
 80010ae:	2364      	movs	r3, #100	; 0x64
 80010b0:	4805      	ldr	r0, [pc, #20]	; (80010c8 <turn_vehicle_on+0x3c>)
 80010b2:	f003 ff30 	bl	8004f16 <HAL_UART_Transmit>
	is_car_on = true;
 80010b6:	4b05      	ldr	r3, [pc, #20]	; (80010cc <turn_vehicle_on+0x40>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	701a      	strb	r2, [r3, #0]

}
 80010bc:	bf00      	nop
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bdb0      	pop	{r4, r5, r7, pc}
 80010c4:	0800a084 	.word	0x0800a084
 80010c8:	20000320 	.word	0x20000320
 80010cc:	20000364 	.word	0x20000364

080010d0 <check_alcohol_level>:
 * or if car is not allowed to start (high alcohol level.)
 * @param None
 * @retval false Alcohol level low --> start car
 * @retval true Alcohol level high --> turn car off
 */
bool check_alcohol_level() {
 80010d0:	b5b0      	push	{r4, r5, r7, lr}
 80010d2:	b092      	sub	sp, #72	; 0x48
 80010d4:	af00      	add	r7, sp, #0

	char txt[] = "Testing alcohol level...\n\r";
 80010d6:	4b2b      	ldr	r3, [pc, #172]	; (8001184 <check_alcohol_level+0xb4>)
 80010d8:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80010dc:	461d      	mov	r5, r3
 80010de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010e6:	c403      	stmia	r4!, {r0, r1}
 80010e8:	8022      	strh	r2, [r4, #0]
 80010ea:	3402      	adds	r4, #2
 80010ec:	0c13      	lsrs	r3, r2, #16
 80010ee:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, (const uint8_t*) txt, strlen(txt), 100);
 80010f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff f88b 	bl	8000210 <strlen>
 80010fa:	4603      	mov	r3, r0
 80010fc:	b29a      	uxth	r2, r3
 80010fe:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001102:	2364      	movs	r3, #100	; 0x64
 8001104:	4820      	ldr	r0, [pc, #128]	; (8001188 <check_alcohol_level+0xb8>)
 8001106:	f003 ff06 	bl	8004f16 <HAL_UART_Transmit>
	HAL_Delay(5000);
 800110a:	f241 3088 	movw	r0, #5000	; 0x1388
 800110e:	f001 ffb1 	bl	8003074 <HAL_Delay>

	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == GPIO_PIN_RESET) {
 8001112:	2101      	movs	r1, #1
 8001114:	481d      	ldr	r0, [pc, #116]	; (800118c <check_alcohol_level+0xbc>)
 8001116:	f002 fa77 	bl	8003608 <HAL_GPIO_ReadPin>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d119      	bne.n	8001154 <check_alcohol_level+0x84>
		char txt[] = "Alcohol level high! ";
 8001120:	4b1b      	ldr	r3, [pc, #108]	; (8001190 <check_alcohol_level+0xc0>)
 8001122:	f107 0414 	add.w	r4, r7, #20
 8001126:	461d      	mov	r5, r3
 8001128:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800112a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800112c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001130:	6020      	str	r0, [r4, #0]
 8001132:	3404      	adds	r4, #4
 8001134:	7021      	strb	r1, [r4, #0]
		HAL_UART_Transmit(&huart2, (const uint8_t*) txt, strlen(txt), 100);
 8001136:	f107 0314 	add.w	r3, r7, #20
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff f868 	bl	8000210 <strlen>
 8001140:	4603      	mov	r3, r0
 8001142:	b29a      	uxth	r2, r3
 8001144:	f107 0114 	add.w	r1, r7, #20
 8001148:	2364      	movs	r3, #100	; 0x64
 800114a:	480f      	ldr	r0, [pc, #60]	; (8001188 <check_alcohol_level+0xb8>)
 800114c:	f003 fee3 	bl	8004f16 <HAL_UART_Transmit>
		return true;
 8001150:	2301      	movs	r3, #1
 8001152:	e012      	b.n	800117a <check_alcohol_level+0xaa>
	}

	else {
		char txt[] = "Alcohol level low. ";
 8001154:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <check_alcohol_level+0xc4>)
 8001156:	463c      	mov	r4, r7
 8001158:	461d      	mov	r5, r3
 800115a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800115c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800115e:	682b      	ldr	r3, [r5, #0]
 8001160:	6023      	str	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, (const uint8_t*) txt, strlen(txt), 100);
 8001162:	463b      	mov	r3, r7
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff f853 	bl	8000210 <strlen>
 800116a:	4603      	mov	r3, r0
 800116c:	b29a      	uxth	r2, r3
 800116e:	4639      	mov	r1, r7
 8001170:	2364      	movs	r3, #100	; 0x64
 8001172:	4805      	ldr	r0, [pc, #20]	; (8001188 <check_alcohol_level+0xb8>)
 8001174:	f003 fecf 	bl	8004f16 <HAL_UART_Transmit>
		return false;
 8001178:	2300      	movs	r3, #0
	}

}
 800117a:	4618      	mov	r0, r3
 800117c:	3748      	adds	r7, #72	; 0x48
 800117e:	46bd      	mov	sp, r7
 8001180:	bdb0      	pop	{r4, r5, r7, pc}
 8001182:	bf00      	nop
 8001184:	0800a098 	.word	0x0800a098
 8001188:	20000320 	.word	0x20000320
 800118c:	40020800 	.word	0x40020800
 8001190:	0800a0b4 	.word	0x0800a0b4
 8001194:	0800a0cc 	.word	0x0800a0cc

08001198 <start_measurement>:
/**
 * @brief Triggers the sensors to start measuring the distances.
 * @param None
 * @retval None
 */
void start_measurement() {
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0

	// Pull pin high for 10 us to trigger measurement
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
 800119c:	2201      	movs	r2, #1
 800119e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011a2:	4825      	ldr	r0, [pc, #148]	; (8001238 <start_measurement+0xa0>)
 80011a4:	f002 fa48 	bl	8003638 <HAL_GPIO_WritePin>
	uS_delay(10);
 80011a8:	200a      	movs	r0, #10
 80011aa:	f000 f859 	bl	8001260 <uS_delay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 80011ae:	2200      	movs	r2, #0
 80011b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011b4:	4820      	ldr	r0, [pc, #128]	; (8001238 <start_measurement+0xa0>)
 80011b6:	f002 fa3f 	bl	8003638 <HAL_GPIO_WritePin>

	// Only trigger sensor measurement if sensor is not disabled
	if (is_front_sensor1_operative == true) {
 80011ba:	4b20      	ldr	r3, [pc, #128]	; (800123c <start_measurement+0xa4>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d007      	beq.n	80011d2 <start_measurement+0x3a>
		__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 80011c2:	4b1f      	ldr	r3, [pc, #124]	; (8001240 <start_measurement+0xa8>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	68da      	ldr	r2, [r3, #12]
 80011c8:	4b1d      	ldr	r3, [pc, #116]	; (8001240 <start_measurement+0xa8>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f042 0202 	orr.w	r2, r2, #2
 80011d0:	60da      	str	r2, [r3, #12]
	}
	if (is_front_sensor2_operative == true) {
 80011d2:	4b1c      	ldr	r3, [pc, #112]	; (8001244 <start_measurement+0xac>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d007      	beq.n	80011ea <start_measurement+0x52>
		__HAL_TIM_ENABLE_IT(&htim8, TIM_IT_CC1);
 80011da:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <start_measurement+0xb0>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	68da      	ldr	r2, [r3, #12]
 80011e0:	4b19      	ldr	r3, [pc, #100]	; (8001248 <start_measurement+0xb0>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f042 0202 	orr.w	r2, r2, #2
 80011e8:	60da      	str	r2, [r3, #12]
	}
	if (is_back_sensor2_operative == true) {
 80011ea:	4b18      	ldr	r3, [pc, #96]	; (800124c <start_measurement+0xb4>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d007      	beq.n	8001202 <start_measurement+0x6a>
		__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC1);
 80011f2:	4b17      	ldr	r3, [pc, #92]	; (8001250 <start_measurement+0xb8>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	68da      	ldr	r2, [r3, #12]
 80011f8:	4b15      	ldr	r3, [pc, #84]	; (8001250 <start_measurement+0xb8>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f042 0202 	orr.w	r2, r2, #2
 8001200:	60da      	str	r2, [r3, #12]
	}
	if (is_back_sensor1_operative == true) {
 8001202:	4b14      	ldr	r3, [pc, #80]	; (8001254 <start_measurement+0xbc>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d007      	beq.n	800121a <start_measurement+0x82>
		__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
 800120a:	4b13      	ldr	r3, [pc, #76]	; (8001258 <start_measurement+0xc0>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	68da      	ldr	r2, [r3, #12]
 8001210:	4b11      	ldr	r3, [pc, #68]	; (8001258 <start_measurement+0xc0>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f042 0202 	orr.w	r2, r2, #2
 8001218:	60da      	str	r2, [r3, #12]
	}

	measurements_count =
			measurements_count < 3 ?
 800121a:	4b10      	ldr	r3, [pc, #64]	; (800125c <start_measurement+0xc4>)
 800121c:	781b      	ldrb	r3, [r3, #0]
	measurements_count =
 800121e:	2b02      	cmp	r3, #2
 8001220:	d804      	bhi.n	800122c <start_measurement+0x94>
					measurements_count + 1 : measurements_count;
 8001222:	4b0e      	ldr	r3, [pc, #56]	; (800125c <start_measurement+0xc4>)
 8001224:	781b      	ldrb	r3, [r3, #0]
	measurements_count =
 8001226:	3301      	adds	r3, #1
 8001228:	b2db      	uxtb	r3, r3
 800122a:	e001      	b.n	8001230 <start_measurement+0x98>
 800122c:	4b0b      	ldr	r3, [pc, #44]	; (800125c <start_measurement+0xc4>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	4a0a      	ldr	r2, [pc, #40]	; (800125c <start_measurement+0xc4>)
 8001232:	7013      	strb	r3, [r2, #0]

}
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40020800 	.word	0x40020800
 800123c:	20000000 	.word	0x20000000
 8001240:	20000200 	.word	0x20000200
 8001244:	20000001 	.word	0x20000001
 8001248:	200002d8 	.word	0x200002d8
 800124c:	20000003 	.word	0x20000003
 8001250:	20000248 	.word	0x20000248
 8001254:	20000002 	.word	0x20000002
 8001258:	20000290 	.word	0x20000290
 800125c:	20000370 	.word	0x20000370

08001260 <uS_delay>:
/**
 * @brief Delay function in microseconds.
 * @param[in] delay The delay time.
 * @retval None
 */
void uS_delay(uint16_t delay) {
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SET_COUNTER(&htim1, 0);
 800126a:	4b09      	ldr	r3, [pc, #36]	; (8001290 <uS_delay+0x30>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2200      	movs	r2, #0
 8001270:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < delay)
 8001272:	bf00      	nop
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <uS_delay+0x30>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800127a:	88fb      	ldrh	r3, [r7, #6]
 800127c:	429a      	cmp	r2, r3
 800127e:	d3f9      	bcc.n	8001274 <uS_delay+0x14>
		;

}
 8001280:	bf00      	nop
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	20000200 	.word	0x20000200
 8001294:	00000000 	.word	0x00000000

08001298 <HAL_TIM_IC_CaptureCallback>:
/**
 * @brief Callback function to capture inputs from the distance sensors on change.
 * @param[in] htim The timer instance that triggered the Callback function.
 * @retval None
 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]

	// Front sensor 1
	if (htim->Instance == TIM1) {
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a8e      	ldr	r2, [pc, #568]	; (80014e0 <HAL_TIM_IC_CaptureCallback+0x248>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	f040 8087 	bne.w	80013ba <HAL_TIM_IC_CaptureCallback+0x122>
		// Start of pulse
		if (is_start_captured_front_sensor1 == false) {
 80012ac:	4b8d      	ldr	r3, [pc, #564]	; (80014e4 <HAL_TIM_IC_CaptureCallback+0x24c>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	f083 0301 	eor.w	r3, r3, #1
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d01a      	beq.n	80012f0 <HAL_TIM_IC_CaptureCallback+0x58>
			start_of_pulse_front_sensor1 = HAL_TIM_ReadCapturedValue(htim,
 80012ba:	2100      	movs	r1, #0
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f003 faf1 	bl	80048a4 <HAL_TIM_ReadCapturedValue>
 80012c2:	4603      	mov	r3, r0
 80012c4:	4a88      	ldr	r2, [pc, #544]	; (80014e8 <HAL_TIM_IC_CaptureCallback+0x250>)
 80012c6:	6013      	str	r3, [r2, #0]
					TIM_CHANNEL_1);
			is_start_captured_front_sensor1 = true;
 80012c8:	4b86      	ldr	r3, [pc, #536]	; (80014e4 <HAL_TIM_IC_CaptureCallback+0x24c>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	701a      	strb	r2, [r3, #0]
			// Change polarity to capture 'Falling Edge'
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	6a1a      	ldr	r2, [r3, #32]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f022 020a 	bic.w	r2, r2, #10
 80012dc:	621a      	str	r2, [r3, #32]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	6a1a      	ldr	r2, [r3, #32]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f042 0202 	orr.w	r2, r2, #2
 80012ec:	621a      	str	r2, [r3, #32]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
					TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
		}
	}
}
 80012ee:	e22b      	b.n	8001748 <HAL_TIM_IC_CaptureCallback+0x4b0>
		else if (is_start_captured_front_sensor1 == true) {
 80012f0:	4b7c      	ldr	r3, [pc, #496]	; (80014e4 <HAL_TIM_IC_CaptureCallback+0x24c>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	f000 8227 	beq.w	8001748 <HAL_TIM_IC_CaptureCallback+0x4b0>
			end_of_pulse_front_sensor1 = HAL_TIM_ReadCapturedValue(htim,
 80012fa:	2100      	movs	r1, #0
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f003 fad1 	bl	80048a4 <HAL_TIM_ReadCapturedValue>
 8001302:	4603      	mov	r3, r0
 8001304:	4a79      	ldr	r2, [pc, #484]	; (80014ec <HAL_TIM_IC_CaptureCallback+0x254>)
 8001306:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2200      	movs	r2, #0
 800130e:	625a      	str	r2, [r3, #36]	; 0x24
			if (end_of_pulse_front_sensor1 > start_of_pulse_front_sensor1) {
 8001310:	4b76      	ldr	r3, [pc, #472]	; (80014ec <HAL_TIM_IC_CaptureCallback+0x254>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	4b74      	ldr	r3, [pc, #464]	; (80014e8 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	429a      	cmp	r2, r3
 800131a:	d907      	bls.n	800132c <HAL_TIM_IC_CaptureCallback+0x94>
						- start_of_pulse_front_sensor1;
 800131c:	4b73      	ldr	r3, [pc, #460]	; (80014ec <HAL_TIM_IC_CaptureCallback+0x254>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	4b71      	ldr	r3, [pc, #452]	; (80014e8 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	1ad3      	subs	r3, r2, r3
				difference_front_sensor1 = end_of_pulse_front_sensor1
 8001326:	4a72      	ldr	r2, [pc, #456]	; (80014f0 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001328:	6013      	str	r3, [r2, #0]
 800132a:	e00f      	b.n	800134c <HAL_TIM_IC_CaptureCallback+0xb4>
					> end_of_pulse_front_sensor1) {
 800132c:	4b6e      	ldr	r3, [pc, #440]	; (80014e8 <HAL_TIM_IC_CaptureCallback+0x250>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4b6e      	ldr	r3, [pc, #440]	; (80014ec <HAL_TIM_IC_CaptureCallback+0x254>)
 8001332:	681b      	ldr	r3, [r3, #0]
			else if (start_of_pulse_front_sensor1
 8001334:	429a      	cmp	r2, r3
 8001336:	d909      	bls.n	800134c <HAL_TIM_IC_CaptureCallback+0xb4>
						+ end_of_pulse_front_sensor1;
 8001338:	4b6c      	ldr	r3, [pc, #432]	; (80014ec <HAL_TIM_IC_CaptureCallback+0x254>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	4b6a      	ldr	r3, [pc, #424]	; (80014e8 <HAL_TIM_IC_CaptureCallback+0x250>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001346:	33ff      	adds	r3, #255	; 0xff
				difference_front_sensor1 = (0xffff
 8001348:	4a69      	ldr	r2, [pc, #420]	; (80014f0 <HAL_TIM_IC_CaptureCallback+0x258>)
 800134a:	6013      	str	r3, [r2, #0]
			distance_front_sensor1 = (difference_front_sensor1 * .034 / 2);
 800134c:	4b68      	ldr	r3, [pc, #416]	; (80014f0 <HAL_TIM_IC_CaptureCallback+0x258>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff f8f7 	bl	8000544 <__aeabi_ui2d>
 8001356:	a360      	add	r3, pc, #384	; (adr r3, 80014d8 <HAL_TIM_IC_CaptureCallback+0x240>)
 8001358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135c:	f7ff f96c 	bl	8000638 <__aeabi_dmul>
 8001360:	4602      	mov	r2, r0
 8001362:	460b      	mov	r3, r1
 8001364:	4610      	mov	r0, r2
 8001366:	4619      	mov	r1, r3
 8001368:	f04f 0200 	mov.w	r2, #0
 800136c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001370:	f7ff fa8c 	bl	800088c <__aeabi_ddiv>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	4610      	mov	r0, r2
 800137a:	4619      	mov	r1, r3
 800137c:	f7ff fc54 	bl	8000c28 <__aeabi_d2f>
 8001380:	4603      	mov	r3, r0
 8001382:	4a5c      	ldr	r2, [pc, #368]	; (80014f4 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001384:	6013      	str	r3, [r2, #0]
			is_start_captured_front_sensor1 = false;
 8001386:	4b57      	ldr	r3, [pc, #348]	; (80014e4 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8001388:	2200      	movs	r2, #0
 800138a:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	6a1a      	ldr	r2, [r3, #32]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f022 020a 	bic.w	r2, r2, #10
 800139a:	621a      	str	r2, [r3, #32]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	6a12      	ldr	r2, [r2, #32]
 80013a6:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 80013a8:	4b53      	ldr	r3, [pc, #332]	; (80014f8 <HAL_TIM_IC_CaptureCallback+0x260>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	68da      	ldr	r2, [r3, #12]
 80013ae:	4b52      	ldr	r3, [pc, #328]	; (80014f8 <HAL_TIM_IC_CaptureCallback+0x260>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 0202 	bic.w	r2, r2, #2
 80013b6:	60da      	str	r2, [r3, #12]
}
 80013b8:	e1c6      	b.n	8001748 <HAL_TIM_IC_CaptureCallback+0x4b0>
	else if (htim->Instance == TIM8) {
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a4f      	ldr	r2, [pc, #316]	; (80014fc <HAL_TIM_IC_CaptureCallback+0x264>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	f040 80a9 	bne.w	8001518 <HAL_TIM_IC_CaptureCallback+0x280>
		if (is_start_captured_front_sensor2 == false) {
 80013c6:	4b4e      	ldr	r3, [pc, #312]	; (8001500 <HAL_TIM_IC_CaptureCallback+0x268>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	f083 0301 	eor.w	r3, r3, #1
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d01a      	beq.n	800140a <HAL_TIM_IC_CaptureCallback+0x172>
			start_of_pulse_front_sensor2 = HAL_TIM_ReadCapturedValue(htim,
 80013d4:	2100      	movs	r1, #0
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f003 fa64 	bl	80048a4 <HAL_TIM_ReadCapturedValue>
 80013dc:	4603      	mov	r3, r0
 80013de:	4a49      	ldr	r2, [pc, #292]	; (8001504 <HAL_TIM_IC_CaptureCallback+0x26c>)
 80013e0:	6013      	str	r3, [r2, #0]
			is_start_captured_front_sensor2 = true;
 80013e2:	4b47      	ldr	r3, [pc, #284]	; (8001500 <HAL_TIM_IC_CaptureCallback+0x268>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	6a1a      	ldr	r2, [r3, #32]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f022 020a 	bic.w	r2, r2, #10
 80013f6:	621a      	str	r2, [r3, #32]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	6a1a      	ldr	r2, [r3, #32]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f042 0202 	orr.w	r2, r2, #2
 8001406:	621a      	str	r2, [r3, #32]
}
 8001408:	e19e      	b.n	8001748 <HAL_TIM_IC_CaptureCallback+0x4b0>
		else if (is_start_captured_front_sensor2 == true) {
 800140a:	4b3d      	ldr	r3, [pc, #244]	; (8001500 <HAL_TIM_IC_CaptureCallback+0x268>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	f000 819a 	beq.w	8001748 <HAL_TIM_IC_CaptureCallback+0x4b0>
			end_of_pulse_front_sensor2 = HAL_TIM_ReadCapturedValue(htim,
 8001414:	2100      	movs	r1, #0
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f003 fa44 	bl	80048a4 <HAL_TIM_ReadCapturedValue>
 800141c:	4603      	mov	r3, r0
 800141e:	4a3a      	ldr	r2, [pc, #232]	; (8001508 <HAL_TIM_IC_CaptureCallback+0x270>)
 8001420:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2200      	movs	r2, #0
 8001428:	625a      	str	r2, [r3, #36]	; 0x24
			if (end_of_pulse_front_sensor2 > start_of_pulse_front_sensor2) {
 800142a:	4b37      	ldr	r3, [pc, #220]	; (8001508 <HAL_TIM_IC_CaptureCallback+0x270>)
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	4b35      	ldr	r3, [pc, #212]	; (8001504 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	429a      	cmp	r2, r3
 8001434:	d907      	bls.n	8001446 <HAL_TIM_IC_CaptureCallback+0x1ae>
						- start_of_pulse_front_sensor2;
 8001436:	4b34      	ldr	r3, [pc, #208]	; (8001508 <HAL_TIM_IC_CaptureCallback+0x270>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	4b32      	ldr	r3, [pc, #200]	; (8001504 <HAL_TIM_IC_CaptureCallback+0x26c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	1ad3      	subs	r3, r2, r3
				difference_front_sensor2 = end_of_pulse_front_sensor2
 8001440:	4a32      	ldr	r2, [pc, #200]	; (800150c <HAL_TIM_IC_CaptureCallback+0x274>)
 8001442:	6013      	str	r3, [r2, #0]
 8001444:	e00f      	b.n	8001466 <HAL_TIM_IC_CaptureCallback+0x1ce>
					> end_of_pulse_front_sensor2) {
 8001446:	4b2f      	ldr	r3, [pc, #188]	; (8001504 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	4b2f      	ldr	r3, [pc, #188]	; (8001508 <HAL_TIM_IC_CaptureCallback+0x270>)
 800144c:	681b      	ldr	r3, [r3, #0]
			else if (start_of_pulse_front_sensor2
 800144e:	429a      	cmp	r2, r3
 8001450:	d909      	bls.n	8001466 <HAL_TIM_IC_CaptureCallback+0x1ce>
						+ end_of_pulse_front_sensor2;
 8001452:	4b2d      	ldr	r3, [pc, #180]	; (8001508 <HAL_TIM_IC_CaptureCallback+0x270>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	4b2b      	ldr	r3, [pc, #172]	; (8001504 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001460:	33ff      	adds	r3, #255	; 0xff
				difference_front_sensor2 = (0xffff
 8001462:	4a2a      	ldr	r2, [pc, #168]	; (800150c <HAL_TIM_IC_CaptureCallback+0x274>)
 8001464:	6013      	str	r3, [r2, #0]
			distance_front_sensor2 = (difference_front_sensor2 * .034 / 2);
 8001466:	4b29      	ldr	r3, [pc, #164]	; (800150c <HAL_TIM_IC_CaptureCallback+0x274>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff f86a 	bl	8000544 <__aeabi_ui2d>
 8001470:	a319      	add	r3, pc, #100	; (adr r3, 80014d8 <HAL_TIM_IC_CaptureCallback+0x240>)
 8001472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001476:	f7ff f8df 	bl	8000638 <__aeabi_dmul>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	4610      	mov	r0, r2
 8001480:	4619      	mov	r1, r3
 8001482:	f04f 0200 	mov.w	r2, #0
 8001486:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800148a:	f7ff f9ff 	bl	800088c <__aeabi_ddiv>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	4610      	mov	r0, r2
 8001494:	4619      	mov	r1, r3
 8001496:	f7ff fbc7 	bl	8000c28 <__aeabi_d2f>
 800149a:	4603      	mov	r3, r0
 800149c:	4a1c      	ldr	r2, [pc, #112]	; (8001510 <HAL_TIM_IC_CaptureCallback+0x278>)
 800149e:	6013      	str	r3, [r2, #0]
			is_start_captured_front_sensor2 = false;
 80014a0:	4b17      	ldr	r3, [pc, #92]	; (8001500 <HAL_TIM_IC_CaptureCallback+0x268>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	6a1a      	ldr	r2, [r3, #32]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f022 020a 	bic.w	r2, r2, #10
 80014b4:	621a      	str	r2, [r3, #32]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6a12      	ldr	r2, [r2, #32]
 80014c0:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim8, TIM_IT_CC1);
 80014c2:	4b14      	ldr	r3, [pc, #80]	; (8001514 <HAL_TIM_IC_CaptureCallback+0x27c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	68da      	ldr	r2, [r3, #12]
 80014c8:	4b12      	ldr	r3, [pc, #72]	; (8001514 <HAL_TIM_IC_CaptureCallback+0x27c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f022 0202 	bic.w	r2, r2, #2
 80014d0:	60da      	str	r2, [r3, #12]
}
 80014d2:	e139      	b.n	8001748 <HAL_TIM_IC_CaptureCallback+0x4b0>
 80014d4:	f3af 8000 	nop.w
 80014d8:	b020c49c 	.word	0xb020c49c
 80014dc:	3fa16872 	.word	0x3fa16872
 80014e0:	40010000 	.word	0x40010000
 80014e4:	20000388 	.word	0x20000388
 80014e8:	2000037c 	.word	0x2000037c
 80014ec:	20000380 	.word	0x20000380
 80014f0:	20000384 	.word	0x20000384
 80014f4:	2000038c 	.word	0x2000038c
 80014f8:	20000200 	.word	0x20000200
 80014fc:	40010400 	.word	0x40010400
 8001500:	200003ac 	.word	0x200003ac
 8001504:	200003a0 	.word	0x200003a0
 8001508:	200003a4 	.word	0x200003a4
 800150c:	200003a8 	.word	0x200003a8
 8001510:	200003b0 	.word	0x200003b0
 8001514:	200002d8 	.word	0x200002d8
	else if (htim->Instance == TIM3) {
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a8e      	ldr	r2, [pc, #568]	; (8001758 <HAL_TIM_IC_CaptureCallback+0x4c0>)
 800151e:	4293      	cmp	r3, r2
 8001520:	f040 8087 	bne.w	8001632 <HAL_TIM_IC_CaptureCallback+0x39a>
		if (is_start_captured_back_sensor2 == false) {
 8001524:	4b8d      	ldr	r3, [pc, #564]	; (800175c <HAL_TIM_IC_CaptureCallback+0x4c4>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	f083 0301 	eor.w	r3, r3, #1
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2b00      	cmp	r3, #0
 8001530:	d01a      	beq.n	8001568 <HAL_TIM_IC_CaptureCallback+0x2d0>
			start_of_pulse_back_sensor2 = HAL_TIM_ReadCapturedValue(htim,
 8001532:	2100      	movs	r1, #0
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f003 f9b5 	bl	80048a4 <HAL_TIM_ReadCapturedValue>
 800153a:	4603      	mov	r3, r0
 800153c:	4a88      	ldr	r2, [pc, #544]	; (8001760 <HAL_TIM_IC_CaptureCallback+0x4c8>)
 800153e:	6013      	str	r3, [r2, #0]
			is_start_captured_back_sensor2 = true;
 8001540:	4b86      	ldr	r3, [pc, #536]	; (800175c <HAL_TIM_IC_CaptureCallback+0x4c4>)
 8001542:	2201      	movs	r2, #1
 8001544:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	6a1a      	ldr	r2, [r3, #32]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f022 020a 	bic.w	r2, r2, #10
 8001554:	621a      	str	r2, [r3, #32]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6a1a      	ldr	r2, [r3, #32]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f042 0202 	orr.w	r2, r2, #2
 8001564:	621a      	str	r2, [r3, #32]
}
 8001566:	e0ef      	b.n	8001748 <HAL_TIM_IC_CaptureCallback+0x4b0>
		else if (is_start_captured_back_sensor2 == true) {
 8001568:	4b7c      	ldr	r3, [pc, #496]	; (800175c <HAL_TIM_IC_CaptureCallback+0x4c4>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	f000 80eb 	beq.w	8001748 <HAL_TIM_IC_CaptureCallback+0x4b0>
			end_of_pulse_back_sensor2 = HAL_TIM_ReadCapturedValue(htim,
 8001572:	2100      	movs	r1, #0
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f003 f995 	bl	80048a4 <HAL_TIM_ReadCapturedValue>
 800157a:	4603      	mov	r3, r0
 800157c:	4a79      	ldr	r2, [pc, #484]	; (8001764 <HAL_TIM_IC_CaptureCallback+0x4cc>)
 800157e:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2200      	movs	r2, #0
 8001586:	625a      	str	r2, [r3, #36]	; 0x24
			if (end_of_pulse_back_sensor2 > start_of_pulse_back_sensor2) {
 8001588:	4b76      	ldr	r3, [pc, #472]	; (8001764 <HAL_TIM_IC_CaptureCallback+0x4cc>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4b74      	ldr	r3, [pc, #464]	; (8001760 <HAL_TIM_IC_CaptureCallback+0x4c8>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	429a      	cmp	r2, r3
 8001592:	d907      	bls.n	80015a4 <HAL_TIM_IC_CaptureCallback+0x30c>
						- start_of_pulse_back_sensor2;
 8001594:	4b73      	ldr	r3, [pc, #460]	; (8001764 <HAL_TIM_IC_CaptureCallback+0x4cc>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4b71      	ldr	r3, [pc, #452]	; (8001760 <HAL_TIM_IC_CaptureCallback+0x4c8>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	1ad3      	subs	r3, r2, r3
				difference_back_sensor2 = end_of_pulse_back_sensor2
 800159e:	4a72      	ldr	r2, [pc, #456]	; (8001768 <HAL_TIM_IC_CaptureCallback+0x4d0>)
 80015a0:	6013      	str	r3, [r2, #0]
 80015a2:	e00f      	b.n	80015c4 <HAL_TIM_IC_CaptureCallback+0x32c>
			else if (start_of_pulse_back_sensor2 > end_of_pulse_back_sensor2) {
 80015a4:	4b6e      	ldr	r3, [pc, #440]	; (8001760 <HAL_TIM_IC_CaptureCallback+0x4c8>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4b6e      	ldr	r3, [pc, #440]	; (8001764 <HAL_TIM_IC_CaptureCallback+0x4cc>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d909      	bls.n	80015c4 <HAL_TIM_IC_CaptureCallback+0x32c>
						+ end_of_pulse_back_sensor2;
 80015b0:	4b6c      	ldr	r3, [pc, #432]	; (8001764 <HAL_TIM_IC_CaptureCallback+0x4cc>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	4b6a      	ldr	r3, [pc, #424]	; (8001760 <HAL_TIM_IC_CaptureCallback+0x4c8>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80015be:	33ff      	adds	r3, #255	; 0xff
				difference_back_sensor2 = (0xffff - start_of_pulse_back_sensor2)
 80015c0:	4a69      	ldr	r2, [pc, #420]	; (8001768 <HAL_TIM_IC_CaptureCallback+0x4d0>)
 80015c2:	6013      	str	r3, [r2, #0]
			distance_back_sensor2 = (difference_back_sensor2 * .034 / 2);
 80015c4:	4b68      	ldr	r3, [pc, #416]	; (8001768 <HAL_TIM_IC_CaptureCallback+0x4d0>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7fe ffbb 	bl	8000544 <__aeabi_ui2d>
 80015ce:	a360      	add	r3, pc, #384	; (adr r3, 8001750 <HAL_TIM_IC_CaptureCallback+0x4b8>)
 80015d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d4:	f7ff f830 	bl	8000638 <__aeabi_dmul>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4610      	mov	r0, r2
 80015de:	4619      	mov	r1, r3
 80015e0:	f04f 0200 	mov.w	r2, #0
 80015e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015e8:	f7ff f950 	bl	800088c <__aeabi_ddiv>
 80015ec:	4602      	mov	r2, r0
 80015ee:	460b      	mov	r3, r1
 80015f0:	4610      	mov	r0, r2
 80015f2:	4619      	mov	r1, r3
 80015f4:	f7ff fb18 	bl	8000c28 <__aeabi_d2f>
 80015f8:	4603      	mov	r3, r0
 80015fa:	4a5c      	ldr	r2, [pc, #368]	; (800176c <HAL_TIM_IC_CaptureCallback+0x4d4>)
 80015fc:	6013      	str	r3, [r2, #0]
			is_start_captured_back_sensor2 = false;
 80015fe:	4b57      	ldr	r3, [pc, #348]	; (800175c <HAL_TIM_IC_CaptureCallback+0x4c4>)
 8001600:	2200      	movs	r2, #0
 8001602:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	6a1a      	ldr	r2, [r3, #32]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f022 020a 	bic.w	r2, r2, #10
 8001612:	621a      	str	r2, [r3, #32]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	6a12      	ldr	r2, [r2, #32]
 800161e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1);
 8001620:	4b53      	ldr	r3, [pc, #332]	; (8001770 <HAL_TIM_IC_CaptureCallback+0x4d8>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	68da      	ldr	r2, [r3, #12]
 8001626:	4b52      	ldr	r3, [pc, #328]	; (8001770 <HAL_TIM_IC_CaptureCallback+0x4d8>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f022 0202 	bic.w	r2, r2, #2
 800162e:	60da      	str	r2, [r3, #12]
}
 8001630:	e08a      	b.n	8001748 <HAL_TIM_IC_CaptureCallback+0x4b0>
	else if (htim->Instance == TIM4) {
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a4f      	ldr	r2, [pc, #316]	; (8001774 <HAL_TIM_IC_CaptureCallback+0x4dc>)
 8001638:	4293      	cmp	r3, r2
 800163a:	f040 8085 	bne.w	8001748 <HAL_TIM_IC_CaptureCallback+0x4b0>
		if (is_start_captured_back_sensor1 == false) {
 800163e:	4b4e      	ldr	r3, [pc, #312]	; (8001778 <HAL_TIM_IC_CaptureCallback+0x4e0>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	f083 0301 	eor.w	r3, r3, #1
 8001646:	b2db      	uxtb	r3, r3
 8001648:	2b00      	cmp	r3, #0
 800164a:	d01a      	beq.n	8001682 <HAL_TIM_IC_CaptureCallback+0x3ea>
			start_of_pulse_back_sensor1 = HAL_TIM_ReadCapturedValue(htim,
 800164c:	2100      	movs	r1, #0
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f003 f928 	bl	80048a4 <HAL_TIM_ReadCapturedValue>
 8001654:	4603      	mov	r3, r0
 8001656:	4a49      	ldr	r2, [pc, #292]	; (800177c <HAL_TIM_IC_CaptureCallback+0x4e4>)
 8001658:	6013      	str	r3, [r2, #0]
			is_start_captured_back_sensor1 = true;
 800165a:	4b47      	ldr	r3, [pc, #284]	; (8001778 <HAL_TIM_IC_CaptureCallback+0x4e0>)
 800165c:	2201      	movs	r2, #1
 800165e:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	6a1a      	ldr	r2, [r3, #32]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f022 020a 	bic.w	r2, r2, #10
 800166e:	621a      	str	r2, [r3, #32]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6a1a      	ldr	r2, [r3, #32]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f042 0202 	orr.w	r2, r2, #2
 800167e:	621a      	str	r2, [r3, #32]
}
 8001680:	e062      	b.n	8001748 <HAL_TIM_IC_CaptureCallback+0x4b0>
		else if (is_start_captured_back_sensor1 == true) {
 8001682:	4b3d      	ldr	r3, [pc, #244]	; (8001778 <HAL_TIM_IC_CaptureCallback+0x4e0>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d05e      	beq.n	8001748 <HAL_TIM_IC_CaptureCallback+0x4b0>
			end_of_pulse_back_sensor1 = HAL_TIM_ReadCapturedValue(htim,
 800168a:	2100      	movs	r1, #0
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f003 f909 	bl	80048a4 <HAL_TIM_ReadCapturedValue>
 8001692:	4603      	mov	r3, r0
 8001694:	4a3a      	ldr	r2, [pc, #232]	; (8001780 <HAL_TIM_IC_CaptureCallback+0x4e8>)
 8001696:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2200      	movs	r2, #0
 800169e:	625a      	str	r2, [r3, #36]	; 0x24
			if (end_of_pulse_back_sensor1 > start_of_pulse_back_sensor1) {
 80016a0:	4b37      	ldr	r3, [pc, #220]	; (8001780 <HAL_TIM_IC_CaptureCallback+0x4e8>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	4b35      	ldr	r3, [pc, #212]	; (800177c <HAL_TIM_IC_CaptureCallback+0x4e4>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d907      	bls.n	80016bc <HAL_TIM_IC_CaptureCallback+0x424>
						- start_of_pulse_back_sensor1;
 80016ac:	4b34      	ldr	r3, [pc, #208]	; (8001780 <HAL_TIM_IC_CaptureCallback+0x4e8>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	4b32      	ldr	r3, [pc, #200]	; (800177c <HAL_TIM_IC_CaptureCallback+0x4e4>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	1ad3      	subs	r3, r2, r3
				difference_back_sensor1 = end_of_pulse_back_sensor1
 80016b6:	4a33      	ldr	r2, [pc, #204]	; (8001784 <HAL_TIM_IC_CaptureCallback+0x4ec>)
 80016b8:	6013      	str	r3, [r2, #0]
 80016ba:	e00f      	b.n	80016dc <HAL_TIM_IC_CaptureCallback+0x444>
			else if (start_of_pulse_back_sensor1 > end_of_pulse_back_sensor1) {
 80016bc:	4b2f      	ldr	r3, [pc, #188]	; (800177c <HAL_TIM_IC_CaptureCallback+0x4e4>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	4b2f      	ldr	r3, [pc, #188]	; (8001780 <HAL_TIM_IC_CaptureCallback+0x4e8>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d909      	bls.n	80016dc <HAL_TIM_IC_CaptureCallback+0x444>
						+ end_of_pulse_back_sensor1;
 80016c8:	4b2d      	ldr	r3, [pc, #180]	; (8001780 <HAL_TIM_IC_CaptureCallback+0x4e8>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	4b2b      	ldr	r3, [pc, #172]	; (800177c <HAL_TIM_IC_CaptureCallback+0x4e4>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80016d6:	33ff      	adds	r3, #255	; 0xff
				difference_back_sensor1 = (0xffff - start_of_pulse_back_sensor1)
 80016d8:	4a2a      	ldr	r2, [pc, #168]	; (8001784 <HAL_TIM_IC_CaptureCallback+0x4ec>)
 80016da:	6013      	str	r3, [r2, #0]
			distance_back_sensor1 = (difference_back_sensor1 * .034 / 2);
 80016dc:	4b29      	ldr	r3, [pc, #164]	; (8001784 <HAL_TIM_IC_CaptureCallback+0x4ec>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7fe ff2f 	bl	8000544 <__aeabi_ui2d>
 80016e6:	a31a      	add	r3, pc, #104	; (adr r3, 8001750 <HAL_TIM_IC_CaptureCallback+0x4b8>)
 80016e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ec:	f7fe ffa4 	bl	8000638 <__aeabi_dmul>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	4610      	mov	r0, r2
 80016f6:	4619      	mov	r1, r3
 80016f8:	f04f 0200 	mov.w	r2, #0
 80016fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001700:	f7ff f8c4 	bl	800088c <__aeabi_ddiv>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4610      	mov	r0, r2
 800170a:	4619      	mov	r1, r3
 800170c:	f7ff fa8c 	bl	8000c28 <__aeabi_d2f>
 8001710:	4603      	mov	r3, r0
 8001712:	4a1d      	ldr	r2, [pc, #116]	; (8001788 <HAL_TIM_IC_CaptureCallback+0x4f0>)
 8001714:	6013      	str	r3, [r2, #0]
			is_start_captured_back_sensor1 = false;
 8001716:	4b18      	ldr	r3, [pc, #96]	; (8001778 <HAL_TIM_IC_CaptureCallback+0x4e0>)
 8001718:	2200      	movs	r2, #0
 800171a:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6a1a      	ldr	r2, [r3, #32]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f022 020a 	bic.w	r2, r2, #10
 800172a:	621a      	str	r2, [r3, #32]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6a12      	ldr	r2, [r2, #32]
 8001736:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 8001738:	4b14      	ldr	r3, [pc, #80]	; (800178c <HAL_TIM_IC_CaptureCallback+0x4f4>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	68da      	ldr	r2, [r3, #12]
 800173e:	4b13      	ldr	r3, [pc, #76]	; (800178c <HAL_TIM_IC_CaptureCallback+0x4f4>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f022 0202 	bic.w	r2, r2, #2
 8001746:	60da      	str	r2, [r3, #12]
}
 8001748:	bf00      	nop
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	b020c49c 	.word	0xb020c49c
 8001754:	3fa16872 	.word	0x3fa16872
 8001758:	40000400 	.word	0x40000400
 800175c:	200003f4 	.word	0x200003f4
 8001760:	200003e8 	.word	0x200003e8
 8001764:	200003ec 	.word	0x200003ec
 8001768:	200003f0 	.word	0x200003f0
 800176c:	200003f8 	.word	0x200003f8
 8001770:	20000248 	.word	0x20000248
 8001774:	40000800 	.word	0x40000800
 8001778:	200003d0 	.word	0x200003d0
 800177c:	200003c4 	.word	0x200003c4
 8001780:	200003c8 	.word	0x200003c8
 8001784:	200003cc 	.word	0x200003cc
 8001788:	200003d4 	.word	0x200003d4
 800178c:	20000290 	.word	0x20000290

08001790 <verify_sensor_measurements>:
 * @brief Verifying the new captured value of all sensors using a "Running Median" algorithm
 * with a given THRESHOLD value, to detect outliers and possible sensor malfunction during runtime.
 * @param None
 * @retval None
 */
void verify_sensor_measurements() {
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0

	switch (measurements_count) {
 8001796:	4b81      	ldr	r3, [pc, #516]	; (800199c <verify_sensor_measurements+0x20c>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b03      	cmp	r3, #3
 800179c:	f000 80aa 	beq.w	80018f4 <verify_sensor_measurements+0x164>
 80017a0:	2b03      	cmp	r3, #3
 80017a2:	f300 80f8 	bgt.w	8001996 <verify_sensor_measurements+0x206>
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d002      	beq.n	80017b0 <verify_sensor_measurements+0x20>
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d051      	beq.n	8001852 <verify_sensor_measurements+0xc2>
 80017ae:	e0f2      	b.n	8001996 <verify_sensor_measurements+0x206>
	case 1:
		window_front_sensor1[0] = floorf(distance_front_sensor1 * 100) / 100;
 80017b0:	4b7b      	ldr	r3, [pc, #492]	; (80019a0 <verify_sensor_measurements+0x210>)
 80017b2:	edd3 7a00 	vldr	s15, [r3]
 80017b6:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 80019a4 <verify_sensor_measurements+0x214>
 80017ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017be:	eeb0 0a67 	vmov.f32	s0, s15
 80017c2:	f008 fc01 	bl	8009fc8 <floorf>
 80017c6:	eeb0 7a40 	vmov.f32	s14, s0
 80017ca:	eddf 6a76 	vldr	s13, [pc, #472]	; 80019a4 <verify_sensor_measurements+0x214>
 80017ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017d2:	4b75      	ldr	r3, [pc, #468]	; (80019a8 <verify_sensor_measurements+0x218>)
 80017d4:	edc3 7a00 	vstr	s15, [r3]
		window_front_sensor2[0] = floorf(distance_front_sensor2 * 100) / 100;
 80017d8:	4b74      	ldr	r3, [pc, #464]	; (80019ac <verify_sensor_measurements+0x21c>)
 80017da:	edd3 7a00 	vldr	s15, [r3]
 80017de:	ed9f 7a71 	vldr	s14, [pc, #452]	; 80019a4 <verify_sensor_measurements+0x214>
 80017e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017e6:	eeb0 0a67 	vmov.f32	s0, s15
 80017ea:	f008 fbed 	bl	8009fc8 <floorf>
 80017ee:	eeb0 7a40 	vmov.f32	s14, s0
 80017f2:	eddf 6a6c 	vldr	s13, [pc, #432]	; 80019a4 <verify_sensor_measurements+0x214>
 80017f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017fa:	4b6d      	ldr	r3, [pc, #436]	; (80019b0 <verify_sensor_measurements+0x220>)
 80017fc:	edc3 7a00 	vstr	s15, [r3]
		window_back_sensor1[0] = floorf(distance_back_sensor1 * 100) / 100;
 8001800:	4b6c      	ldr	r3, [pc, #432]	; (80019b4 <verify_sensor_measurements+0x224>)
 8001802:	edd3 7a00 	vldr	s15, [r3]
 8001806:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80019a4 <verify_sensor_measurements+0x214>
 800180a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800180e:	eeb0 0a67 	vmov.f32	s0, s15
 8001812:	f008 fbd9 	bl	8009fc8 <floorf>
 8001816:	eeb0 7a40 	vmov.f32	s14, s0
 800181a:	eddf 6a62 	vldr	s13, [pc, #392]	; 80019a4 <verify_sensor_measurements+0x214>
 800181e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001822:	4b65      	ldr	r3, [pc, #404]	; (80019b8 <verify_sensor_measurements+0x228>)
 8001824:	edc3 7a00 	vstr	s15, [r3]
		window_back_sensor2[0] = floorf(distance_back_sensor2 * 100) / 100;
 8001828:	4b64      	ldr	r3, [pc, #400]	; (80019bc <verify_sensor_measurements+0x22c>)
 800182a:	edd3 7a00 	vldr	s15, [r3]
 800182e:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80019a4 <verify_sensor_measurements+0x214>
 8001832:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001836:	eeb0 0a67 	vmov.f32	s0, s15
 800183a:	f008 fbc5 	bl	8009fc8 <floorf>
 800183e:	eeb0 7a40 	vmov.f32	s14, s0
 8001842:	eddf 6a58 	vldr	s13, [pc, #352]	; 80019a4 <verify_sensor_measurements+0x214>
 8001846:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800184a:	4b5d      	ldr	r3, [pc, #372]	; (80019c0 <verify_sensor_measurements+0x230>)
 800184c:	edc3 7a00 	vstr	s15, [r3]
		break;
 8001850:	e1f3      	b.n	8001c3a <verify_sensor_measurements+0x4aa>
	case 2:
		window_front_sensor1[1] = floorf(distance_front_sensor1 * 100) / 100;
 8001852:	4b53      	ldr	r3, [pc, #332]	; (80019a0 <verify_sensor_measurements+0x210>)
 8001854:	edd3 7a00 	vldr	s15, [r3]
 8001858:	ed9f 7a52 	vldr	s14, [pc, #328]	; 80019a4 <verify_sensor_measurements+0x214>
 800185c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001860:	eeb0 0a67 	vmov.f32	s0, s15
 8001864:	f008 fbb0 	bl	8009fc8 <floorf>
 8001868:	eeb0 7a40 	vmov.f32	s14, s0
 800186c:	eddf 6a4d 	vldr	s13, [pc, #308]	; 80019a4 <verify_sensor_measurements+0x214>
 8001870:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001874:	4b4c      	ldr	r3, [pc, #304]	; (80019a8 <verify_sensor_measurements+0x218>)
 8001876:	edc3 7a01 	vstr	s15, [r3, #4]
		window_front_sensor2[1] = floorf(distance_front_sensor2 * 100) / 100;
 800187a:	4b4c      	ldr	r3, [pc, #304]	; (80019ac <verify_sensor_measurements+0x21c>)
 800187c:	edd3 7a00 	vldr	s15, [r3]
 8001880:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80019a4 <verify_sensor_measurements+0x214>
 8001884:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001888:	eeb0 0a67 	vmov.f32	s0, s15
 800188c:	f008 fb9c 	bl	8009fc8 <floorf>
 8001890:	eeb0 7a40 	vmov.f32	s14, s0
 8001894:	eddf 6a43 	vldr	s13, [pc, #268]	; 80019a4 <verify_sensor_measurements+0x214>
 8001898:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800189c:	4b44      	ldr	r3, [pc, #272]	; (80019b0 <verify_sensor_measurements+0x220>)
 800189e:	edc3 7a01 	vstr	s15, [r3, #4]
		window_back_sensor1[1] = floorf(distance_back_sensor1 * 100) / 100;
 80018a2:	4b44      	ldr	r3, [pc, #272]	; (80019b4 <verify_sensor_measurements+0x224>)
 80018a4:	edd3 7a00 	vldr	s15, [r3]
 80018a8:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80019a4 <verify_sensor_measurements+0x214>
 80018ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018b0:	eeb0 0a67 	vmov.f32	s0, s15
 80018b4:	f008 fb88 	bl	8009fc8 <floorf>
 80018b8:	eeb0 7a40 	vmov.f32	s14, s0
 80018bc:	eddf 6a39 	vldr	s13, [pc, #228]	; 80019a4 <verify_sensor_measurements+0x214>
 80018c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018c4:	4b3c      	ldr	r3, [pc, #240]	; (80019b8 <verify_sensor_measurements+0x228>)
 80018c6:	edc3 7a01 	vstr	s15, [r3, #4]
		window_back_sensor2[1] = floorf(distance_back_sensor2 * 100) / 100;
 80018ca:	4b3c      	ldr	r3, [pc, #240]	; (80019bc <verify_sensor_measurements+0x22c>)
 80018cc:	edd3 7a00 	vldr	s15, [r3]
 80018d0:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80019a4 <verify_sensor_measurements+0x214>
 80018d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018d8:	eeb0 0a67 	vmov.f32	s0, s15
 80018dc:	f008 fb74 	bl	8009fc8 <floorf>
 80018e0:	eeb0 7a40 	vmov.f32	s14, s0
 80018e4:	eddf 6a2f 	vldr	s13, [pc, #188]	; 80019a4 <verify_sensor_measurements+0x214>
 80018e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018ec:	4b34      	ldr	r3, [pc, #208]	; (80019c0 <verify_sensor_measurements+0x230>)
 80018ee:	edc3 7a01 	vstr	s15, [r3, #4]
		break;
 80018f2:	e1a2      	b.n	8001c3a <verify_sensor_measurements+0x4aa>
	case 3:
		window_front_sensor1[2] = floorf(distance_front_sensor1 * 100) / 100;
 80018f4:	4b2a      	ldr	r3, [pc, #168]	; (80019a0 <verify_sensor_measurements+0x210>)
 80018f6:	edd3 7a00 	vldr	s15, [r3]
 80018fa:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80019a4 <verify_sensor_measurements+0x214>
 80018fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001902:	eeb0 0a67 	vmov.f32	s0, s15
 8001906:	f008 fb5f 	bl	8009fc8 <floorf>
 800190a:	eeb0 7a40 	vmov.f32	s14, s0
 800190e:	eddf 6a25 	vldr	s13, [pc, #148]	; 80019a4 <verify_sensor_measurements+0x214>
 8001912:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001916:	4b24      	ldr	r3, [pc, #144]	; (80019a8 <verify_sensor_measurements+0x218>)
 8001918:	edc3 7a02 	vstr	s15, [r3, #8]
		window_front_sensor2[2] = floorf(distance_front_sensor2 * 100) / 100;
 800191c:	4b23      	ldr	r3, [pc, #140]	; (80019ac <verify_sensor_measurements+0x21c>)
 800191e:	edd3 7a00 	vldr	s15, [r3]
 8001922:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80019a4 <verify_sensor_measurements+0x214>
 8001926:	ee67 7a87 	vmul.f32	s15, s15, s14
 800192a:	eeb0 0a67 	vmov.f32	s0, s15
 800192e:	f008 fb4b 	bl	8009fc8 <floorf>
 8001932:	eeb0 7a40 	vmov.f32	s14, s0
 8001936:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80019a4 <verify_sensor_measurements+0x214>
 800193a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800193e:	4b1c      	ldr	r3, [pc, #112]	; (80019b0 <verify_sensor_measurements+0x220>)
 8001940:	edc3 7a02 	vstr	s15, [r3, #8]
		window_back_sensor1[2] = floorf(distance_back_sensor1 * 100) / 100;
 8001944:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <verify_sensor_measurements+0x224>)
 8001946:	edd3 7a00 	vldr	s15, [r3]
 800194a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80019a4 <verify_sensor_measurements+0x214>
 800194e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001952:	eeb0 0a67 	vmov.f32	s0, s15
 8001956:	f008 fb37 	bl	8009fc8 <floorf>
 800195a:	eeb0 7a40 	vmov.f32	s14, s0
 800195e:	eddf 6a11 	vldr	s13, [pc, #68]	; 80019a4 <verify_sensor_measurements+0x214>
 8001962:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001966:	4b14      	ldr	r3, [pc, #80]	; (80019b8 <verify_sensor_measurements+0x228>)
 8001968:	edc3 7a02 	vstr	s15, [r3, #8]
		window_back_sensor2[2] = floorf(distance_back_sensor2 * 100) / 100;
 800196c:	4b13      	ldr	r3, [pc, #76]	; (80019bc <verify_sensor_measurements+0x22c>)
 800196e:	edd3 7a00 	vldr	s15, [r3]
 8001972:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80019a4 <verify_sensor_measurements+0x214>
 8001976:	ee67 7a87 	vmul.f32	s15, s15, s14
 800197a:	eeb0 0a67 	vmov.f32	s0, s15
 800197e:	f008 fb23 	bl	8009fc8 <floorf>
 8001982:	eeb0 7a40 	vmov.f32	s14, s0
 8001986:	eddf 6a07 	vldr	s13, [pc, #28]	; 80019a4 <verify_sensor_measurements+0x214>
 800198a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800198e:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <verify_sensor_measurements+0x230>)
 8001990:	edc3 7a02 	vstr	s15, [r3, #8]
		break;
 8001994:	e151      	b.n	8001c3a <verify_sensor_measurements+0x4aa>
	default:

		for (int i = 0; i < WINDOW_SIZE - 1; i++) {
 8001996:	2300      	movs	r3, #0
 8001998:	617b      	str	r3, [r7, #20]
 800199a:	e042      	b.n	8001a22 <verify_sensor_measurements+0x292>
 800199c:	20000370 	.word	0x20000370
 80019a0:	2000038c 	.word	0x2000038c
 80019a4:	42c80000 	.word	0x42c80000
 80019a8:	20000390 	.word	0x20000390
 80019ac:	200003b0 	.word	0x200003b0
 80019b0:	200003b4 	.word	0x200003b4
 80019b4:	200003d4 	.word	0x200003d4
 80019b8:	200003d8 	.word	0x200003d8
 80019bc:	200003f8 	.word	0x200003f8
 80019c0:	200003fc 	.word	0x200003fc
			window_front_sensor1[i] = window_front_sensor1[i + 1];
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	3301      	adds	r3, #1
 80019c8:	4a9e      	ldr	r2, [pc, #632]	; (8001c44 <verify_sensor_measurements+0x4b4>)
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4413      	add	r3, r2
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	499c      	ldr	r1, [pc, #624]	; (8001c44 <verify_sensor_measurements+0x4b4>)
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	440b      	add	r3, r1
 80019d8:	601a      	str	r2, [r3, #0]
			window_front_sensor2[i] = window_front_sensor2[i + 1];
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	3301      	adds	r3, #1
 80019de:	4a9a      	ldr	r2, [pc, #616]	; (8001c48 <verify_sensor_measurements+0x4b8>)
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	4413      	add	r3, r2
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	4998      	ldr	r1, [pc, #608]	; (8001c48 <verify_sensor_measurements+0x4b8>)
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	440b      	add	r3, r1
 80019ee:	601a      	str	r2, [r3, #0]
			window_back_sensor1[i] = window_back_sensor1[i + 1];
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	3301      	adds	r3, #1
 80019f4:	4a95      	ldr	r2, [pc, #596]	; (8001c4c <verify_sensor_measurements+0x4bc>)
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	4413      	add	r3, r2
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	4993      	ldr	r1, [pc, #588]	; (8001c4c <verify_sensor_measurements+0x4bc>)
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	440b      	add	r3, r1
 8001a04:	601a      	str	r2, [r3, #0]
			window_back_sensor2[i] = window_back_sensor2[i + 1];
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	4a91      	ldr	r2, [pc, #580]	; (8001c50 <verify_sensor_measurements+0x4c0>)
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	4413      	add	r3, r2
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	498f      	ldr	r1, [pc, #572]	; (8001c50 <verify_sensor_measurements+0x4c0>)
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	440b      	add	r3, r1
 8001a1a:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < WINDOW_SIZE - 1; i++) {
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	617b      	str	r3, [r7, #20]
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	ddcd      	ble.n	80019c4 <verify_sensor_measurements+0x234>
		}
		window_front_sensor1[2] = floorf(distance_front_sensor1 * 100) / 100;
 8001a28:	4b8a      	ldr	r3, [pc, #552]	; (8001c54 <verify_sensor_measurements+0x4c4>)
 8001a2a:	edd3 7a00 	vldr	s15, [r3]
 8001a2e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8001c58 <verify_sensor_measurements+0x4c8>
 8001a32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a36:	eeb0 0a67 	vmov.f32	s0, s15
 8001a3a:	f008 fac5 	bl	8009fc8 <floorf>
 8001a3e:	eeb0 7a40 	vmov.f32	s14, s0
 8001a42:	eddf 6a85 	vldr	s13, [pc, #532]	; 8001c58 <verify_sensor_measurements+0x4c8>
 8001a46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a4a:	4b7e      	ldr	r3, [pc, #504]	; (8001c44 <verify_sensor_measurements+0x4b4>)
 8001a4c:	edc3 7a02 	vstr	s15, [r3, #8]
		window_front_sensor2[2] = floorf(distance_front_sensor2 * 100) / 100;
 8001a50:	4b82      	ldr	r3, [pc, #520]	; (8001c5c <verify_sensor_measurements+0x4cc>)
 8001a52:	edd3 7a00 	vldr	s15, [r3]
 8001a56:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8001c58 <verify_sensor_measurements+0x4c8>
 8001a5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a5e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a62:	f008 fab1 	bl	8009fc8 <floorf>
 8001a66:	eeb0 7a40 	vmov.f32	s14, s0
 8001a6a:	eddf 6a7b 	vldr	s13, [pc, #492]	; 8001c58 <verify_sensor_measurements+0x4c8>
 8001a6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a72:	4b75      	ldr	r3, [pc, #468]	; (8001c48 <verify_sensor_measurements+0x4b8>)
 8001a74:	edc3 7a02 	vstr	s15, [r3, #8]
		window_back_sensor1[2] = floorf(distance_back_sensor1 * 100) / 100;
 8001a78:	4b79      	ldr	r3, [pc, #484]	; (8001c60 <verify_sensor_measurements+0x4d0>)
 8001a7a:	edd3 7a00 	vldr	s15, [r3]
 8001a7e:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8001c58 <verify_sensor_measurements+0x4c8>
 8001a82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a86:	eeb0 0a67 	vmov.f32	s0, s15
 8001a8a:	f008 fa9d 	bl	8009fc8 <floorf>
 8001a8e:	eeb0 7a40 	vmov.f32	s14, s0
 8001a92:	eddf 6a71 	vldr	s13, [pc, #452]	; 8001c58 <verify_sensor_measurements+0x4c8>
 8001a96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a9a:	4b6c      	ldr	r3, [pc, #432]	; (8001c4c <verify_sensor_measurements+0x4bc>)
 8001a9c:	edc3 7a02 	vstr	s15, [r3, #8]
		window_back_sensor2[2] = floorf(distance_back_sensor2 * 100) / 100;
 8001aa0:	4b70      	ldr	r3, [pc, #448]	; (8001c64 <verify_sensor_measurements+0x4d4>)
 8001aa2:	edd3 7a00 	vldr	s15, [r3]
 8001aa6:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8001c58 <verify_sensor_measurements+0x4c8>
 8001aaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aae:	eeb0 0a67 	vmov.f32	s0, s15
 8001ab2:	f008 fa89 	bl	8009fc8 <floorf>
 8001ab6:	eeb0 7a40 	vmov.f32	s14, s0
 8001aba:	eddf 6a67 	vldr	s13, [pc, #412]	; 8001c58 <verify_sensor_measurements+0x4c8>
 8001abe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ac2:	4b63      	ldr	r3, [pc, #396]	; (8001c50 <verify_sensor_measurements+0x4c0>)
 8001ac4:	edc3 7a02 	vstr	s15, [r3, #8]

		float median_front_sensor1 = calculate_median(window_front_sensor1);
 8001ac8:	485e      	ldr	r0, [pc, #376]	; (8001c44 <verify_sensor_measurements+0x4b4>)
 8001aca:	f000 f8dd 	bl	8001c88 <calculate_median>
 8001ace:	ed87 0a04 	vstr	s0, [r7, #16]
		float median_front_sensor2 = calculate_median(window_front_sensor2);
 8001ad2:	485d      	ldr	r0, [pc, #372]	; (8001c48 <verify_sensor_measurements+0x4b8>)
 8001ad4:	f000 f8d8 	bl	8001c88 <calculate_median>
 8001ad8:	ed87 0a03 	vstr	s0, [r7, #12]
		float median_back_sensor1 = calculate_median(window_back_sensor1);
 8001adc:	485b      	ldr	r0, [pc, #364]	; (8001c4c <verify_sensor_measurements+0x4bc>)
 8001ade:	f000 f8d3 	bl	8001c88 <calculate_median>
 8001ae2:	ed87 0a02 	vstr	s0, [r7, #8]
		float median_back_sensor2 = calculate_median(window_back_sensor2);
 8001ae6:	485a      	ldr	r0, [pc, #360]	; (8001c50 <verify_sensor_measurements+0x4c0>)
 8001ae8:	f000 f8ce 	bl	8001c88 <calculate_median>
 8001aec:	ed87 0a01 	vstr	s0, [r7, #4]

		if(fabs(window_front_sensor1[2] - median_front_sensor1) > THRESHOLD){
 8001af0:	4b54      	ldr	r3, [pc, #336]	; (8001c44 <verify_sensor_measurements+0x4b4>)
 8001af2:	ed93 7a02 	vldr	s14, [r3, #8]
 8001af6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001afa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001afe:	eef0 7ae7 	vabs.f32	s15, s15
 8001b02:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001b06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b0e:	dd0c      	ble.n	8001b2a <verify_sensor_measurements+0x39a>

			front_sensor1_strikes +=1;
 8001b10:	4b55      	ldr	r3, [pc, #340]	; (8001c68 <verify_sensor_measurements+0x4d8>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	3301      	adds	r3, #1
 8001b16:	b2da      	uxtb	r2, r3
 8001b18:	4b53      	ldr	r3, [pc, #332]	; (8001c68 <verify_sensor_measurements+0x4d8>)
 8001b1a:	701a      	strb	r2, [r3, #0]
			window_front_sensor1[2] = median_front_sensor1;
 8001b1c:	4a49      	ldr	r2, [pc, #292]	; (8001c44 <verify_sensor_measurements+0x4b4>)
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	6093      	str	r3, [r2, #8]
			distance_front_sensor1 = median_front_sensor1;
 8001b22:	4a4c      	ldr	r2, [pc, #304]	; (8001c54 <verify_sensor_measurements+0x4c4>)
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	6013      	str	r3, [r2, #0]
 8001b28:	e002      	b.n	8001b30 <verify_sensor_measurements+0x3a0>
		}
		else{
			front_sensor1_strikes = 0;
 8001b2a:	4b4f      	ldr	r3, [pc, #316]	; (8001c68 <verify_sensor_measurements+0x4d8>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	701a      	strb	r2, [r3, #0]
		}

		if(fabs(window_front_sensor2[2] - median_front_sensor2) > THRESHOLD){
 8001b30:	4b45      	ldr	r3, [pc, #276]	; (8001c48 <verify_sensor_measurements+0x4b8>)
 8001b32:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b36:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b3e:	eef0 7ae7 	vabs.f32	s15, s15
 8001b42:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001b46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b4e:	dd0c      	ble.n	8001b6a <verify_sensor_measurements+0x3da>

			front_sensor2_strikes +=1;
 8001b50:	4b46      	ldr	r3, [pc, #280]	; (8001c6c <verify_sensor_measurements+0x4dc>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	3301      	adds	r3, #1
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	4b44      	ldr	r3, [pc, #272]	; (8001c6c <verify_sensor_measurements+0x4dc>)
 8001b5a:	701a      	strb	r2, [r3, #0]
			window_front_sensor2[2] = median_front_sensor2;
 8001b5c:	4a3a      	ldr	r2, [pc, #232]	; (8001c48 <verify_sensor_measurements+0x4b8>)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6093      	str	r3, [r2, #8]
			distance_front_sensor2 = median_front_sensor2;
 8001b62:	4a3e      	ldr	r2, [pc, #248]	; (8001c5c <verify_sensor_measurements+0x4cc>)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6013      	str	r3, [r2, #0]
 8001b68:	e002      	b.n	8001b70 <verify_sensor_measurements+0x3e0>
		}
		else{
			front_sensor2_strikes = 0;
 8001b6a:	4b40      	ldr	r3, [pc, #256]	; (8001c6c <verify_sensor_measurements+0x4dc>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	701a      	strb	r2, [r3, #0]
		}

		if(fabs(window_back_sensor1[2] - median_back_sensor1) > THRESHOLD){
 8001b70:	4b36      	ldr	r3, [pc, #216]	; (8001c4c <verify_sensor_measurements+0x4bc>)
 8001b72:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b76:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b7e:	eef0 7ae7 	vabs.f32	s15, s15
 8001b82:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001b86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b8e:	dd0c      	ble.n	8001baa <verify_sensor_measurements+0x41a>

			back_sensor1_strikes +=1;
 8001b90:	4b37      	ldr	r3, [pc, #220]	; (8001c70 <verify_sensor_measurements+0x4e0>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	3301      	adds	r3, #1
 8001b96:	b2da      	uxtb	r2, r3
 8001b98:	4b35      	ldr	r3, [pc, #212]	; (8001c70 <verify_sensor_measurements+0x4e0>)
 8001b9a:	701a      	strb	r2, [r3, #0]
			window_back_sensor1[2] = median_back_sensor1;
 8001b9c:	4a2b      	ldr	r2, [pc, #172]	; (8001c4c <verify_sensor_measurements+0x4bc>)
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	6093      	str	r3, [r2, #8]
			distance_back_sensor1 = median_back_sensor1;
 8001ba2:	4a2f      	ldr	r2, [pc, #188]	; (8001c60 <verify_sensor_measurements+0x4d0>)
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	6013      	str	r3, [r2, #0]
 8001ba8:	e002      	b.n	8001bb0 <verify_sensor_measurements+0x420>
		}
		else{
			back_sensor1_strikes = 0;
 8001baa:	4b31      	ldr	r3, [pc, #196]	; (8001c70 <verify_sensor_measurements+0x4e0>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	701a      	strb	r2, [r3, #0]
		}

		if(fabs(window_back_sensor2[2] - median_back_sensor2) > THRESHOLD){
 8001bb0:	4b27      	ldr	r3, [pc, #156]	; (8001c50 <verify_sensor_measurements+0x4c0>)
 8001bb2:	ed93 7a02 	vldr	s14, [r3, #8]
 8001bb6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bbe:	eef0 7ae7 	vabs.f32	s15, s15
 8001bc2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001bc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bce:	dd0c      	ble.n	8001bea <verify_sensor_measurements+0x45a>

			back_sensor2_strikes +=1;
 8001bd0:	4b28      	ldr	r3, [pc, #160]	; (8001c74 <verify_sensor_measurements+0x4e4>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	4b26      	ldr	r3, [pc, #152]	; (8001c74 <verify_sensor_measurements+0x4e4>)
 8001bda:	701a      	strb	r2, [r3, #0]
			window_back_sensor2[2] = median_back_sensor2;
 8001bdc:	4a1c      	ldr	r2, [pc, #112]	; (8001c50 <verify_sensor_measurements+0x4c0>)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6093      	str	r3, [r2, #8]
			distance_back_sensor2 = median_back_sensor2;
 8001be2:	4a20      	ldr	r2, [pc, #128]	; (8001c64 <verify_sensor_measurements+0x4d4>)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6013      	str	r3, [r2, #0]
 8001be8:	e002      	b.n	8001bf0 <verify_sensor_measurements+0x460>
		}
		else{
			back_sensor2_strikes = 0;
 8001bea:	4b22      	ldr	r3, [pc, #136]	; (8001c74 <verify_sensor_measurements+0x4e4>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	701a      	strb	r2, [r3, #0]
		}


		is_front_sensor1_operative =
				front_sensor1_strikes < STRIKE_LIMIT ? true : false;
 8001bf0:	4b1d      	ldr	r3, [pc, #116]	; (8001c68 <verify_sensor_measurements+0x4d8>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	bf94      	ite	ls
 8001bf8:	2301      	movls	r3, #1
 8001bfa:	2300      	movhi	r3, #0
 8001bfc:	b2da      	uxtb	r2, r3
		is_front_sensor1_operative =
 8001bfe:	4b1e      	ldr	r3, [pc, #120]	; (8001c78 <verify_sensor_measurements+0x4e8>)
 8001c00:	701a      	strb	r2, [r3, #0]
		is_front_sensor2_operative =
				front_sensor2_strikes < STRIKE_LIMIT ? true : false;
 8001c02:	4b1a      	ldr	r3, [pc, #104]	; (8001c6c <verify_sensor_measurements+0x4dc>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	bf94      	ite	ls
 8001c0a:	2301      	movls	r3, #1
 8001c0c:	2300      	movhi	r3, #0
 8001c0e:	b2da      	uxtb	r2, r3
		is_front_sensor2_operative =
 8001c10:	4b1a      	ldr	r3, [pc, #104]	; (8001c7c <verify_sensor_measurements+0x4ec>)
 8001c12:	701a      	strb	r2, [r3, #0]
		is_back_sensor1_operative =
				back_sensor1_strikes < STRIKE_LIMIT ? true : false;
 8001c14:	4b16      	ldr	r3, [pc, #88]	; (8001c70 <verify_sensor_measurements+0x4e0>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	bf94      	ite	ls
 8001c1c:	2301      	movls	r3, #1
 8001c1e:	2300      	movhi	r3, #0
 8001c20:	b2da      	uxtb	r2, r3
		is_back_sensor1_operative =
 8001c22:	4b17      	ldr	r3, [pc, #92]	; (8001c80 <verify_sensor_measurements+0x4f0>)
 8001c24:	701a      	strb	r2, [r3, #0]
		is_back_sensor2_operative =
				back_sensor2_strikes < STRIKE_LIMIT ? true : false;
 8001c26:	4b13      	ldr	r3, [pc, #76]	; (8001c74 <verify_sensor_measurements+0x4e4>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	bf94      	ite	ls
 8001c2e:	2301      	movls	r3, #1
 8001c30:	2300      	movhi	r3, #0
 8001c32:	b2da      	uxtb	r2, r3
		is_back_sensor2_operative =
 8001c34:	4b13      	ldr	r3, [pc, #76]	; (8001c84 <verify_sensor_measurements+0x4f4>)
 8001c36:	701a      	strb	r2, [r3, #0]

		break;
 8001c38:	bf00      	nop
	}
}
 8001c3a:	bf00      	nop
 8001c3c:	3718      	adds	r7, #24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20000390 	.word	0x20000390
 8001c48:	200003b4 	.word	0x200003b4
 8001c4c:	200003d8 	.word	0x200003d8
 8001c50:	200003fc 	.word	0x200003fc
 8001c54:	2000038c 	.word	0x2000038c
 8001c58:	42c80000 	.word	0x42c80000
 8001c5c:	200003b0 	.word	0x200003b0
 8001c60:	200003d4 	.word	0x200003d4
 8001c64:	200003f8 	.word	0x200003f8
 8001c68:	2000039c 	.word	0x2000039c
 8001c6c:	200003c0 	.word	0x200003c0
 8001c70:	200003e4 	.word	0x200003e4
 8001c74:	20000408 	.word	0x20000408
 8001c78:	20000000 	.word	0x20000000
 8001c7c:	20000001 	.word	0x20000001
 8001c80:	20000002 	.word	0x20000002
 8001c84:	20000003 	.word	0x20000003

08001c88 <calculate_median>:
/**
 * @brief Calculates the median of an unsorted array using the Quick Select algorithm for performance boost.
 * @param[in] data_points An array of a given WINDOW_SIZE containing the previous and new measured values.
 * @retval ans The calculated median.
 */
float calculate_median(float *data_points) {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b088      	sub	sp, #32
 8001c8c:	af02      	add	r7, sp, #8
 8001c8e:	6078      	str	r0, [r7, #4]
	int ans = 0;
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]
	int a = -1;
 8001c94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c98:	60fb      	str	r3, [r7, #12]
	int b = -1;
 8001c9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c9e:	60bb      	str	r3, [r7, #8]
	int n = WINDOW_SIZE;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	613b      	str	r3, [r7, #16]

	// If n is odd
	if (n % 2 == 1) {
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	bfb8      	it	lt
 8001cae:	425b      	neglt	r3, r3
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d115      	bne.n	8001ce0 <calculate_median+0x58>
		median_util(data_points, 0, n - 1, n / 2, &a, &b);
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	1e59      	subs	r1, r3, #1
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	0fda      	lsrs	r2, r3, #31
 8001cbc:	4413      	add	r3, r2
 8001cbe:	105b      	asrs	r3, r3, #1
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	f107 0308 	add.w	r3, r7, #8
 8001cc6:	9301      	str	r3, [sp, #4]
 8001cc8:	f107 030c 	add.w	r3, r7, #12
 8001ccc:	9300      	str	r3, [sp, #0]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	460a      	mov	r2, r1
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 f827 	bl	8001d28 <median_util>
		ans = b;
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	617b      	str	r3, [r7, #20]
 8001cde:	e019      	b.n	8001d14 <calculate_median+0x8c>
	}
	// If n is even
	else {
		median_util(data_points, 0, n - 1, n / 2, &a, &b);
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1e59      	subs	r1, r3, #1
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	0fda      	lsrs	r2, r3, #31
 8001ce8:	4413      	add	r3, r2
 8001cea:	105b      	asrs	r3, r3, #1
 8001cec:	461a      	mov	r2, r3
 8001cee:	f107 0308 	add.w	r3, r7, #8
 8001cf2:	9301      	str	r3, [sp, #4]
 8001cf4:	f107 030c 	add.w	r3, r7, #12
 8001cf8:	9300      	str	r3, [sp, #0]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	460a      	mov	r2, r1
 8001cfe:	2100      	movs	r1, #0
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 f811 	bl	8001d28 <median_util>
		ans = (a + b) / 2;
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	0fda      	lsrs	r2, r3, #31
 8001d0e:	4413      	add	r3, r2
 8001d10:	105b      	asrs	r3, r3, #1
 8001d12:	617b      	str	r3, [r7, #20]
	}

	return ans;
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	ee07 3a90 	vmov	s15, r3
 8001d1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001d1e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d22:	3718      	adds	r7, #24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <median_util>:
 * @param[in] k Index of the median if list/array were to be sorted.
 * @param[in] a Helper value to get final result.
 * @param[in] b Helper value to get final result.
 * @retval None
 */
void median_util(float *arr, int l, int r, int k, int *a, int *b) {
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b088      	sub	sp, #32
 8001d2c:	af02      	add	r7, sp, #8
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
 8001d34:	603b      	str	r3, [r7, #0]

	// if l < r
	if (l <= r) {
 8001d36:	68ba      	ldr	r2, [r7, #8]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	dc4d      	bgt.n	8001dda <median_util+0xb2>

		// Find the partition index
		int partitionIndex = random_partition(arr, l, r);
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	68b9      	ldr	r1, [r7, #8]
 8001d42:	68f8      	ldr	r0, [r7, #12]
 8001d44:	f000 f84f 	bl	8001de6 <random_partition>
 8001d48:	6178      	str	r0, [r7, #20]

		// If partition index = k, then
		// we found the median of odd
		// number element in arr[]
		if (partitionIndex == k) {
 8001d4a:	697a      	ldr	r2, [r7, #20]
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d111      	bne.n	8001d76 <median_util+0x4e>
			*b = arr[partitionIndex];
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	4413      	add	r3, r2
 8001d5a:	edd3 7a00 	vldr	s15, [r3]
 8001d5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d62:	ee17 2a90 	vmov	r2, s15
 8001d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d68:	601a      	str	r2, [r3, #0]
			if (*a != -1)
 8001d6a:	6a3b      	ldr	r3, [r7, #32]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d72:	d016      	beq.n	8001da2 <median_util+0x7a>
				return;
 8001d74:	e034      	b.n	8001de0 <median_util+0xb8>
		}

		// If index = k - 1, then we get
		// a & b as middle element of
		// arr[]
		else if (partitionIndex == k - 1) {
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	697a      	ldr	r2, [r7, #20]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d110      	bne.n	8001da2 <median_util+0x7a>
			*a = arr[partitionIndex];
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	4413      	add	r3, r2
 8001d88:	edd3 7a00 	vldr	s15, [r3]
 8001d8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d90:	ee17 2a90 	vmov	r2, s15
 8001d94:	6a3b      	ldr	r3, [r7, #32]
 8001d96:	601a      	str	r2, [r3, #0]
			if (*b != -1)
 8001d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001da0:	d11d      	bne.n	8001dde <median_util+0xb6>
		}

		// If partitionIndex >= k then
		// find the index in first half
		// of the arr[]
		if (partitionIndex >= k)
 8001da2:	697a      	ldr	r2, [r7, #20]
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	db0b      	blt.n	8001dc2 <median_util+0x9a>
			return median_util(arr, l, partitionIndex - 1, k, a, b);
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	1e5a      	subs	r2, r3, #1
 8001dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db0:	9301      	str	r3, [sp, #4]
 8001db2:	6a3b      	ldr	r3, [r7, #32]
 8001db4:	9300      	str	r3, [sp, #0]
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	68b9      	ldr	r1, [r7, #8]
 8001dba:	68f8      	ldr	r0, [r7, #12]
 8001dbc:	f7ff ffb4 	bl	8001d28 <median_util>
 8001dc0:	e00e      	b.n	8001de0 <median_util+0xb8>

		// If partitionIndex <= k then
		// find the index in second half
		// of the arr[]
		else
			return median_util(arr, partitionIndex + 1, r, k, a, b);
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	1c59      	adds	r1, r3, #1
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc8:	9301      	str	r3, [sp, #4]
 8001dca:	6a3b      	ldr	r3, [r7, #32]
 8001dcc:	9300      	str	r3, [sp, #0]
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	f7ff ffa8 	bl	8001d28 <median_util>
 8001dd8:	e002      	b.n	8001de0 <median_util+0xb8>
	}

	return;
 8001dda:	bf00      	nop
 8001ddc:	e000      	b.n	8001de0 <median_util+0xb8>
				return;
 8001dde:	bf00      	nop
}
 8001de0:	3718      	adds	r7, #24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <random_partition>:
 * @param[in] arr An array of a given WINDOW_SIZE containing the previous and new measured values.
 * @param[in] l
 * @param[in] r
 * @retval p Correct position of pivot element.
 */
int random_partition(float *arr, int l, int r) {
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b088      	sub	sp, #32
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	60f8      	str	r0, [r7, #12]
 8001dee:	60b9      	str	r1, [r7, #8]
 8001df0:	607a      	str	r2, [r7, #4]

	int n = r - l + 1;
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	3301      	adds	r3, #1
 8001dfa:	61fb      	str	r3, [r7, #28]
	int pivot = rand() % n;
 8001dfc:	f004 faac 	bl	8006358 <rand>
 8001e00:	4603      	mov	r3, r0
 8001e02:	69fa      	ldr	r2, [r7, #28]
 8001e04:	fb93 f2f2 	sdiv	r2, r3, r2
 8001e08:	69f9      	ldr	r1, [r7, #28]
 8001e0a:	fb01 f202 	mul.w	r2, r1, r2
 8001e0e:	1a9b      	subs	r3, r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
	swap(&arr[l + pivot], &arr[r]);
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	4413      	add	r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	18d0      	adds	r0, r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	4413      	add	r3, r2
 8001e26:	4619      	mov	r1, r3
 8001e28:	f000 f84e 	bl	8001ec8 <swap>
	int p = partition(arr, l, r);
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	68b9      	ldr	r1, [r7, #8]
 8001e30:	68f8      	ldr	r0, [r7, #12]
 8001e32:	f000 f806 	bl	8001e42 <partition>
 8001e36:	6178      	str	r0, [r7, #20]

	return p;
 8001e38:	697b      	ldr	r3, [r7, #20]
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3720      	adds	r7, #32
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <partition>:
 * @param[in] arr An array of a given WINDOW_SIZE containing the previous and new measured values.
 * @param[in] l Index of the left most value.
 * @param[in] r Index of the right most value.
 * @retval i Correct position of pivot element.
 */
int partition(float *arr, int l, int r) {
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b088      	sub	sp, #32
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	60f8      	str	r0, [r7, #12]
 8001e4a:	60b9      	str	r1, [r7, #8]
 8001e4c:	607a      	str	r2, [r7, #4]

	float lst = arr[r];
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	4413      	add	r3, r2
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	617b      	str	r3, [r7, #20]
	int i = l;
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	61fb      	str	r3, [r7, #28]
	int j = l;
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	61bb      	str	r3, [r7, #24]
	while (j < r) {
 8001e62:	e01d      	b.n	8001ea0 <partition+0x5e>
		if (arr[j] < lst) {
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	edd3 7a00 	vldr	s15, [r3]
 8001e70:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e7c:	dd0d      	ble.n	8001e9a <partition+0x58>
			swap(&arr[i], &arr[j]);
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	18d0      	adds	r0, r2, r3
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	4619      	mov	r1, r3
 8001e90:	f000 f81a 	bl	8001ec8 <swap>
			i++;
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	3301      	adds	r3, #1
 8001e98:	61fb      	str	r3, [r7, #28]
		}
		j++;
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	61bb      	str	r3, [r7, #24]
	while (j < r) {
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	dbdd      	blt.n	8001e64 <partition+0x22>
	}
	swap(&arr[i], &arr[r]);
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	18d0      	adds	r0, r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	4619      	mov	r1, r3
 8001eba:	f000 f805 	bl	8001ec8 <swap>
	return i;
 8001ebe:	69fb      	ldr	r3, [r7, #28]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3720      	adds	r7, #32
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <swap>:
 * @brief Swapping elements.
 * @param[in] a Element to be swapped.
 * @param[in] b Element to be swapped.
 * @retval None.
 */
void swap(float *a, float *b) {
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]

	float temp = *a;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	60fb      	str	r3, [r7, #12]
	*a = *b;
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	601a      	str	r2, [r3, #0]
	*b = temp;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	601a      	str	r2, [r3, #0]
}
 8001ee6:	bf00      	nop
 8001ee8:	3714      	adds	r7, #20
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
	...

08001ef4 <check_sensor_measurements>:
/**
 * @brief Checks sensors states and and assigns final distance values through cross checking.
 * @param None
 * @retval None.
 */
void check_sensor_measurements() {
 8001ef4:	b5b0      	push	{r4, r5, r7, lr}
 8001ef6:	b090      	sub	sp, #64	; 0x40
 8001ef8:	af00      	add	r7, sp, #0

	bool isContinue = false;
 8001efa:	2300      	movs	r3, #0
 8001efc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	// Both sensors operational
	if (is_front_sensor1_operative == true && is_front_sensor2_operative == true) {
 8001f00:	4b5e      	ldr	r3, [pc, #376]	; (800207c <check_sensor_measurements+0x188>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d016      	beq.n	8001f36 <check_sensor_measurements+0x42>
 8001f08:	4b5d      	ldr	r3, [pc, #372]	; (8002080 <check_sensor_measurements+0x18c>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d012      	beq.n	8001f36 <check_sensor_measurements+0x42>
		final_front_distance = (distance_front_sensor1 + distance_front_sensor2)
 8001f10:	4b5c      	ldr	r3, [pc, #368]	; (8002084 <check_sensor_measurements+0x190>)
 8001f12:	ed93 7a00 	vldr	s14, [r3]
 8001f16:	4b5c      	ldr	r3, [pc, #368]	; (8002088 <check_sensor_measurements+0x194>)
 8001f18:	edd3 7a00 	vldr	s15, [r3]
 8001f1c:	ee37 7a27 	vadd.f32	s14, s14, s15
				/ 2.0;
 8001f20:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001f24:	eec7 7a26 	vdiv.f32	s15, s14, s13
		final_front_distance = (distance_front_sensor1 + distance_front_sensor2)
 8001f28:	4b58      	ldr	r3, [pc, #352]	; (800208c <check_sensor_measurements+0x198>)
 8001f2a:	edc3 7a00 	vstr	s15, [r3]
		isContinue = true;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001f34:	e03f      	b.n	8001fb6 <check_sensor_measurements+0xc2>
	}
	// One sensor faulty
	else if (is_front_sensor1_operative == false
 8001f36:	4b51      	ldr	r3, [pc, #324]	; (800207c <check_sensor_measurements+0x188>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	f083 0301 	eor.w	r3, r3, #1
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d00b      	beq.n	8001f5c <check_sensor_measurements+0x68>
			&& is_front_sensor2_operative == true) {
 8001f44:	4b4e      	ldr	r3, [pc, #312]	; (8002080 <check_sensor_measurements+0x18c>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d007      	beq.n	8001f5c <check_sensor_measurements+0x68>
		final_front_distance = distance_front_sensor2;
 8001f4c:	4b4e      	ldr	r3, [pc, #312]	; (8002088 <check_sensor_measurements+0x194>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a4e      	ldr	r2, [pc, #312]	; (800208c <check_sensor_measurements+0x198>)
 8001f52:	6013      	str	r3, [r2, #0]
		isContinue = true;
 8001f54:	2301      	movs	r3, #1
 8001f56:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001f5a:	e02c      	b.n	8001fb6 <check_sensor_measurements+0xc2>
	} else if (is_front_sensor1_operative == true
 8001f5c:	4b47      	ldr	r3, [pc, #284]	; (800207c <check_sensor_measurements+0x188>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d00e      	beq.n	8001f82 <check_sensor_measurements+0x8e>
			&& is_front_sensor2_operative == false) {
 8001f64:	4b46      	ldr	r3, [pc, #280]	; (8002080 <check_sensor_measurements+0x18c>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	f083 0301 	eor.w	r3, r3, #1
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d007      	beq.n	8001f82 <check_sensor_measurements+0x8e>
		final_front_distance = distance_front_sensor1;
 8001f72:	4b44      	ldr	r3, [pc, #272]	; (8002084 <check_sensor_measurements+0x190>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a45      	ldr	r2, [pc, #276]	; (800208c <check_sensor_measurements+0x198>)
 8001f78:	6013      	str	r3, [r2, #0]
		isContinue = true;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001f80:	e019      	b.n	8001fb6 <check_sensor_measurements+0xc2>
	}
	// Both sensors faulty
	else {
		char txt[] =
 8001f82:	4b43      	ldr	r3, [pc, #268]	; (8002090 <check_sensor_measurements+0x19c>)
 8001f84:	1d3c      	adds	r4, r7, #4
 8001f86:	461d      	mov	r5, r3
 8001f88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f94:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001f98:	e884 0003 	stmia.w	r4, {r0, r1}
				"Both front sensors failed!\n\rEntering Safe-State-Mode!\n\r";
		HAL_UART_Transmit(&huart2, (const uint8_t*) txt, strlen(txt), 100);
 8001f9c:	1d3b      	adds	r3, r7, #4
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe f936 	bl	8000210 <strlen>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	1d39      	adds	r1, r7, #4
 8001faa:	2364      	movs	r3, #100	; 0x64
 8001fac:	4839      	ldr	r0, [pc, #228]	; (8002094 <check_sensor_measurements+0x1a0>)
 8001fae:	f002 ffb2 	bl	8004f16 <HAL_UART_Transmit>
		turn_vehicle_off();
 8001fb2:	f000 f9cb 	bl	800234c <turn_vehicle_off>
	}

	// Both sensors operational
	if (is_back_sensor1_operative == true && is_back_sensor2_operative == true) {
 8001fb6:	4b38      	ldr	r3, [pc, #224]	; (8002098 <check_sensor_measurements+0x1a4>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d016      	beq.n	8001fec <check_sensor_measurements+0xf8>
 8001fbe:	4b37      	ldr	r3, [pc, #220]	; (800209c <check_sensor_measurements+0x1a8>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d012      	beq.n	8001fec <check_sensor_measurements+0xf8>
		final_back_distance = (distance_back_sensor1 + distance_back_sensor2)
 8001fc6:	4b36      	ldr	r3, [pc, #216]	; (80020a0 <check_sensor_measurements+0x1ac>)
 8001fc8:	ed93 7a00 	vldr	s14, [r3]
 8001fcc:	4b35      	ldr	r3, [pc, #212]	; (80020a4 <check_sensor_measurements+0x1b0>)
 8001fce:	edd3 7a00 	vldr	s15, [r3]
 8001fd2:	ee37 7a27 	vadd.f32	s14, s14, s15
				/ 2.0;
 8001fd6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001fda:	eec7 7a26 	vdiv.f32	s15, s14, s13
		final_back_distance = (distance_back_sensor1 + distance_back_sensor2)
 8001fde:	4b32      	ldr	r3, [pc, #200]	; (80020a8 <check_sensor_measurements+0x1b4>)
 8001fe0:	edc3 7a00 	vstr	s15, [r3]
		isContinue = true;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001fea:	e03d      	b.n	8002068 <check_sensor_measurements+0x174>

	}
	// One sensor faulty
	else if (is_back_sensor1_operative == false
 8001fec:	4b2a      	ldr	r3, [pc, #168]	; (8002098 <check_sensor_measurements+0x1a4>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	f083 0301 	eor.w	r3, r3, #1
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00b      	beq.n	8002012 <check_sensor_measurements+0x11e>
			&& is_back_sensor2_operative == true) {
 8001ffa:	4b28      	ldr	r3, [pc, #160]	; (800209c <check_sensor_measurements+0x1a8>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d007      	beq.n	8002012 <check_sensor_measurements+0x11e>
		final_back_distance = distance_back_sensor2;
 8002002:	4b28      	ldr	r3, [pc, #160]	; (80020a4 <check_sensor_measurements+0x1b0>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a28      	ldr	r2, [pc, #160]	; (80020a8 <check_sensor_measurements+0x1b4>)
 8002008:	6013      	str	r3, [r2, #0]
		isContinue = true;
 800200a:	2301      	movs	r3, #1
 800200c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002010:	e02a      	b.n	8002068 <check_sensor_measurements+0x174>
	} else if (is_back_sensor1_operative == true
 8002012:	4b21      	ldr	r3, [pc, #132]	; (8002098 <check_sensor_measurements+0x1a4>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00e      	beq.n	8002038 <check_sensor_measurements+0x144>
			&& is_back_sensor2_operative == false) {
 800201a:	4b20      	ldr	r3, [pc, #128]	; (800209c <check_sensor_measurements+0x1a8>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	f083 0301 	eor.w	r3, r3, #1
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b00      	cmp	r3, #0
 8002026:	d007      	beq.n	8002038 <check_sensor_measurements+0x144>
		final_back_distance = distance_back_sensor1;
 8002028:	4b1d      	ldr	r3, [pc, #116]	; (80020a0 <check_sensor_measurements+0x1ac>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a1e      	ldr	r2, [pc, #120]	; (80020a8 <check_sensor_measurements+0x1b4>)
 800202e:	6013      	str	r3, [r2, #0]
		isContinue = true;
 8002030:	2301      	movs	r3, #1
 8002032:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002036:	e017      	b.n	8002068 <check_sensor_measurements+0x174>
	}
	// Both sensors faulty
	else {
		char txt[] = "Both back sensors failed!\n\rGoing into Safe-State!\n\r";
 8002038:	4b1c      	ldr	r3, [pc, #112]	; (80020ac <check_sensor_measurements+0x1b8>)
 800203a:	1d3c      	adds	r4, r7, #4
 800203c:	461d      	mov	r5, r3
 800203e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002040:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002042:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002044:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002046:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002048:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800204a:	682b      	ldr	r3, [r5, #0]
 800204c:	6023      	str	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, (const uint8_t*) txt, strlen(txt), 100);
 800204e:	1d3b      	adds	r3, r7, #4
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe f8dd 	bl	8000210 <strlen>
 8002056:	4603      	mov	r3, r0
 8002058:	b29a      	uxth	r2, r3
 800205a:	1d39      	adds	r1, r7, #4
 800205c:	2364      	movs	r3, #100	; 0x64
 800205e:	480d      	ldr	r0, [pc, #52]	; (8002094 <check_sensor_measurements+0x1a0>)
 8002060:	f002 ff59 	bl	8004f16 <HAL_UART_Transmit>
		turn_vehicle_off();
 8002064:	f000 f972 	bl	800234c <turn_vehicle_off>
	}

	if (isContinue == true) {
 8002068:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <check_sensor_measurements+0x180>
		check_distance_status();
 8002070:	f000 f81e 	bl	80020b0 <check_distance_status>
	}
}
 8002074:	bf00      	nop
 8002076:	3740      	adds	r7, #64	; 0x40
 8002078:	46bd      	mov	sp, r7
 800207a:	bdb0      	pop	{r4, r5, r7, pc}
 800207c:	20000000 	.word	0x20000000
 8002080:	20000001 	.word	0x20000001
 8002084:	2000038c 	.word	0x2000038c
 8002088:	200003b0 	.word	0x200003b0
 800208c:	20000374 	.word	0x20000374
 8002090:	0800a0e0 	.word	0x0800a0e0
 8002094:	20000320 	.word	0x20000320
 8002098:	20000002 	.word	0x20000002
 800209c:	20000003 	.word	0x20000003
 80020a0:	200003d4 	.word	0x200003d4
 80020a4:	200003f8 	.word	0x200003f8
 80020a8:	20000378 	.word	0x20000378
 80020ac:	0800a118 	.word	0x0800a118

080020b0 <check_distance_status>:
/**
 * @brief Checks if distances abide by specifications to detect if objects are to close.
 * @param None
 * @retval None.
 */
void check_distance_status() {
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b08e      	sub	sp, #56	; 0x38
 80020b4:	af00      	add	r7, sp, #0

	char buffer_front[26]; // buffer to store the string
	char buffer_back[25]; // buffer to store the string

	sprintf(buffer_front, "Front distance: %.2f cm\n\r", final_front_distance);
 80020b6:	4b56      	ldr	r3, [pc, #344]	; (8002210 <check_distance_status+0x160>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7fe fa64 	bl	8000588 <__aeabi_f2d>
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	f107 001c 	add.w	r0, r7, #28
 80020c8:	4952      	ldr	r1, [pc, #328]	; (8002214 <check_distance_status+0x164>)
 80020ca:	f004 f989 	bl	80063e0 <siprintf>
	sprintf(buffer_back, "Back distance: %.2f cm\n\r", final_back_distance);
 80020ce:	4b52      	ldr	r3, [pc, #328]	; (8002218 <check_distance_status+0x168>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7fe fa58 	bl	8000588 <__aeabi_f2d>
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
 80020dc:	4638      	mov	r0, r7
 80020de:	494f      	ldr	r1, [pc, #316]	; (800221c <check_distance_status+0x16c>)
 80020e0:	f004 f97e 	bl	80063e0 <siprintf>

	if (final_front_distance < 5.0 || final_back_distance < 5) {
 80020e4:	4b4a      	ldr	r3, [pc, #296]	; (8002210 <check_distance_status+0x160>)
 80020e6:	edd3 7a00 	vldr	s15, [r3]
 80020ea:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80020ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020f6:	d409      	bmi.n	800210c <check_distance_status+0x5c>
 80020f8:	4b47      	ldr	r3, [pc, #284]	; (8002218 <check_distance_status+0x168>)
 80020fa:	edd3 7a00 	vldr	s15, [r3]
 80020fe:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002102:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800210a:	d539      	bpl.n	8002180 <check_distance_status+0xd0>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800210c:	2200      	movs	r2, #0
 800210e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002112:	4843      	ldr	r0, [pc, #268]	; (8002220 <check_distance_status+0x170>)
 8002114:	f001 fa90 	bl	8003638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002118:	2201      	movs	r2, #1
 800211a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800211e:	4841      	ldr	r0, [pc, #260]	; (8002224 <check_distance_status+0x174>)
 8002120:	f001 fa8a 	bl	8003638 <HAL_GPIO_WritePin>

		if (oneSec > 1000) {
 8002124:	4b40      	ldr	r3, [pc, #256]	; (8002228 <check_distance_status+0x178>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800212c:	d91a      	bls.n	8002164 <check_distance_status+0xb4>
			HAL_UART_Transmit(&huart2, (const uint8_t*) buffer_front,
					strlen(buffer_front), 100);
 800212e:	f107 031c 	add.w	r3, r7, #28
 8002132:	4618      	mov	r0, r3
 8002134:	f7fe f86c 	bl	8000210 <strlen>
 8002138:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart2, (const uint8_t*) buffer_front,
 800213a:	b29a      	uxth	r2, r3
 800213c:	f107 011c 	add.w	r1, r7, #28
 8002140:	2364      	movs	r3, #100	; 0x64
 8002142:	483a      	ldr	r0, [pc, #232]	; (800222c <check_distance_status+0x17c>)
 8002144:	f002 fee7 	bl	8004f16 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (const uint8_t*) buffer_back,
					strlen(buffer_back), 100);
 8002148:	463b      	mov	r3, r7
 800214a:	4618      	mov	r0, r3
 800214c:	f7fe f860 	bl	8000210 <strlen>
 8002150:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart2, (const uint8_t*) buffer_back,
 8002152:	b29a      	uxth	r2, r3
 8002154:	4639      	mov	r1, r7
 8002156:	2364      	movs	r3, #100	; 0x64
 8002158:	4834      	ldr	r0, [pc, #208]	; (800222c <check_distance_status+0x17c>)
 800215a:	f002 fedc 	bl	8004f16 <HAL_UART_Transmit>
			oneSec = 0;
 800215e:	4b32      	ldr	r3, [pc, #200]	; (8002228 <check_distance_status+0x178>)
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
		}
		oneSec += 20;
 8002164:	4b30      	ldr	r3, [pc, #192]	; (8002228 <check_distance_status+0x178>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	3314      	adds	r3, #20
 800216a:	4a2f      	ldr	r2, [pc, #188]	; (8002228 <check_distance_status+0x178>)
 800216c:	6013      	str	r3, [r2, #0]
		twoSec += 20;
 800216e:	4b30      	ldr	r3, [pc, #192]	; (8002230 <check_distance_status+0x180>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	3314      	adds	r3, #20
 8002174:	4a2e      	ldr	r2, [pc, #184]	; (8002230 <check_distance_status+0x180>)
 8002176:	6013      	str	r3, [r2, #0]
		HAL_Delay(20);
 8002178:	2014      	movs	r0, #20
 800217a:	f000 ff7b 	bl	8003074 <HAL_Delay>
 800217e:	e038      	b.n	80021f2 <check_distance_status+0x142>
	} else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8002180:	2201      	movs	r2, #1
 8002182:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002186:	4826      	ldr	r0, [pc, #152]	; (8002220 <check_distance_status+0x170>)
 8002188:	f001 fa56 	bl	8003638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800218c:	2200      	movs	r2, #0
 800218e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002192:	4824      	ldr	r0, [pc, #144]	; (8002224 <check_distance_status+0x174>)
 8002194:	f001 fa50 	bl	8003638 <HAL_GPIO_WritePin>

		if (oneSec > 1000) {
 8002198:	4b23      	ldr	r3, [pc, #140]	; (8002228 <check_distance_status+0x178>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021a0:	d91a      	bls.n	80021d8 <check_distance_status+0x128>
			HAL_UART_Transmit(&huart2, (const uint8_t*) buffer_front,
					strlen(buffer_front), 100);
 80021a2:	f107 031c 	add.w	r3, r7, #28
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7fe f832 	bl	8000210 <strlen>
 80021ac:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart2, (const uint8_t*) buffer_front,
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	f107 011c 	add.w	r1, r7, #28
 80021b4:	2364      	movs	r3, #100	; 0x64
 80021b6:	481d      	ldr	r0, [pc, #116]	; (800222c <check_distance_status+0x17c>)
 80021b8:	f002 fead 	bl	8004f16 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (const uint8_t*) buffer_back,
					strlen(buffer_back), 100);
 80021bc:	463b      	mov	r3, r7
 80021be:	4618      	mov	r0, r3
 80021c0:	f7fe f826 	bl	8000210 <strlen>
 80021c4:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart2, (const uint8_t*) buffer_back,
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	4639      	mov	r1, r7
 80021ca:	2364      	movs	r3, #100	; 0x64
 80021cc:	4817      	ldr	r0, [pc, #92]	; (800222c <check_distance_status+0x17c>)
 80021ce:	f002 fea2 	bl	8004f16 <HAL_UART_Transmit>
			oneSec = 0;
 80021d2:	4b15      	ldr	r3, [pc, #84]	; (8002228 <check_distance_status+0x178>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
		}
		oneSec += 40;
 80021d8:	4b13      	ldr	r3, [pc, #76]	; (8002228 <check_distance_status+0x178>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	3328      	adds	r3, #40	; 0x28
 80021de:	4a12      	ldr	r2, [pc, #72]	; (8002228 <check_distance_status+0x178>)
 80021e0:	6013      	str	r3, [r2, #0]
		twoSec += 40;
 80021e2:	4b13      	ldr	r3, [pc, #76]	; (8002230 <check_distance_status+0x180>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	3328      	adds	r3, #40	; 0x28
 80021e8:	4a11      	ldr	r2, [pc, #68]	; (8002230 <check_distance_status+0x180>)
 80021ea:	6013      	str	r3, [r2, #0]
		HAL_Delay(40);
 80021ec:	2028      	movs	r0, #40	; 0x28
 80021ee:	f000 ff41 	bl	8003074 <HAL_Delay>
	}

	if (is_sleep_detected == true && twoSec > 2000) {
 80021f2:	4b10      	ldr	r3, [pc, #64]	; (8002234 <check_distance_status+0x184>)
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d006      	beq.n	8002208 <check_distance_status+0x158>
 80021fa:	4b0d      	ldr	r3, [pc, #52]	; (8002230 <check_distance_status+0x180>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002202:	d901      	bls.n	8002208 <check_distance_status+0x158>
		driver_asleep();
 8002204:	f000 f866 	bl	80022d4 <driver_asleep>
	}
}
 8002208:	bf00      	nop
 800220a:	3738      	adds	r7, #56	; 0x38
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	20000374 	.word	0x20000374
 8002214:	0800a14c 	.word	0x0800a14c
 8002218:	20000378 	.word	0x20000378
 800221c:	0800a168 	.word	0x0800a168
 8002220:	40020800 	.word	0x40020800
 8002224:	40020000 	.word	0x40020000
 8002228:	20000368 	.word	0x20000368
 800222c:	20000320 	.word	0x20000320
 8002230:	2000036c 	.word	0x2000036c
 8002234:	20000366 	.word	0x20000366

08002238 <HAL_GPIO_EXTI_Callback>:
/**
 * @brief Callback function to capture changes on Push Button line and IR sensor line for Eye blinking tracking.
 * @param[in] GPIO_Pin Pin that triggered the Callback function.
 * @retval None.
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	4603      	mov	r3, r0
 8002240:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == GPIO_PIN_13) {
 8002242:	88fb      	ldrh	r3, [r7, #6]
 8002244:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002248:	d113      	bne.n	8002272 <HAL_GPIO_EXTI_Callback+0x3a>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) {
 800224a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800224e:	481d      	ldr	r0, [pc, #116]	; (80022c4 <HAL_GPIO_EXTI_Callback+0x8c>)
 8002250:	f001 f9da 	bl	8003608 <HAL_GPIO_ReadPin>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d10b      	bne.n	8002272 <HAL_GPIO_EXTI_Callback+0x3a>
			if (is_ignition_on == false) {
 800225a:	4b1b      	ldr	r3, [pc, #108]	; (80022c8 <HAL_GPIO_EXTI_Callback+0x90>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	f083 0301 	eor.w	r3, r3, #1
 8002262:	b2db      	uxtb	r3, r3
 8002264:	2b00      	cmp	r3, #0
 8002266:	d002      	beq.n	800226e <HAL_GPIO_EXTI_Callback+0x36>
				turn_ignition_on();
 8002268:	f7fe fee6 	bl	8001038 <turn_ignition_on>
 800226c:	e001      	b.n	8002272 <HAL_GPIO_EXTI_Callback+0x3a>
			} else {
				turn_vehicle_off();
 800226e:	f000 f86d 	bl	800234c <turn_vehicle_off>
			}
		}
	}

	if (GPIO_Pin == GPIO_PIN_7) {
 8002272:	88fb      	ldrh	r3, [r7, #6]
 8002274:	2b80      	cmp	r3, #128	; 0x80
 8002276:	d120      	bne.n	80022ba <HAL_GPIO_EXTI_Callback+0x82>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == GPIO_PIN_RESET) {
 8002278:	2180      	movs	r1, #128	; 0x80
 800227a:	4812      	ldr	r0, [pc, #72]	; (80022c4 <HAL_GPIO_EXTI_Callback+0x8c>)
 800227c:	f001 f9c4 	bl	8003608 <HAL_GPIO_ReadPin>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d106      	bne.n	8002294 <HAL_GPIO_EXTI_Callback+0x5c>
			twoSec = 0;
 8002286:	4b11      	ldr	r3, [pc, #68]	; (80022cc <HAL_GPIO_EXTI_Callback+0x94>)
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
			is_sleep_detected = true;
 800228c:	4b10      	ldr	r3, [pc, #64]	; (80022d0 <HAL_GPIO_EXTI_Callback+0x98>)
 800228e:	2201      	movs	r2, #1
 8002290:	701a      	strb	r2, [r3, #0]
			} else {
				is_sleep_detected = false;
			}
		}
	}
}
 8002292:	e012      	b.n	80022ba <HAL_GPIO_EXTI_Callback+0x82>
		} else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == GPIO_PIN_SET) {
 8002294:	2180      	movs	r1, #128	; 0x80
 8002296:	480b      	ldr	r0, [pc, #44]	; (80022c4 <HAL_GPIO_EXTI_Callback+0x8c>)
 8002298:	f001 f9b6 	bl	8003608 <HAL_GPIO_ReadPin>
 800229c:	4603      	mov	r3, r0
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d10b      	bne.n	80022ba <HAL_GPIO_EXTI_Callback+0x82>
			if (twoSec > 2000) {
 80022a2:	4b0a      	ldr	r3, [pc, #40]	; (80022cc <HAL_GPIO_EXTI_Callback+0x94>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80022aa:	d903      	bls.n	80022b4 <HAL_GPIO_EXTI_Callback+0x7c>
				is_sleep_detected = true;
 80022ac:	4b08      	ldr	r3, [pc, #32]	; (80022d0 <HAL_GPIO_EXTI_Callback+0x98>)
 80022ae:	2201      	movs	r2, #1
 80022b0:	701a      	strb	r2, [r3, #0]
}
 80022b2:	e002      	b.n	80022ba <HAL_GPIO_EXTI_Callback+0x82>
				is_sleep_detected = false;
 80022b4:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <HAL_GPIO_EXTI_Callback+0x98>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	701a      	strb	r2, [r3, #0]
}
 80022ba:	bf00      	nop
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40020800 	.word	0x40020800
 80022c8:	20000365 	.word	0x20000365
 80022cc:	2000036c 	.word	0x2000036c
 80022d0:	20000366 	.word	0x20000366

080022d4 <driver_asleep>:
/**
 * @brief After sleep detection, emulate vehicle going into Safe-State and notify through alarm that sleep was detected.
 * @param None
 * @retval None.
 */
void driver_asleep() {
 80022d4:	b5b0      	push	{r4, r5, r7, lr}
 80022d6:	b08c      	sub	sp, #48	; 0x30
 80022d8:	af00      	add	r7, sp, #0
	char txt[] = "Driver  asleep!\n\rEntering Safe-State-Mode!\n\r";
 80022da:	4b17      	ldr	r3, [pc, #92]	; (8002338 <driver_asleep+0x64>)
 80022dc:	463c      	mov	r4, r7
 80022de:	461d      	mov	r5, r3
 80022e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022e8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80022ec:	c407      	stmia	r4!, {r0, r1, r2}
 80022ee:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, (const uint8_t*) txt, strlen(txt), 100);
 80022f0:	463b      	mov	r3, r7
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7fd ff8c 	bl	8000210 <strlen>
 80022f8:	4603      	mov	r3, r0
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	4639      	mov	r1, r7
 80022fe:	2364      	movs	r3, #100	; 0x64
 8002300:	480e      	ldr	r0, [pc, #56]	; (800233c <driver_asleep+0x68>)
 8002302:	f002 fe08 	bl	8004f16 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8002306:	2200      	movs	r2, #0
 8002308:	f44f 7100 	mov.w	r1, #512	; 0x200
 800230c:	480c      	ldr	r0, [pc, #48]	; (8002340 <driver_asleep+0x6c>)
 800230e:	f001 f993 	bl	8003638 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002312:	2201      	movs	r2, #1
 8002314:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002318:	480a      	ldr	r0, [pc, #40]	; (8002344 <driver_asleep+0x70>)
 800231a:	f001 f98d 	bl	8003638 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 800231e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002322:	f000 fea7 	bl	8003074 <HAL_Delay>
	is_sleep_detected = false;
 8002326:	4b08      	ldr	r3, [pc, #32]	; (8002348 <driver_asleep+0x74>)
 8002328:	2200      	movs	r2, #0
 800232a:	701a      	strb	r2, [r3, #0]
	turn_vehicle_off();
 800232c:	f000 f80e 	bl	800234c <turn_vehicle_off>
}
 8002330:	bf00      	nop
 8002332:	3730      	adds	r7, #48	; 0x30
 8002334:	46bd      	mov	sp, r7
 8002336:	bdb0      	pop	{r4, r5, r7, pc}
 8002338:	0800a184 	.word	0x0800a184
 800233c:	20000320 	.word	0x20000320
 8002340:	40020800 	.word	0x40020800
 8002344:	40020000 	.word	0x40020000
 8002348:	20000366 	.word	0x20000366

0800234c <turn_vehicle_off>:
/**
 * @brief Emulates vehicle shutdown.
 * @param None
 * @retval None.
 */
void turn_vehicle_off() {
 800234c:	b5b0      	push	{r4, r5, r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
	char txt[] = "Turning car OFF...\n\r";
 8002352:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <turn_vehicle_off+0x44>)
 8002354:	463c      	mov	r4, r7
 8002356:	461d      	mov	r5, r3
 8002358:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800235a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800235c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002360:	6020      	str	r0, [r4, #0]
 8002362:	3404      	adds	r4, #4
 8002364:	7021      	strb	r1, [r4, #0]
	HAL_UART_Transmit(&huart2, (const uint8_t*) txt, strlen(txt), 100);
 8002366:	463b      	mov	r3, r7
 8002368:	4618      	mov	r0, r3
 800236a:	f7fd ff51 	bl	8000210 <strlen>
 800236e:	4603      	mov	r3, r0
 8002370:	b29a      	uxth	r2, r3
 8002372:	4639      	mov	r1, r7
 8002374:	2364      	movs	r3, #100	; 0x64
 8002376:	4807      	ldr	r0, [pc, #28]	; (8002394 <turn_vehicle_off+0x48>)
 8002378:	f002 fdcd 	bl	8004f16 <HAL_UART_Transmit>
	is_car_on = false;
 800237c:	4b06      	ldr	r3, [pc, #24]	; (8002398 <turn_vehicle_off+0x4c>)
 800237e:	2200      	movs	r2, #0
 8002380:	701a      	strb	r2, [r3, #0]
	turn_ignition_off();
 8002382:	f000 f80b 	bl	800239c <turn_ignition_off>

}
 8002386:	bf00      	nop
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bdb0      	pop	{r4, r5, r7, pc}
 800238e:	bf00      	nop
 8002390:	0800a1b4 	.word	0x0800a1b4
 8002394:	20000320 	.word	0x20000320
 8002398:	20000364 	.word	0x20000364

0800239c <turn_ignition_off>:
/**
 * @brief Emulates ignition shutdown.
 * @param None
 * @retval None.
 */
void turn_ignition_off() {
 800239c:	b5b0      	push	{r4, r5, r7, lr}
 800239e:	b088      	sub	sp, #32
 80023a0:	af00      	add	r7, sp, #0
	is_ignition_on = false;
 80023a2:	4b15      	ldr	r3, [pc, #84]	; (80023f8 <turn_ignition_off+0x5c>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	701a      	strb	r2, [r3, #0]
	char txt[] = "Turning Ignition OFF...\n\r";
 80023a8:	4b14      	ldr	r3, [pc, #80]	; (80023fc <turn_ignition_off+0x60>)
 80023aa:	1d3c      	adds	r4, r7, #4
 80023ac:	461d      	mov	r5, r3
 80023ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80023b6:	c403      	stmia	r4!, {r0, r1}
 80023b8:	8022      	strh	r2, [r4, #0]
	HAL_UART_Transmit(&huart2, (const uint8_t*) txt, strlen(txt), 100);
 80023ba:	1d3b      	adds	r3, r7, #4
 80023bc:	4618      	mov	r0, r3
 80023be:	f7fd ff27 	bl	8000210 <strlen>
 80023c2:	4603      	mov	r3, r0
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	1d39      	adds	r1, r7, #4
 80023c8:	2364      	movs	r3, #100	; 0x64
 80023ca:	480d      	ldr	r0, [pc, #52]	; (8002400 <turn_ignition_off+0x64>)
 80023cc:	f002 fda3 	bl	8004f16 <HAL_UART_Transmit>
	measurements_count = 0;
 80023d0:	4b0c      	ldr	r3, [pc, #48]	; (8002404 <turn_ignition_off+0x68>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80023d6:	2200      	movs	r2, #0
 80023d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023dc:	480a      	ldr	r0, [pc, #40]	; (8002408 <turn_ignition_off+0x6c>)
 80023de:	f001 f92b 	bl	8003638 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80023e2:	2200      	movs	r2, #0
 80023e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023e8:	4808      	ldr	r0, [pc, #32]	; (800240c <turn_ignition_off+0x70>)
 80023ea:	f001 f925 	bl	8003638 <HAL_GPIO_WritePin>
}
 80023ee:	bf00      	nop
 80023f0:	3720      	adds	r7, #32
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bdb0      	pop	{r4, r5, r7, pc}
 80023f6:	bf00      	nop
 80023f8:	20000365 	.word	0x20000365
 80023fc:	0800a1cc 	.word	0x0800a1cc
 8002400:	20000320 	.word	0x20000320
 8002404:	20000370 	.word	0x20000370
 8002408:	40020800 	.word	0x40020800
 800240c:	40020000 	.word	0x40020000

08002410 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002414:	f000 fdbc 	bl	8002f90 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002418:	f000 f84a 	bl	80024b0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800241c:	f000 fa34 	bl	8002888 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8002420:	f000 fa08 	bl	8002834 <MX_USART2_UART_Init>
	MX_TIM1_Init();
 8002424:	f000 f8b2 	bl	800258c <MX_TIM1_Init>
	MX_TIM8_Init();
 8002428:	f000 f9ae 	bl	8002788 <MX_TIM8_Init>
	MX_TIM3_Init();
 800242c:	f000 f904 	bl	8002638 <MX_TIM3_Init>
	MX_TIM4_Init();
 8002430:	f000 f956 	bl	80026e0 <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8002434:	2100      	movs	r1, #0
 8002436:	4818      	ldr	r0, [pc, #96]	; (8002498 <main+0x88>)
 8002438:	f001 ff68 	bl	800430c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_1);
 800243c:	2100      	movs	r1, #0
 800243e:	4817      	ldr	r0, [pc, #92]	; (800249c <main+0x8c>)
 8002440:	f001 ff64 	bl	800430c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8002444:	2100      	movs	r1, #0
 8002446:	4816      	ldr	r0, [pc, #88]	; (80024a0 <main+0x90>)
 8002448:	f001 ff60 	bl	800430c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 800244c:	2100      	movs	r1, #0
 800244e:	4815      	ldr	r0, [pc, #84]	; (80024a4 <main+0x94>)
 8002450:	f001 ff5c 	bl	800430c <HAL_TIM_IC_Start_IT>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1) {
		if (is_ignition_on == true) {
 8002454:	4b14      	ldr	r3, [pc, #80]	; (80024a8 <main+0x98>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0fb      	beq.n	8002454 <main+0x44>
			if (is_car_on == false) {
 800245c:	4b13      	ldr	r3, [pc, #76]	; (80024ac <main+0x9c>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	f083 0301 	eor.w	r3, r3, #1
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d010      	beq.n	800248c <main+0x7c>
				if (check_alcohol_level() == true) {
 800246a:	f7fe fe31 	bl	80010d0 <check_alcohol_level>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d002      	beq.n	800247a <main+0x6a>
					turn_vehicle_off();
 8002474:	f7ff ff6a 	bl	800234c <turn_vehicle_off>
 8002478:	e7ec      	b.n	8002454 <main+0x44>
				} else {
					turn_vehicle_on();
 800247a:	f7fe fe07 	bl	800108c <turn_vehicle_on>
 800247e:	e7e9      	b.n	8002454 <main+0x44>
					//start_measurement();
				}
			} else {
				while (is_car_on == true) {
					start_measurement();
 8002480:	f7fe fe8a 	bl	8001198 <start_measurement>
					verify_sensor_measurements();
 8002484:	f7ff f984 	bl	8001790 <verify_sensor_measurements>
					check_sensor_measurements();
 8002488:	f7ff fd34 	bl	8001ef4 <check_sensor_measurements>
				while (is_car_on == true) {
 800248c:	4b07      	ldr	r3, [pc, #28]	; (80024ac <main+0x9c>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1f5      	bne.n	8002480 <main+0x70>
		if (is_ignition_on == true) {
 8002494:	e7de      	b.n	8002454 <main+0x44>
 8002496:	bf00      	nop
 8002498:	20000200 	.word	0x20000200
 800249c:	200002d8 	.word	0x200002d8
 80024a0:	20000248 	.word	0x20000248
 80024a4:	20000290 	.word	0x20000290
 80024a8:	20000365 	.word	0x20000365
 80024ac:	20000364 	.word	0x20000364

080024b0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b094      	sub	sp, #80	; 0x50
 80024b4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80024b6:	f107 031c 	add.w	r3, r7, #28
 80024ba:	2234      	movs	r2, #52	; 0x34
 80024bc:	2100      	movs	r1, #0
 80024be:	4618      	mov	r0, r3
 80024c0:	f003 f8c8 	bl	8005654 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80024c4:	f107 0308 	add.w	r3, r7, #8
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	605a      	str	r2, [r3, #4]
 80024ce:	609a      	str	r2, [r3, #8]
 80024d0:	60da      	str	r2, [r3, #12]
 80024d2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80024d4:	2300      	movs	r3, #0
 80024d6:	607b      	str	r3, [r7, #4]
 80024d8:	4b2a      	ldr	r3, [pc, #168]	; (8002584 <SystemClock_Config+0xd4>)
 80024da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024dc:	4a29      	ldr	r2, [pc, #164]	; (8002584 <SystemClock_Config+0xd4>)
 80024de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024e2:	6413      	str	r3, [r2, #64]	; 0x40
 80024e4:	4b27      	ldr	r3, [pc, #156]	; (8002584 <SystemClock_Config+0xd4>)
 80024e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ec:	607b      	str	r3, [r7, #4]
 80024ee:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80024f0:	2300      	movs	r3, #0
 80024f2:	603b      	str	r3, [r7, #0]
 80024f4:	4b24      	ldr	r3, [pc, #144]	; (8002588 <SystemClock_Config+0xd8>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80024fc:	4a22      	ldr	r2, [pc, #136]	; (8002588 <SystemClock_Config+0xd8>)
 80024fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002502:	6013      	str	r3, [r2, #0]
 8002504:	4b20      	ldr	r3, [pc, #128]	; (8002588 <SystemClock_Config+0xd8>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800250c:	603b      	str	r3, [r7, #0]
 800250e:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002510:	2302      	movs	r3, #2
 8002512:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002514:	2301      	movs	r3, #1
 8002516:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002518:	2310      	movs	r3, #16
 800251a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800251c:	2302      	movs	r3, #2
 800251e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002520:	2300      	movs	r3, #0
 8002522:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 8002524:	2310      	movs	r3, #16
 8002526:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 8002528:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800252c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800252e:	2304      	movs	r3, #4
 8002530:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8002532:	2302      	movs	r3, #2
 8002534:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8002536:	2302      	movs	r3, #2
 8002538:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800253a:	f107 031c 	add.w	r3, r7, #28
 800253e:	4618      	mov	r0, r3
 8002540:	f001 fbf6 	bl	8003d30 <HAL_RCC_OscConfig>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <SystemClock_Config+0x9e>
		Error_Handler();
 800254a:	f000 fa3f 	bl	80029cc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800254e:	230f      	movs	r3, #15
 8002550:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002552:	2302      	movs	r3, #2
 8002554:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002556:	2300      	movs	r3, #0
 8002558:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800255a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800255e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002560:	2300      	movs	r3, #0
 8002562:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002564:	f107 0308 	add.w	r3, r7, #8
 8002568:	2102      	movs	r1, #2
 800256a:	4618      	mov	r0, r3
 800256c:	f001 f896 	bl	800369c <HAL_RCC_ClockConfig>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <SystemClock_Config+0xca>
		Error_Handler();
 8002576:	f000 fa29 	bl	80029cc <Error_Handler>
	}
}
 800257a:	bf00      	nop
 800257c:	3750      	adds	r7, #80	; 0x50
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40023800 	.word	0x40023800
 8002588:	40007000 	.word	0x40007000

0800258c <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002592:	f107 0310 	add.w	r3, r7, #16
 8002596:	2200      	movs	r2, #0
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 800259c:	463b      	mov	r3, r7
 800259e:	2200      	movs	r2, #0
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	605a      	str	r2, [r3, #4]
 80025a4:	609a      	str	r2, [r3, #8]
 80025a6:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80025a8:	4b21      	ldr	r3, [pc, #132]	; (8002630 <MX_TIM1_Init+0xa4>)
 80025aa:	4a22      	ldr	r2, [pc, #136]	; (8002634 <MX_TIM1_Init+0xa8>)
 80025ac:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 84 - 1;
 80025ae:	4b20      	ldr	r3, [pc, #128]	; (8002630 <MX_TIM1_Init+0xa4>)
 80025b0:	2253      	movs	r2, #83	; 0x53
 80025b2:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025b4:	4b1e      	ldr	r3, [pc, #120]	; (8002630 <MX_TIM1_Init+0xa4>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 80025ba:	4b1d      	ldr	r3, [pc, #116]	; (8002630 <MX_TIM1_Init+0xa4>)
 80025bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025c0:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025c2:	4b1b      	ldr	r3, [pc, #108]	; (8002630 <MX_TIM1_Init+0xa4>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80025c8:	4b19      	ldr	r3, [pc, #100]	; (8002630 <MX_TIM1_Init+0xa4>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ce:	4b18      	ldr	r3, [pc, #96]	; (8002630 <MX_TIM1_Init+0xa4>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim1) != HAL_OK) {
 80025d4:	4816      	ldr	r0, [pc, #88]	; (8002630 <MX_TIM1_Init+0xa4>)
 80025d6:	f001 fe49 	bl	800426c <HAL_TIM_IC_Init>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <MX_TIM1_Init+0x58>
		Error_Handler();
 80025e0:	f000 f9f4 	bl	80029cc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025e4:	2300      	movs	r3, #0
 80025e6:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025e8:	2300      	movs	r3, #0
 80025ea:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80025ec:	f107 0310 	add.w	r3, r7, #16
 80025f0:	4619      	mov	r1, r3
 80025f2:	480f      	ldr	r0, [pc, #60]	; (8002630 <MX_TIM1_Init+0xa4>)
 80025f4:	f002 fbb2 	bl	8004d5c <HAL_TIMEx_MasterConfigSynchronization>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <MX_TIM1_Init+0x76>
			!= HAL_OK) {
		Error_Handler();
 80025fe:	f000 f9e5 	bl	80029cc <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002602:	2300      	movs	r3, #0
 8002604:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002606:	2301      	movs	r3, #1
 8002608:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800260a:	2300      	movs	r3, #0
 800260c:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 800260e:	2300      	movs	r3, #0
 8002610:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8002612:	463b      	mov	r3, r7
 8002614:	2200      	movs	r2, #0
 8002616:	4619      	mov	r1, r3
 8002618:	4805      	ldr	r0, [pc, #20]	; (8002630 <MX_TIM1_Init+0xa4>)
 800261a:	f002 f8a7 	bl	800476c <HAL_TIM_IC_ConfigChannel>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <MX_TIM1_Init+0x9c>
		Error_Handler();
 8002624:	f000 f9d2 	bl	80029cc <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8002628:	bf00      	nop
 800262a:	3718      	adds	r7, #24
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	20000200 	.word	0x20000200
 8002634:	40010000 	.word	0x40010000

08002638 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800263e:	f107 0310 	add.w	r3, r7, #16
 8002642:	2200      	movs	r2, #0
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8002648:	463b      	mov	r3, r7
 800264a:	2200      	movs	r2, #0
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	605a      	str	r2, [r3, #4]
 8002650:	609a      	str	r2, [r3, #8]
 8002652:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8002654:	4b20      	ldr	r3, [pc, #128]	; (80026d8 <MX_TIM3_Init+0xa0>)
 8002656:	4a21      	ldr	r2, [pc, #132]	; (80026dc <MX_TIM3_Init+0xa4>)
 8002658:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 84 - 1;
 800265a:	4b1f      	ldr	r3, [pc, #124]	; (80026d8 <MX_TIM3_Init+0xa0>)
 800265c:	2253      	movs	r2, #83	; 0x53
 800265e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002660:	4b1d      	ldr	r3, [pc, #116]	; (80026d8 <MX_TIM3_Init+0xa0>)
 8002662:	2200      	movs	r2, #0
 8002664:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8002666:	4b1c      	ldr	r3, [pc, #112]	; (80026d8 <MX_TIM3_Init+0xa0>)
 8002668:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800266c:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800266e:	4b1a      	ldr	r3, [pc, #104]	; (80026d8 <MX_TIM3_Init+0xa0>)
 8002670:	2200      	movs	r2, #0
 8002672:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002674:	4b18      	ldr	r3, [pc, #96]	; (80026d8 <MX_TIM3_Init+0xa0>)
 8002676:	2200      	movs	r2, #0
 8002678:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim3) != HAL_OK) {
 800267a:	4817      	ldr	r0, [pc, #92]	; (80026d8 <MX_TIM3_Init+0xa0>)
 800267c:	f001 fdf6 	bl	800426c <HAL_TIM_IC_Init>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <MX_TIM3_Init+0x52>
		Error_Handler();
 8002686:	f000 f9a1 	bl	80029cc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800268a:	2300      	movs	r3, #0
 800268c:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800268e:	2300      	movs	r3, #0
 8002690:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8002692:	f107 0310 	add.w	r3, r7, #16
 8002696:	4619      	mov	r1, r3
 8002698:	480f      	ldr	r0, [pc, #60]	; (80026d8 <MX_TIM3_Init+0xa0>)
 800269a:	f002 fb5f 	bl	8004d5c <HAL_TIMEx_MasterConfigSynchronization>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <MX_TIM3_Init+0x70>
			!= HAL_OK) {
		Error_Handler();
 80026a4:	f000 f992 	bl	80029cc <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80026a8:	2300      	movs	r3, #0
 80026aa:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80026ac:	2301      	movs	r3, #1
 80026ae:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80026b0:	2300      	movs	r3, #0
 80026b2:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 80026b4:	2300      	movs	r3, #0
 80026b6:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 80026b8:	463b      	mov	r3, r7
 80026ba:	2200      	movs	r2, #0
 80026bc:	4619      	mov	r1, r3
 80026be:	4806      	ldr	r0, [pc, #24]	; (80026d8 <MX_TIM3_Init+0xa0>)
 80026c0:	f002 f854 	bl	800476c <HAL_TIM_IC_ConfigChannel>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <MX_TIM3_Init+0x96>
		Error_Handler();
 80026ca:	f000 f97f 	bl	80029cc <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80026ce:	bf00      	nop
 80026d0:	3718      	adds	r7, #24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	20000248 	.word	0x20000248
 80026dc:	40000400 	.word	0x40000400

080026e0 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80026e6:	f107 0310 	add.w	r3, r7, #16
 80026ea:	2200      	movs	r2, #0
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 80026f0:	463b      	mov	r3, r7
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	605a      	str	r2, [r3, #4]
 80026f8:	609a      	str	r2, [r3, #8]
 80026fa:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 80026fc:	4b20      	ldr	r3, [pc, #128]	; (8002780 <MX_TIM4_Init+0xa0>)
 80026fe:	4a21      	ldr	r2, [pc, #132]	; (8002784 <MX_TIM4_Init+0xa4>)
 8002700:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 84 - 1;
 8002702:	4b1f      	ldr	r3, [pc, #124]	; (8002780 <MX_TIM4_Init+0xa0>)
 8002704:	2253      	movs	r2, #83	; 0x53
 8002706:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002708:	4b1d      	ldr	r3, [pc, #116]	; (8002780 <MX_TIM4_Init+0xa0>)
 800270a:	2200      	movs	r2, #0
 800270c:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 800270e:	4b1c      	ldr	r3, [pc, #112]	; (8002780 <MX_TIM4_Init+0xa0>)
 8002710:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002714:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002716:	4b1a      	ldr	r3, [pc, #104]	; (8002780 <MX_TIM4_Init+0xa0>)
 8002718:	2200      	movs	r2, #0
 800271a:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800271c:	4b18      	ldr	r3, [pc, #96]	; (8002780 <MX_TIM4_Init+0xa0>)
 800271e:	2200      	movs	r2, #0
 8002720:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim4) != HAL_OK) {
 8002722:	4817      	ldr	r0, [pc, #92]	; (8002780 <MX_TIM4_Init+0xa0>)
 8002724:	f001 fda2 	bl	800426c <HAL_TIM_IC_Init>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <MX_TIM4_Init+0x52>
		Error_Handler();
 800272e:	f000 f94d 	bl	80029cc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002732:	2300      	movs	r3, #0
 8002734:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002736:	2300      	movs	r3, #0
 8002738:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 800273a:	f107 0310 	add.w	r3, r7, #16
 800273e:	4619      	mov	r1, r3
 8002740:	480f      	ldr	r0, [pc, #60]	; (8002780 <MX_TIM4_Init+0xa0>)
 8002742:	f002 fb0b 	bl	8004d5c <HAL_TIMEx_MasterConfigSynchronization>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <MX_TIM4_Init+0x70>
			!= HAL_OK) {
		Error_Handler();
 800274c:	f000 f93e 	bl	80029cc <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002750:	2300      	movs	r3, #0
 8002752:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002754:	2301      	movs	r3, #1
 8002756:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002758:	2300      	movs	r3, #0
 800275a:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 800275c:	2300      	movs	r3, #0
 800275e:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8002760:	463b      	mov	r3, r7
 8002762:	2200      	movs	r2, #0
 8002764:	4619      	mov	r1, r3
 8002766:	4806      	ldr	r0, [pc, #24]	; (8002780 <MX_TIM4_Init+0xa0>)
 8002768:	f002 f800 	bl	800476c <HAL_TIM_IC_ConfigChannel>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <MX_TIM4_Init+0x96>
		Error_Handler();
 8002772:	f000 f92b 	bl	80029cc <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8002776:	bf00      	nop
 8002778:	3718      	adds	r7, #24
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	20000290 	.word	0x20000290
 8002784:	40000800 	.word	0x40000800

08002788 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800278e:	f107 0310 	add.w	r3, r7, #16
 8002792:	2200      	movs	r2, #0
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8002798:	463b      	mov	r3, r7
 800279a:	2200      	movs	r2, #0
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	605a      	str	r2, [r3, #4]
 80027a0:	609a      	str	r2, [r3, #8]
 80027a2:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 80027a4:	4b21      	ldr	r3, [pc, #132]	; (800282c <MX_TIM8_Init+0xa4>)
 80027a6:	4a22      	ldr	r2, [pc, #136]	; (8002830 <MX_TIM8_Init+0xa8>)
 80027a8:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 84 - 1;
 80027aa:	4b20      	ldr	r3, [pc, #128]	; (800282c <MX_TIM8_Init+0xa4>)
 80027ac:	2253      	movs	r2, #83	; 0x53
 80027ae:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027b0:	4b1e      	ldr	r3, [pc, #120]	; (800282c <MX_TIM8_Init+0xa4>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 65535;
 80027b6:	4b1d      	ldr	r3, [pc, #116]	; (800282c <MX_TIM8_Init+0xa4>)
 80027b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027bc:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027be:	4b1b      	ldr	r3, [pc, #108]	; (800282c <MX_TIM8_Init+0xa4>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 80027c4:	4b19      	ldr	r3, [pc, #100]	; (800282c <MX_TIM8_Init+0xa4>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027ca:	4b18      	ldr	r3, [pc, #96]	; (800282c <MX_TIM8_Init+0xa4>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim8) != HAL_OK) {
 80027d0:	4816      	ldr	r0, [pc, #88]	; (800282c <MX_TIM8_Init+0xa4>)
 80027d2:	f001 fd4b 	bl	800426c <HAL_TIM_IC_Init>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <MX_TIM8_Init+0x58>
		Error_Handler();
 80027dc:	f000 f8f6 	bl	80029cc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027e0:	2300      	movs	r3, #0
 80027e2:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027e4:	2300      	movs	r3, #0
 80027e6:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 80027e8:	f107 0310 	add.w	r3, r7, #16
 80027ec:	4619      	mov	r1, r3
 80027ee:	480f      	ldr	r0, [pc, #60]	; (800282c <MX_TIM8_Init+0xa4>)
 80027f0:	f002 fab4 	bl	8004d5c <HAL_TIMEx_MasterConfigSynchronization>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <MX_TIM8_Init+0x76>
			!= HAL_OK) {
		Error_Handler();
 80027fa:	f000 f8e7 	bl	80029cc <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80027fe:	2300      	movs	r3, #0
 8002800:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002802:	2301      	movs	r3, #1
 8002804:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002806:	2300      	movs	r3, #0
 8002808:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 800280a:	2300      	movs	r3, #0
 800280c:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 800280e:	463b      	mov	r3, r7
 8002810:	2200      	movs	r2, #0
 8002812:	4619      	mov	r1, r3
 8002814:	4805      	ldr	r0, [pc, #20]	; (800282c <MX_TIM8_Init+0xa4>)
 8002816:	f001 ffa9 	bl	800476c <HAL_TIM_IC_ConfigChannel>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <MX_TIM8_Init+0x9c>
		Error_Handler();
 8002820:	f000 f8d4 	bl	80029cc <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */

}
 8002824:	bf00      	nop
 8002826:	3718      	adds	r7, #24
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	200002d8 	.word	0x200002d8
 8002830:	40010400 	.word	0x40010400

08002834 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002838:	4b11      	ldr	r3, [pc, #68]	; (8002880 <MX_USART2_UART_Init+0x4c>)
 800283a:	4a12      	ldr	r2, [pc, #72]	; (8002884 <MX_USART2_UART_Init+0x50>)
 800283c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800283e:	4b10      	ldr	r3, [pc, #64]	; (8002880 <MX_USART2_UART_Init+0x4c>)
 8002840:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002844:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002846:	4b0e      	ldr	r3, [pc, #56]	; (8002880 <MX_USART2_UART_Init+0x4c>)
 8002848:	2200      	movs	r2, #0
 800284a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800284c:	4b0c      	ldr	r3, [pc, #48]	; (8002880 <MX_USART2_UART_Init+0x4c>)
 800284e:	2200      	movs	r2, #0
 8002850:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002852:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <MX_USART2_UART_Init+0x4c>)
 8002854:	2200      	movs	r2, #0
 8002856:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002858:	4b09      	ldr	r3, [pc, #36]	; (8002880 <MX_USART2_UART_Init+0x4c>)
 800285a:	220c      	movs	r2, #12
 800285c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800285e:	4b08      	ldr	r3, [pc, #32]	; (8002880 <MX_USART2_UART_Init+0x4c>)
 8002860:	2200      	movs	r2, #0
 8002862:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002864:	4b06      	ldr	r3, [pc, #24]	; (8002880 <MX_USART2_UART_Init+0x4c>)
 8002866:	2200      	movs	r2, #0
 8002868:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800286a:	4805      	ldr	r0, [pc, #20]	; (8002880 <MX_USART2_UART_Init+0x4c>)
 800286c:	f002 fb06 	bl	8004e7c <HAL_UART_Init>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8002876:	f000 f8a9 	bl	80029cc <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800287a:	bf00      	nop
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	20000320 	.word	0x20000320
 8002884:	40004400 	.word	0x40004400

08002888 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002888:	b580      	push	{r7, lr}
 800288a:	b08a      	sub	sp, #40	; 0x28
 800288c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800288e:	f107 0314 	add.w	r3, r7, #20
 8002892:	2200      	movs	r2, #0
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	605a      	str	r2, [r3, #4]
 8002898:	609a      	str	r2, [r3, #8]
 800289a:	60da      	str	r2, [r3, #12]
 800289c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800289e:	2300      	movs	r3, #0
 80028a0:	613b      	str	r3, [r7, #16]
 80028a2:	4b47      	ldr	r3, [pc, #284]	; (80029c0 <MX_GPIO_Init+0x138>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	4a46      	ldr	r2, [pc, #280]	; (80029c0 <MX_GPIO_Init+0x138>)
 80028a8:	f043 0304 	orr.w	r3, r3, #4
 80028ac:	6313      	str	r3, [r2, #48]	; 0x30
 80028ae:	4b44      	ldr	r3, [pc, #272]	; (80029c0 <MX_GPIO_Init+0x138>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	f003 0304 	and.w	r3, r3, #4
 80028b6:	613b      	str	r3, [r7, #16]
 80028b8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80028ba:	2300      	movs	r3, #0
 80028bc:	60fb      	str	r3, [r7, #12]
 80028be:	4b40      	ldr	r3, [pc, #256]	; (80029c0 <MX_GPIO_Init+0x138>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	4a3f      	ldr	r2, [pc, #252]	; (80029c0 <MX_GPIO_Init+0x138>)
 80028c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028c8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ca:	4b3d      	ldr	r3, [pc, #244]	; (80029c0 <MX_GPIO_Init+0x138>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80028d6:	2300      	movs	r3, #0
 80028d8:	60bb      	str	r3, [r7, #8]
 80028da:	4b39      	ldr	r3, [pc, #228]	; (80029c0 <MX_GPIO_Init+0x138>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028de:	4a38      	ldr	r2, [pc, #224]	; (80029c0 <MX_GPIO_Init+0x138>)
 80028e0:	f043 0301 	orr.w	r3, r3, #1
 80028e4:	6313      	str	r3, [r2, #48]	; 0x30
 80028e6:	4b36      	ldr	r3, [pc, #216]	; (80029c0 <MX_GPIO_Init+0x138>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	60bb      	str	r3, [r7, #8]
 80028f0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80028f2:	2300      	movs	r3, #0
 80028f4:	607b      	str	r3, [r7, #4]
 80028f6:	4b32      	ldr	r3, [pc, #200]	; (80029c0 <MX_GPIO_Init+0x138>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fa:	4a31      	ldr	r2, [pc, #196]	; (80029c0 <MX_GPIO_Init+0x138>)
 80028fc:	f043 0302 	orr.w	r3, r3, #2
 8002900:	6313      	str	r3, [r2, #48]	; 0x30
 8002902:	4b2f      	ldr	r3, [pc, #188]	; (80029c0 <MX_GPIO_Init+0x138>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	607b      	str	r3, [r7, #4]
 800290c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_RESET);
 800290e:	2200      	movs	r2, #0
 8002910:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002914:	482b      	ldr	r0, [pc, #172]	; (80029c4 <MX_GPIO_Init+0x13c>)
 8002916:	f000 fe8f 	bl	8003638 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800291a:	2200      	movs	r2, #0
 800291c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002920:	4829      	ldr	r0, [pc, #164]	; (80029c8 <MX_GPIO_Init+0x140>)
 8002922:	f000 fe89 	bl	8003638 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PC13 PC7 */
	GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_7;
 8002926:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 800292a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800292c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002930:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002932:	2300      	movs	r3, #0
 8002934:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002936:	f107 0314 	add.w	r3, r7, #20
 800293a:	4619      	mov	r1, r3
 800293c:	4821      	ldr	r0, [pc, #132]	; (80029c4 <MX_GPIO_Init+0x13c>)
 800293e:	f000 fccf 	bl	80032e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002942:	2301      	movs	r3, #1
 8002944:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002946:	2300      	movs	r3, #0
 8002948:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294a:	2300      	movs	r3, #0
 800294c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800294e:	f107 0314 	add.w	r3, r7, #20
 8002952:	4619      	mov	r1, r3
 8002954:	481b      	ldr	r0, [pc, #108]	; (80029c4 <MX_GPIO_Init+0x13c>)
 8002956:	f000 fcc3 	bl	80032e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC8 PC9 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 800295a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800295e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002960:	2301      	movs	r3, #1
 8002962:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002964:	2300      	movs	r3, #0
 8002966:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002968:	2300      	movs	r3, #0
 800296a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800296c:	f107 0314 	add.w	r3, r7, #20
 8002970:	4619      	mov	r1, r3
 8002972:	4814      	ldr	r0, [pc, #80]	; (80029c4 <MX_GPIO_Init+0x13c>)
 8002974:	f000 fcb4 	bl	80032e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA12 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002978:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800297c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800297e:	2301      	movs	r3, #1
 8002980:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002982:	2300      	movs	r3, #0
 8002984:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002986:	2300      	movs	r3, #0
 8002988:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800298a:	f107 0314 	add.w	r3, r7, #20
 800298e:	4619      	mov	r1, r3
 8002990:	480d      	ldr	r0, [pc, #52]	; (80029c8 <MX_GPIO_Init+0x140>)
 8002992:	f000 fca5 	bl	80032e0 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002996:	2200      	movs	r2, #0
 8002998:	2100      	movs	r1, #0
 800299a:	2017      	movs	r0, #23
 800299c:	f000 fc69 	bl	8003272 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80029a0:	2017      	movs	r0, #23
 80029a2:	f000 fc82 	bl	80032aa <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80029a6:	2200      	movs	r2, #0
 80029a8:	2100      	movs	r1, #0
 80029aa:	2028      	movs	r0, #40	; 0x28
 80029ac:	f000 fc61 	bl	8003272 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80029b0:	2028      	movs	r0, #40	; 0x28
 80029b2:	f000 fc7a 	bl	80032aa <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80029b6:	bf00      	nop
 80029b8:	3728      	adds	r7, #40	; 0x28
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40023800 	.word	0x40023800
 80029c4:	40020800 	.word	0x40020800
 80029c8:	40020000 	.word	0x40020000

080029cc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029d0:	b672      	cpsid	i
}
 80029d2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80029d4:	e7fe      	b.n	80029d4 <Error_Handler+0x8>
	...

080029d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029de:	2300      	movs	r3, #0
 80029e0:	607b      	str	r3, [r7, #4]
 80029e2:	4b10      	ldr	r3, [pc, #64]	; (8002a24 <HAL_MspInit+0x4c>)
 80029e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e6:	4a0f      	ldr	r2, [pc, #60]	; (8002a24 <HAL_MspInit+0x4c>)
 80029e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029ec:	6453      	str	r3, [r2, #68]	; 0x44
 80029ee:	4b0d      	ldr	r3, [pc, #52]	; (8002a24 <HAL_MspInit+0x4c>)
 80029f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029f6:	607b      	str	r3, [r7, #4]
 80029f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029fa:	2300      	movs	r3, #0
 80029fc:	603b      	str	r3, [r7, #0]
 80029fe:	4b09      	ldr	r3, [pc, #36]	; (8002a24 <HAL_MspInit+0x4c>)
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	4a08      	ldr	r2, [pc, #32]	; (8002a24 <HAL_MspInit+0x4c>)
 8002a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a08:	6413      	str	r3, [r2, #64]	; 0x40
 8002a0a:	4b06      	ldr	r3, [pc, #24]	; (8002a24 <HAL_MspInit+0x4c>)
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a12:	603b      	str	r3, [r7, #0]
 8002a14:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002a16:	2007      	movs	r0, #7
 8002a18:	f000 fc20 	bl	800325c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a1c:	bf00      	nop
 8002a1e:	3708      	adds	r7, #8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40023800 	.word	0x40023800

08002a28 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b090      	sub	sp, #64	; 0x40
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	605a      	str	r2, [r3, #4]
 8002a3a:	609a      	str	r2, [r3, #8]
 8002a3c:	60da      	str	r2, [r3, #12]
 8002a3e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a74      	ldr	r2, [pc, #464]	; (8002c18 <HAL_TIM_IC_MspInit+0x1f0>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d135      	bne.n	8002ab6 <HAL_TIM_IC_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a4e:	4b73      	ldr	r3, [pc, #460]	; (8002c1c <HAL_TIM_IC_MspInit+0x1f4>)
 8002a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a52:	4a72      	ldr	r2, [pc, #456]	; (8002c1c <HAL_TIM_IC_MspInit+0x1f4>)
 8002a54:	f043 0301 	orr.w	r3, r3, #1
 8002a58:	6453      	str	r3, [r2, #68]	; 0x44
 8002a5a:	4b70      	ldr	r3, [pc, #448]	; (8002c1c <HAL_TIM_IC_MspInit+0x1f4>)
 8002a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a64:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a66:	2300      	movs	r3, #0
 8002a68:	627b      	str	r3, [r7, #36]	; 0x24
 8002a6a:	4b6c      	ldr	r3, [pc, #432]	; (8002c1c <HAL_TIM_IC_MspInit+0x1f4>)
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6e:	4a6b      	ldr	r2, [pc, #428]	; (8002c1c <HAL_TIM_IC_MspInit+0x1f4>)
 8002a70:	f043 0301 	orr.w	r3, r3, #1
 8002a74:	6313      	str	r3, [r2, #48]	; 0x30
 8002a76:	4b69      	ldr	r3, [pc, #420]	; (8002c1c <HAL_TIM_IC_MspInit+0x1f4>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002a82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a88:	2302      	movs	r3, #2
 8002a8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a90:	2300      	movs	r3, #0
 8002a92:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a94:	2301      	movs	r3, #1
 8002a96:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	4860      	ldr	r0, [pc, #384]	; (8002c20 <HAL_TIM_IC_MspInit+0x1f8>)
 8002aa0:	f000 fc1e 	bl	80032e0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	201b      	movs	r0, #27
 8002aaa:	f000 fbe2 	bl	8003272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002aae:	201b      	movs	r0, #27
 8002ab0:	f000 fbfb 	bl	80032aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002ab4:	e0ac      	b.n	8002c10 <HAL_TIM_IC_MspInit+0x1e8>
  else if(htim_ic->Instance==TIM3)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a5a      	ldr	r2, [pc, #360]	; (8002c24 <HAL_TIM_IC_MspInit+0x1fc>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d134      	bne.n	8002b2a <HAL_TIM_IC_MspInit+0x102>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	623b      	str	r3, [r7, #32]
 8002ac4:	4b55      	ldr	r3, [pc, #340]	; (8002c1c <HAL_TIM_IC_MspInit+0x1f4>)
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac8:	4a54      	ldr	r2, [pc, #336]	; (8002c1c <HAL_TIM_IC_MspInit+0x1f4>)
 8002aca:	f043 0302 	orr.w	r3, r3, #2
 8002ace:	6413      	str	r3, [r2, #64]	; 0x40
 8002ad0:	4b52      	ldr	r3, [pc, #328]	; (8002c1c <HAL_TIM_IC_MspInit+0x1f4>)
 8002ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	623b      	str	r3, [r7, #32]
 8002ada:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002adc:	2300      	movs	r3, #0
 8002ade:	61fb      	str	r3, [r7, #28]
 8002ae0:	4b4e      	ldr	r3, [pc, #312]	; (8002c1c <HAL_TIM_IC_MspInit+0x1f4>)
 8002ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae4:	4a4d      	ldr	r2, [pc, #308]	; (8002c1c <HAL_TIM_IC_MspInit+0x1f4>)
 8002ae6:	f043 0301 	orr.w	r3, r3, #1
 8002aea:	6313      	str	r3, [r2, #48]	; 0x30
 8002aec:	4b4b      	ldr	r3, [pc, #300]	; (8002c1c <HAL_TIM_IC_MspInit+0x1f4>)
 8002aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	61fb      	str	r3, [r7, #28]
 8002af6:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002af8:	2340      	movs	r3, #64	; 0x40
 8002afa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afc:	2302      	movs	r3, #2
 8002afe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b00:	2300      	movs	r3, #0
 8002b02:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b04:	2300      	movs	r3, #0
 8002b06:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b08:	2302      	movs	r3, #2
 8002b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b10:	4619      	mov	r1, r3
 8002b12:	4843      	ldr	r0, [pc, #268]	; (8002c20 <HAL_TIM_IC_MspInit+0x1f8>)
 8002b14:	f000 fbe4 	bl	80032e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002b18:	2200      	movs	r2, #0
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	201d      	movs	r0, #29
 8002b1e:	f000 fba8 	bl	8003272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002b22:	201d      	movs	r0, #29
 8002b24:	f000 fbc1 	bl	80032aa <HAL_NVIC_EnableIRQ>
}
 8002b28:	e072      	b.n	8002c10 <HAL_TIM_IC_MspInit+0x1e8>
  else if(htim_ic->Instance==TIM4)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a3e      	ldr	r2, [pc, #248]	; (8002c28 <HAL_TIM_IC_MspInit+0x200>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d134      	bne.n	8002b9e <HAL_TIM_IC_MspInit+0x176>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b34:	2300      	movs	r3, #0
 8002b36:	61bb      	str	r3, [r7, #24]
 8002b38:	4b38      	ldr	r3, [pc, #224]	; (8002c1c <HAL_TIM_IC_MspInit+0x1f4>)
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3c:	4a37      	ldr	r2, [pc, #220]	; (8002c1c <HAL_TIM_IC_MspInit+0x1f4>)
 8002b3e:	f043 0304 	orr.w	r3, r3, #4
 8002b42:	6413      	str	r3, [r2, #64]	; 0x40
 8002b44:	4b35      	ldr	r3, [pc, #212]	; (8002c1c <HAL_TIM_IC_MspInit+0x1f4>)
 8002b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b48:	f003 0304 	and.w	r3, r3, #4
 8002b4c:	61bb      	str	r3, [r7, #24]
 8002b4e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b50:	2300      	movs	r3, #0
 8002b52:	617b      	str	r3, [r7, #20]
 8002b54:	4b31      	ldr	r3, [pc, #196]	; (8002c1c <HAL_TIM_IC_MspInit+0x1f4>)
 8002b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b58:	4a30      	ldr	r2, [pc, #192]	; (8002c1c <HAL_TIM_IC_MspInit+0x1f4>)
 8002b5a:	f043 0302 	orr.w	r3, r3, #2
 8002b5e:	6313      	str	r3, [r2, #48]	; 0x30
 8002b60:	4b2e      	ldr	r3, [pc, #184]	; (8002c1c <HAL_TIM_IC_MspInit+0x1f4>)
 8002b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	617b      	str	r3, [r7, #20]
 8002b6a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b6c:	2340      	movs	r3, #64	; 0x40
 8002b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b70:	2302      	movs	r3, #2
 8002b72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b74:	2300      	movs	r3, #0
 8002b76:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b84:	4619      	mov	r1, r3
 8002b86:	4829      	ldr	r0, [pc, #164]	; (8002c2c <HAL_TIM_IC_MspInit+0x204>)
 8002b88:	f000 fbaa 	bl	80032e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	2100      	movs	r1, #0
 8002b90:	201e      	movs	r0, #30
 8002b92:	f000 fb6e 	bl	8003272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002b96:	201e      	movs	r0, #30
 8002b98:	f000 fb87 	bl	80032aa <HAL_NVIC_EnableIRQ>
}
 8002b9c:	e038      	b.n	8002c10 <HAL_TIM_IC_MspInit+0x1e8>
  else if(htim_ic->Instance==TIM8)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a23      	ldr	r2, [pc, #140]	; (8002c30 <HAL_TIM_IC_MspInit+0x208>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d133      	bne.n	8002c10 <HAL_TIM_IC_MspInit+0x1e8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002ba8:	2300      	movs	r3, #0
 8002baa:	613b      	str	r3, [r7, #16]
 8002bac:	4b1b      	ldr	r3, [pc, #108]	; (8002c1c <HAL_TIM_IC_MspInit+0x1f4>)
 8002bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb0:	4a1a      	ldr	r2, [pc, #104]	; (8002c1c <HAL_TIM_IC_MspInit+0x1f4>)
 8002bb2:	f043 0302 	orr.w	r3, r3, #2
 8002bb6:	6453      	str	r3, [r2, #68]	; 0x44
 8002bb8:	4b18      	ldr	r3, [pc, #96]	; (8002c1c <HAL_TIM_IC_MspInit+0x1f4>)
 8002bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	613b      	str	r3, [r7, #16]
 8002bc2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	4b14      	ldr	r3, [pc, #80]	; (8002c1c <HAL_TIM_IC_MspInit+0x1f4>)
 8002bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bcc:	4a13      	ldr	r2, [pc, #76]	; (8002c1c <HAL_TIM_IC_MspInit+0x1f4>)
 8002bce:	f043 0304 	orr.w	r3, r3, #4
 8002bd2:	6313      	str	r3, [r2, #48]	; 0x30
 8002bd4:	4b11      	ldr	r3, [pc, #68]	; (8002c1c <HAL_TIM_IC_MspInit+0x1f4>)
 8002bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	60fb      	str	r3, [r7, #12]
 8002bde:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002be0:	2340      	movs	r3, #64	; 0x40
 8002be2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be4:	2302      	movs	r3, #2
 8002be6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be8:	2300      	movs	r3, #0
 8002bea:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bec:	2300      	movs	r3, #0
 8002bee:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bf4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	480e      	ldr	r0, [pc, #56]	; (8002c34 <HAL_TIM_IC_MspInit+0x20c>)
 8002bfc:	f000 fb70 	bl	80032e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8002c00:	2200      	movs	r2, #0
 8002c02:	2100      	movs	r1, #0
 8002c04:	202e      	movs	r0, #46	; 0x2e
 8002c06:	f000 fb34 	bl	8003272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8002c0a:	202e      	movs	r0, #46	; 0x2e
 8002c0c:	f000 fb4d 	bl	80032aa <HAL_NVIC_EnableIRQ>
}
 8002c10:	bf00      	nop
 8002c12:	3740      	adds	r7, #64	; 0x40
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40010000 	.word	0x40010000
 8002c1c:	40023800 	.word	0x40023800
 8002c20:	40020000 	.word	0x40020000
 8002c24:	40000400 	.word	0x40000400
 8002c28:	40000800 	.word	0x40000800
 8002c2c:	40020400 	.word	0x40020400
 8002c30:	40010400 	.word	0x40010400
 8002c34:	40020800 	.word	0x40020800

08002c38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b08a      	sub	sp, #40	; 0x28
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c40:	f107 0314 	add.w	r3, r7, #20
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	605a      	str	r2, [r3, #4]
 8002c4a:	609a      	str	r2, [r3, #8]
 8002c4c:	60da      	str	r2, [r3, #12]
 8002c4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a19      	ldr	r2, [pc, #100]	; (8002cbc <HAL_UART_MspInit+0x84>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d12b      	bne.n	8002cb2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	613b      	str	r3, [r7, #16]
 8002c5e:	4b18      	ldr	r3, [pc, #96]	; (8002cc0 <HAL_UART_MspInit+0x88>)
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	4a17      	ldr	r2, [pc, #92]	; (8002cc0 <HAL_UART_MspInit+0x88>)
 8002c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c68:	6413      	str	r3, [r2, #64]	; 0x40
 8002c6a:	4b15      	ldr	r3, [pc, #84]	; (8002cc0 <HAL_UART_MspInit+0x88>)
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c72:	613b      	str	r3, [r7, #16]
 8002c74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c76:	2300      	movs	r3, #0
 8002c78:	60fb      	str	r3, [r7, #12]
 8002c7a:	4b11      	ldr	r3, [pc, #68]	; (8002cc0 <HAL_UART_MspInit+0x88>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7e:	4a10      	ldr	r2, [pc, #64]	; (8002cc0 <HAL_UART_MspInit+0x88>)
 8002c80:	f043 0301 	orr.w	r3, r3, #1
 8002c84:	6313      	str	r3, [r2, #48]	; 0x30
 8002c86:	4b0e      	ldr	r3, [pc, #56]	; (8002cc0 <HAL_UART_MspInit+0x88>)
 8002c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002c92:	230c      	movs	r3, #12
 8002c94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c96:	2302      	movs	r3, #2
 8002c98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ca2:	2307      	movs	r3, #7
 8002ca4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ca6:	f107 0314 	add.w	r3, r7, #20
 8002caa:	4619      	mov	r1, r3
 8002cac:	4805      	ldr	r0, [pc, #20]	; (8002cc4 <HAL_UART_MspInit+0x8c>)
 8002cae:	f000 fb17 	bl	80032e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002cb2:	bf00      	nop
 8002cb4:	3728      	adds	r7, #40	; 0x28
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	40004400 	.word	0x40004400
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	40020000 	.word	0x40020000

08002cc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ccc:	e7fe      	b.n	8002ccc <NMI_Handler+0x4>

08002cce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cd2:	e7fe      	b.n	8002cd2 <HardFault_Handler+0x4>

08002cd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cd8:	e7fe      	b.n	8002cd8 <MemManage_Handler+0x4>

08002cda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cde:	e7fe      	b.n	8002cde <BusFault_Handler+0x4>

08002ce0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ce4:	e7fe      	b.n	8002ce4 <UsageFault_Handler+0x4>

08002ce6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cea:	bf00      	nop
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cf8:	bf00      	nop
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d02:	b480      	push	{r7}
 8002d04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d06:	bf00      	nop
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d14:	f000 f98e 	bl	8003034 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d18:	bf00      	nop
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002d20:	2080      	movs	r0, #128	; 0x80
 8002d22:	f000 fca3 	bl	800366c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002d26:	bf00      	nop
 8002d28:	bd80      	pop	{r7, pc}
	...

08002d2c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002d30:	4802      	ldr	r0, [pc, #8]	; (8002d3c <TIM1_CC_IRQHandler+0x10>)
 8002d32:	f001 fc13 	bl	800455c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002d36:	bf00      	nop
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	20000200 	.word	0x20000200

08002d40 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002d44:	4802      	ldr	r0, [pc, #8]	; (8002d50 <TIM3_IRQHandler+0x10>)
 8002d46:	f001 fc09 	bl	800455c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002d4a:	bf00      	nop
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	20000248 	.word	0x20000248

08002d54 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002d58:	4802      	ldr	r0, [pc, #8]	; (8002d64 <TIM4_IRQHandler+0x10>)
 8002d5a:	f001 fbff 	bl	800455c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002d5e:	bf00      	nop
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	20000290 	.word	0x20000290

08002d68 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002d6c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002d70:	f000 fc7c 	bl	800366c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002d74:	bf00      	nop
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002d7c:	4802      	ldr	r0, [pc, #8]	; (8002d88 <TIM8_CC_IRQHandler+0x10>)
 8002d7e:	f001 fbed 	bl	800455c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8002d82:	bf00      	nop
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	200002d8 	.word	0x200002d8

08002d8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  return 1;
 8002d90:	2301      	movs	r3, #1
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <_kill>:

int _kill(int pid, int sig)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002da6:	f002 fc2b 	bl	8005600 <__errno>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2216      	movs	r2, #22
 8002dae:	601a      	str	r2, [r3, #0]
  return -1;
 8002db0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3708      	adds	r7, #8
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <_exit>:

void _exit (int status)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002dc4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f7ff ffe7 	bl	8002d9c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002dce:	e7fe      	b.n	8002dce <_exit+0x12>

08002dd0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ddc:	2300      	movs	r3, #0
 8002dde:	617b      	str	r3, [r7, #20]
 8002de0:	e00a      	b.n	8002df8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002de2:	f3af 8000 	nop.w
 8002de6:	4601      	mov	r1, r0
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	1c5a      	adds	r2, r3, #1
 8002dec:	60ba      	str	r2, [r7, #8]
 8002dee:	b2ca      	uxtb	r2, r1
 8002df0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	3301      	adds	r3, #1
 8002df6:	617b      	str	r3, [r7, #20]
 8002df8:	697a      	ldr	r2, [r7, #20]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	dbf0      	blt.n	8002de2 <_read+0x12>
  }

  return len;
 8002e00:	687b      	ldr	r3, [r7, #4]
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3718      	adds	r7, #24
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b086      	sub	sp, #24
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	60f8      	str	r0, [r7, #12]
 8002e12:	60b9      	str	r1, [r7, #8]
 8002e14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e16:	2300      	movs	r3, #0
 8002e18:	617b      	str	r3, [r7, #20]
 8002e1a:	e009      	b.n	8002e30 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	1c5a      	adds	r2, r3, #1
 8002e20:	60ba      	str	r2, [r7, #8]
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	617b      	str	r3, [r7, #20]
 8002e30:	697a      	ldr	r2, [r7, #20]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	dbf1      	blt.n	8002e1c <_write+0x12>
  }
  return len;
 8002e38:	687b      	ldr	r3, [r7, #4]
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3718      	adds	r7, #24
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <_close>:

int _close(int file)
{
 8002e42:	b480      	push	{r7}
 8002e44:	b083      	sub	sp, #12
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr

08002e5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b083      	sub	sp, #12
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
 8002e62:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e6a:	605a      	str	r2, [r3, #4]
  return 0;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr

08002e7a <_isatty>:

int _isatty(int file)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b083      	sub	sp, #12
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e82:	2301      	movs	r3, #1
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3714      	adds	r7, #20
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
	...

08002eac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002eb4:	4a14      	ldr	r2, [pc, #80]	; (8002f08 <_sbrk+0x5c>)
 8002eb6:	4b15      	ldr	r3, [pc, #84]	; (8002f0c <_sbrk+0x60>)
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ec0:	4b13      	ldr	r3, [pc, #76]	; (8002f10 <_sbrk+0x64>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d102      	bne.n	8002ece <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ec8:	4b11      	ldr	r3, [pc, #68]	; (8002f10 <_sbrk+0x64>)
 8002eca:	4a12      	ldr	r2, [pc, #72]	; (8002f14 <_sbrk+0x68>)
 8002ecc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ece:	4b10      	ldr	r3, [pc, #64]	; (8002f10 <_sbrk+0x64>)
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d207      	bcs.n	8002eec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002edc:	f002 fb90 	bl	8005600 <__errno>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	220c      	movs	r2, #12
 8002ee4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ee6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002eea:	e009      	b.n	8002f00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002eec:	4b08      	ldr	r3, [pc, #32]	; (8002f10 <_sbrk+0x64>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ef2:	4b07      	ldr	r3, [pc, #28]	; (8002f10 <_sbrk+0x64>)
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4413      	add	r3, r2
 8002efa:	4a05      	ldr	r2, [pc, #20]	; (8002f10 <_sbrk+0x64>)
 8002efc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002efe:	68fb      	ldr	r3, [r7, #12]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3718      	adds	r7, #24
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	20020000 	.word	0x20020000
 8002f0c:	00000400 	.word	0x00000400
 8002f10:	2000040c 	.word	0x2000040c
 8002f14:	20000428 	.word	0x20000428

08002f18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f1c:	4b06      	ldr	r3, [pc, #24]	; (8002f38 <SystemInit+0x20>)
 8002f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f22:	4a05      	ldr	r2, [pc, #20]	; (8002f38 <SystemInit+0x20>)
 8002f24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f2c:	bf00      	nop
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	e000ed00 	.word	0xe000ed00

08002f3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002f3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f40:	480d      	ldr	r0, [pc, #52]	; (8002f78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f42:	490e      	ldr	r1, [pc, #56]	; (8002f7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f44:	4a0e      	ldr	r2, [pc, #56]	; (8002f80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f48:	e002      	b.n	8002f50 <LoopCopyDataInit>

08002f4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f4e:	3304      	adds	r3, #4

08002f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f54:	d3f9      	bcc.n	8002f4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f56:	4a0b      	ldr	r2, [pc, #44]	; (8002f84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f58:	4c0b      	ldr	r4, [pc, #44]	; (8002f88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f5c:	e001      	b.n	8002f62 <LoopFillZerobss>

08002f5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f60:	3204      	adds	r2, #4

08002f62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f64:	d3fb      	bcc.n	8002f5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f66:	f7ff ffd7 	bl	8002f18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f6a:	f002 fb4f 	bl	800560c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f6e:	f7ff fa4f 	bl	8002410 <main>
  bx  lr    
 8002f72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f7c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002f80:	0800a710 	.word	0x0800a710
  ldr r2, =_sbss
 8002f84:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002f88:	20000424 	.word	0x20000424

08002f8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f8c:	e7fe      	b.n	8002f8c <ADC_IRQHandler>
	...

08002f90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f94:	4b0e      	ldr	r3, [pc, #56]	; (8002fd0 <HAL_Init+0x40>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a0d      	ldr	r2, [pc, #52]	; (8002fd0 <HAL_Init+0x40>)
 8002f9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fa0:	4b0b      	ldr	r3, [pc, #44]	; (8002fd0 <HAL_Init+0x40>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a0a      	ldr	r2, [pc, #40]	; (8002fd0 <HAL_Init+0x40>)
 8002fa6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002faa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fac:	4b08      	ldr	r3, [pc, #32]	; (8002fd0 <HAL_Init+0x40>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a07      	ldr	r2, [pc, #28]	; (8002fd0 <HAL_Init+0x40>)
 8002fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fb8:	2003      	movs	r0, #3
 8002fba:	f000 f94f 	bl	800325c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fbe:	2000      	movs	r0, #0
 8002fc0:	f000 f808 	bl	8002fd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fc4:	f7ff fd08 	bl	80029d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	40023c00 	.word	0x40023c00

08002fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fdc:	4b12      	ldr	r3, [pc, #72]	; (8003028 <HAL_InitTick+0x54>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	4b12      	ldr	r3, [pc, #72]	; (800302c <HAL_InitTick+0x58>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 f967 	bl	80032c6 <HAL_SYSTICK_Config>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e00e      	b.n	8003020 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b0f      	cmp	r3, #15
 8003006:	d80a      	bhi.n	800301e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003008:	2200      	movs	r2, #0
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003010:	f000 f92f 	bl	8003272 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003014:	4a06      	ldr	r2, [pc, #24]	; (8003030 <HAL_InitTick+0x5c>)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800301a:	2300      	movs	r3, #0
 800301c:	e000      	b.n	8003020 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
}
 8003020:	4618      	mov	r0, r3
 8003022:	3708      	adds	r7, #8
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	20000004 	.word	0x20000004
 800302c:	2000000c 	.word	0x2000000c
 8003030:	20000008 	.word	0x20000008

08003034 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003038:	4b06      	ldr	r3, [pc, #24]	; (8003054 <HAL_IncTick+0x20>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	461a      	mov	r2, r3
 800303e:	4b06      	ldr	r3, [pc, #24]	; (8003058 <HAL_IncTick+0x24>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4413      	add	r3, r2
 8003044:	4a04      	ldr	r2, [pc, #16]	; (8003058 <HAL_IncTick+0x24>)
 8003046:	6013      	str	r3, [r2, #0]
}
 8003048:	bf00      	nop
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	2000000c 	.word	0x2000000c
 8003058:	20000410 	.word	0x20000410

0800305c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  return uwTick;
 8003060:	4b03      	ldr	r3, [pc, #12]	; (8003070 <HAL_GetTick+0x14>)
 8003062:	681b      	ldr	r3, [r3, #0]
}
 8003064:	4618      	mov	r0, r3
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	20000410 	.word	0x20000410

08003074 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800307c:	f7ff ffee 	bl	800305c <HAL_GetTick>
 8003080:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800308c:	d005      	beq.n	800309a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800308e:	4b0a      	ldr	r3, [pc, #40]	; (80030b8 <HAL_Delay+0x44>)
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	461a      	mov	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	4413      	add	r3, r2
 8003098:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800309a:	bf00      	nop
 800309c:	f7ff ffde 	bl	800305c <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d8f7      	bhi.n	800309c <HAL_Delay+0x28>
  {
  }
}
 80030ac:	bf00      	nop
 80030ae:	bf00      	nop
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	2000000c 	.word	0x2000000c

080030bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f003 0307 	and.w	r3, r3, #7
 80030ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030cc:	4b0c      	ldr	r3, [pc, #48]	; (8003100 <__NVIC_SetPriorityGrouping+0x44>)
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030d2:	68ba      	ldr	r2, [r7, #8]
 80030d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030d8:	4013      	ands	r3, r2
 80030da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030ee:	4a04      	ldr	r2, [pc, #16]	; (8003100 <__NVIC_SetPriorityGrouping+0x44>)
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	60d3      	str	r3, [r2, #12]
}
 80030f4:	bf00      	nop
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	e000ed00 	.word	0xe000ed00

08003104 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003108:	4b04      	ldr	r3, [pc, #16]	; (800311c <__NVIC_GetPriorityGrouping+0x18>)
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	0a1b      	lsrs	r3, r3, #8
 800310e:	f003 0307 	and.w	r3, r3, #7
}
 8003112:	4618      	mov	r0, r3
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	e000ed00 	.word	0xe000ed00

08003120 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	4603      	mov	r3, r0
 8003128:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800312a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312e:	2b00      	cmp	r3, #0
 8003130:	db0b      	blt.n	800314a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003132:	79fb      	ldrb	r3, [r7, #7]
 8003134:	f003 021f 	and.w	r2, r3, #31
 8003138:	4907      	ldr	r1, [pc, #28]	; (8003158 <__NVIC_EnableIRQ+0x38>)
 800313a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313e:	095b      	lsrs	r3, r3, #5
 8003140:	2001      	movs	r0, #1
 8003142:	fa00 f202 	lsl.w	r2, r0, r2
 8003146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800314a:	bf00      	nop
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	e000e100 	.word	0xe000e100

0800315c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	4603      	mov	r3, r0
 8003164:	6039      	str	r1, [r7, #0]
 8003166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800316c:	2b00      	cmp	r3, #0
 800316e:	db0a      	blt.n	8003186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	b2da      	uxtb	r2, r3
 8003174:	490c      	ldr	r1, [pc, #48]	; (80031a8 <__NVIC_SetPriority+0x4c>)
 8003176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317a:	0112      	lsls	r2, r2, #4
 800317c:	b2d2      	uxtb	r2, r2
 800317e:	440b      	add	r3, r1
 8003180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003184:	e00a      	b.n	800319c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	b2da      	uxtb	r2, r3
 800318a:	4908      	ldr	r1, [pc, #32]	; (80031ac <__NVIC_SetPriority+0x50>)
 800318c:	79fb      	ldrb	r3, [r7, #7]
 800318e:	f003 030f 	and.w	r3, r3, #15
 8003192:	3b04      	subs	r3, #4
 8003194:	0112      	lsls	r2, r2, #4
 8003196:	b2d2      	uxtb	r2, r2
 8003198:	440b      	add	r3, r1
 800319a:	761a      	strb	r2, [r3, #24]
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	e000e100 	.word	0xe000e100
 80031ac:	e000ed00 	.word	0xe000ed00

080031b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b089      	sub	sp, #36	; 0x24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f003 0307 	and.w	r3, r3, #7
 80031c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	f1c3 0307 	rsb	r3, r3, #7
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	bf28      	it	cs
 80031ce:	2304      	movcs	r3, #4
 80031d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	3304      	adds	r3, #4
 80031d6:	2b06      	cmp	r3, #6
 80031d8:	d902      	bls.n	80031e0 <NVIC_EncodePriority+0x30>
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	3b03      	subs	r3, #3
 80031de:	e000      	b.n	80031e2 <NVIC_EncodePriority+0x32>
 80031e0:	2300      	movs	r3, #0
 80031e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	fa02 f303 	lsl.w	r3, r2, r3
 80031ee:	43da      	mvns	r2, r3
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	401a      	ands	r2, r3
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003202:	43d9      	mvns	r1, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003208:	4313      	orrs	r3, r2
         );
}
 800320a:	4618      	mov	r0, r3
 800320c:	3724      	adds	r7, #36	; 0x24
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
	...

08003218 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	3b01      	subs	r3, #1
 8003224:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003228:	d301      	bcc.n	800322e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800322a:	2301      	movs	r3, #1
 800322c:	e00f      	b.n	800324e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800322e:	4a0a      	ldr	r2, [pc, #40]	; (8003258 <SysTick_Config+0x40>)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	3b01      	subs	r3, #1
 8003234:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003236:	210f      	movs	r1, #15
 8003238:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800323c:	f7ff ff8e 	bl	800315c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003240:	4b05      	ldr	r3, [pc, #20]	; (8003258 <SysTick_Config+0x40>)
 8003242:	2200      	movs	r2, #0
 8003244:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003246:	4b04      	ldr	r3, [pc, #16]	; (8003258 <SysTick_Config+0x40>)
 8003248:	2207      	movs	r2, #7
 800324a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	e000e010 	.word	0xe000e010

0800325c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f7ff ff29 	bl	80030bc <__NVIC_SetPriorityGrouping>
}
 800326a:	bf00      	nop
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003272:	b580      	push	{r7, lr}
 8003274:	b086      	sub	sp, #24
 8003276:	af00      	add	r7, sp, #0
 8003278:	4603      	mov	r3, r0
 800327a:	60b9      	str	r1, [r7, #8]
 800327c:	607a      	str	r2, [r7, #4]
 800327e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003280:	2300      	movs	r3, #0
 8003282:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003284:	f7ff ff3e 	bl	8003104 <__NVIC_GetPriorityGrouping>
 8003288:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	68b9      	ldr	r1, [r7, #8]
 800328e:	6978      	ldr	r0, [r7, #20]
 8003290:	f7ff ff8e 	bl	80031b0 <NVIC_EncodePriority>
 8003294:	4602      	mov	r2, r0
 8003296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800329a:	4611      	mov	r1, r2
 800329c:	4618      	mov	r0, r3
 800329e:	f7ff ff5d 	bl	800315c <__NVIC_SetPriority>
}
 80032a2:	bf00      	nop
 80032a4:	3718      	adds	r7, #24
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b082      	sub	sp, #8
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	4603      	mov	r3, r0
 80032b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff ff31 	bl	8003120 <__NVIC_EnableIRQ>
}
 80032be:	bf00      	nop
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b082      	sub	sp, #8
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7ff ffa2 	bl	8003218 <SysTick_Config>
 80032d4:	4603      	mov	r3, r0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
	...

080032e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b089      	sub	sp, #36	; 0x24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032ea:	2300      	movs	r3, #0
 80032ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032ee:	2300      	movs	r3, #0
 80032f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032f2:	2300      	movs	r3, #0
 80032f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032f6:	2300      	movs	r3, #0
 80032f8:	61fb      	str	r3, [r7, #28]
 80032fa:	e165      	b.n	80035c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032fc:	2201      	movs	r2, #1
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	4013      	ands	r3, r2
 800330e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	429a      	cmp	r2, r3
 8003316:	f040 8154 	bne.w	80035c2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f003 0303 	and.w	r3, r3, #3
 8003322:	2b01      	cmp	r3, #1
 8003324:	d005      	beq.n	8003332 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800332e:	2b02      	cmp	r3, #2
 8003330:	d130      	bne.n	8003394 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	2203      	movs	r2, #3
 800333e:	fa02 f303 	lsl.w	r3, r2, r3
 8003342:	43db      	mvns	r3, r3
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	4013      	ands	r3, r2
 8003348:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	68da      	ldr	r2, [r3, #12]
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	fa02 f303 	lsl.w	r3, r2, r3
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	4313      	orrs	r3, r2
 800335a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003368:	2201      	movs	r2, #1
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	43db      	mvns	r3, r3
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	4013      	ands	r3, r2
 8003376:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	091b      	lsrs	r3, r3, #4
 800337e:	f003 0201 	and.w	r2, r3, #1
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	4313      	orrs	r3, r2
 800338c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f003 0303 	and.w	r3, r3, #3
 800339c:	2b03      	cmp	r3, #3
 800339e:	d017      	beq.n	80033d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	2203      	movs	r2, #3
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	43db      	mvns	r3, r3
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	4013      	ands	r3, r2
 80033b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	689a      	ldr	r2, [r3, #8]
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	005b      	lsls	r3, r3, #1
 80033c0:	fa02 f303 	lsl.w	r3, r2, r3
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f003 0303 	and.w	r3, r3, #3
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d123      	bne.n	8003424 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	08da      	lsrs	r2, r3, #3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	3208      	adds	r2, #8
 80033e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	220f      	movs	r2, #15
 80033f4:	fa02 f303 	lsl.w	r3, r2, r3
 80033f8:	43db      	mvns	r3, r3
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	4013      	ands	r3, r2
 80033fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	691a      	ldr	r2, [r3, #16]
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	f003 0307 	and.w	r3, r3, #7
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	4313      	orrs	r3, r2
 8003414:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	08da      	lsrs	r2, r3, #3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	3208      	adds	r2, #8
 800341e:	69b9      	ldr	r1, [r7, #24]
 8003420:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	2203      	movs	r2, #3
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	43db      	mvns	r3, r3
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	4013      	ands	r3, r2
 800343a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f003 0203 	and.w	r2, r3, #3
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	4313      	orrs	r3, r2
 8003450:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003460:	2b00      	cmp	r3, #0
 8003462:	f000 80ae 	beq.w	80035c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003466:	2300      	movs	r3, #0
 8003468:	60fb      	str	r3, [r7, #12]
 800346a:	4b5d      	ldr	r3, [pc, #372]	; (80035e0 <HAL_GPIO_Init+0x300>)
 800346c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346e:	4a5c      	ldr	r2, [pc, #368]	; (80035e0 <HAL_GPIO_Init+0x300>)
 8003470:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003474:	6453      	str	r3, [r2, #68]	; 0x44
 8003476:	4b5a      	ldr	r3, [pc, #360]	; (80035e0 <HAL_GPIO_Init+0x300>)
 8003478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800347e:	60fb      	str	r3, [r7, #12]
 8003480:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003482:	4a58      	ldr	r2, [pc, #352]	; (80035e4 <HAL_GPIO_Init+0x304>)
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	089b      	lsrs	r3, r3, #2
 8003488:	3302      	adds	r3, #2
 800348a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800348e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	f003 0303 	and.w	r3, r3, #3
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	220f      	movs	r2, #15
 800349a:	fa02 f303 	lsl.w	r3, r2, r3
 800349e:	43db      	mvns	r3, r3
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	4013      	ands	r3, r2
 80034a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a4f      	ldr	r2, [pc, #316]	; (80035e8 <HAL_GPIO_Init+0x308>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d025      	beq.n	80034fa <HAL_GPIO_Init+0x21a>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a4e      	ldr	r2, [pc, #312]	; (80035ec <HAL_GPIO_Init+0x30c>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d01f      	beq.n	80034f6 <HAL_GPIO_Init+0x216>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a4d      	ldr	r2, [pc, #308]	; (80035f0 <HAL_GPIO_Init+0x310>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d019      	beq.n	80034f2 <HAL_GPIO_Init+0x212>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a4c      	ldr	r2, [pc, #304]	; (80035f4 <HAL_GPIO_Init+0x314>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d013      	beq.n	80034ee <HAL_GPIO_Init+0x20e>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a4b      	ldr	r2, [pc, #300]	; (80035f8 <HAL_GPIO_Init+0x318>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d00d      	beq.n	80034ea <HAL_GPIO_Init+0x20a>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a4a      	ldr	r2, [pc, #296]	; (80035fc <HAL_GPIO_Init+0x31c>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d007      	beq.n	80034e6 <HAL_GPIO_Init+0x206>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a49      	ldr	r2, [pc, #292]	; (8003600 <HAL_GPIO_Init+0x320>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d101      	bne.n	80034e2 <HAL_GPIO_Init+0x202>
 80034de:	2306      	movs	r3, #6
 80034e0:	e00c      	b.n	80034fc <HAL_GPIO_Init+0x21c>
 80034e2:	2307      	movs	r3, #7
 80034e4:	e00a      	b.n	80034fc <HAL_GPIO_Init+0x21c>
 80034e6:	2305      	movs	r3, #5
 80034e8:	e008      	b.n	80034fc <HAL_GPIO_Init+0x21c>
 80034ea:	2304      	movs	r3, #4
 80034ec:	e006      	b.n	80034fc <HAL_GPIO_Init+0x21c>
 80034ee:	2303      	movs	r3, #3
 80034f0:	e004      	b.n	80034fc <HAL_GPIO_Init+0x21c>
 80034f2:	2302      	movs	r3, #2
 80034f4:	e002      	b.n	80034fc <HAL_GPIO_Init+0x21c>
 80034f6:	2301      	movs	r3, #1
 80034f8:	e000      	b.n	80034fc <HAL_GPIO_Init+0x21c>
 80034fa:	2300      	movs	r3, #0
 80034fc:	69fa      	ldr	r2, [r7, #28]
 80034fe:	f002 0203 	and.w	r2, r2, #3
 8003502:	0092      	lsls	r2, r2, #2
 8003504:	4093      	lsls	r3, r2
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	4313      	orrs	r3, r2
 800350a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800350c:	4935      	ldr	r1, [pc, #212]	; (80035e4 <HAL_GPIO_Init+0x304>)
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	089b      	lsrs	r3, r3, #2
 8003512:	3302      	adds	r3, #2
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800351a:	4b3a      	ldr	r3, [pc, #232]	; (8003604 <HAL_GPIO_Init+0x324>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	43db      	mvns	r3, r3
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	4013      	ands	r3, r2
 8003528:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d003      	beq.n	800353e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	4313      	orrs	r3, r2
 800353c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800353e:	4a31      	ldr	r2, [pc, #196]	; (8003604 <HAL_GPIO_Init+0x324>)
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003544:	4b2f      	ldr	r3, [pc, #188]	; (8003604 <HAL_GPIO_Init+0x324>)
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	43db      	mvns	r3, r3
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	4013      	ands	r3, r2
 8003552:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d003      	beq.n	8003568 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	4313      	orrs	r3, r2
 8003566:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003568:	4a26      	ldr	r2, [pc, #152]	; (8003604 <HAL_GPIO_Init+0x324>)
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800356e:	4b25      	ldr	r3, [pc, #148]	; (8003604 <HAL_GPIO_Init+0x324>)
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	43db      	mvns	r3, r3
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	4013      	ands	r3, r2
 800357c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d003      	beq.n	8003592 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	4313      	orrs	r3, r2
 8003590:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003592:	4a1c      	ldr	r2, [pc, #112]	; (8003604 <HAL_GPIO_Init+0x324>)
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003598:	4b1a      	ldr	r3, [pc, #104]	; (8003604 <HAL_GPIO_Init+0x324>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	43db      	mvns	r3, r3
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	4013      	ands	r3, r2
 80035a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d003      	beq.n	80035bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035bc:	4a11      	ldr	r2, [pc, #68]	; (8003604 <HAL_GPIO_Init+0x324>)
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	3301      	adds	r3, #1
 80035c6:	61fb      	str	r3, [r7, #28]
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	2b0f      	cmp	r3, #15
 80035cc:	f67f ae96 	bls.w	80032fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035d0:	bf00      	nop
 80035d2:	bf00      	nop
 80035d4:	3724      	adds	r7, #36	; 0x24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	40023800 	.word	0x40023800
 80035e4:	40013800 	.word	0x40013800
 80035e8:	40020000 	.word	0x40020000
 80035ec:	40020400 	.word	0x40020400
 80035f0:	40020800 	.word	0x40020800
 80035f4:	40020c00 	.word	0x40020c00
 80035f8:	40021000 	.word	0x40021000
 80035fc:	40021400 	.word	0x40021400
 8003600:	40021800 	.word	0x40021800
 8003604:	40013c00 	.word	0x40013c00

08003608 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	460b      	mov	r3, r1
 8003612:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	691a      	ldr	r2, [r3, #16]
 8003618:	887b      	ldrh	r3, [r7, #2]
 800361a:	4013      	ands	r3, r2
 800361c:	2b00      	cmp	r3, #0
 800361e:	d002      	beq.n	8003626 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003620:	2301      	movs	r3, #1
 8003622:	73fb      	strb	r3, [r7, #15]
 8003624:	e001      	b.n	800362a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003626:	2300      	movs	r3, #0
 8003628:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800362a:	7bfb      	ldrb	r3, [r7, #15]
}
 800362c:	4618      	mov	r0, r3
 800362e:	3714      	adds	r7, #20
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	460b      	mov	r3, r1
 8003642:	807b      	strh	r3, [r7, #2]
 8003644:	4613      	mov	r3, r2
 8003646:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003648:	787b      	ldrb	r3, [r7, #1]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800364e:	887a      	ldrh	r2, [r7, #2]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003654:	e003      	b.n	800365e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003656:	887b      	ldrh	r3, [r7, #2]
 8003658:	041a      	lsls	r2, r3, #16
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	619a      	str	r2, [r3, #24]
}
 800365e:	bf00      	nop
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
	...

0800366c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	4603      	mov	r3, r0
 8003674:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003676:	4b08      	ldr	r3, [pc, #32]	; (8003698 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003678:	695a      	ldr	r2, [r3, #20]
 800367a:	88fb      	ldrh	r3, [r7, #6]
 800367c:	4013      	ands	r3, r2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d006      	beq.n	8003690 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003682:	4a05      	ldr	r2, [pc, #20]	; (8003698 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003684:	88fb      	ldrh	r3, [r7, #6]
 8003686:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003688:	88fb      	ldrh	r3, [r7, #6]
 800368a:	4618      	mov	r0, r3
 800368c:	f7fe fdd4 	bl	8002238 <HAL_GPIO_EXTI_Callback>
  }
}
 8003690:	bf00      	nop
 8003692:	3708      	adds	r7, #8
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	40013c00 	.word	0x40013c00

0800369c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d101      	bne.n	80036b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e0cc      	b.n	800384a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036b0:	4b68      	ldr	r3, [pc, #416]	; (8003854 <HAL_RCC_ClockConfig+0x1b8>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 030f 	and.w	r3, r3, #15
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d90c      	bls.n	80036d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036be:	4b65      	ldr	r3, [pc, #404]	; (8003854 <HAL_RCC_ClockConfig+0x1b8>)
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	b2d2      	uxtb	r2, r2
 80036c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036c6:	4b63      	ldr	r3, [pc, #396]	; (8003854 <HAL_RCC_ClockConfig+0x1b8>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 030f 	and.w	r3, r3, #15
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d001      	beq.n	80036d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e0b8      	b.n	800384a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d020      	beq.n	8003726 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0304 	and.w	r3, r3, #4
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d005      	beq.n	80036fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036f0:	4b59      	ldr	r3, [pc, #356]	; (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	4a58      	ldr	r2, [pc, #352]	; (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 80036f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0308 	and.w	r3, r3, #8
 8003704:	2b00      	cmp	r3, #0
 8003706:	d005      	beq.n	8003714 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003708:	4b53      	ldr	r3, [pc, #332]	; (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	4a52      	ldr	r2, [pc, #328]	; (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 800370e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003712:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003714:	4b50      	ldr	r3, [pc, #320]	; (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	494d      	ldr	r1, [pc, #308]	; (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 8003722:	4313      	orrs	r3, r2
 8003724:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b00      	cmp	r3, #0
 8003730:	d044      	beq.n	80037bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d107      	bne.n	800374a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800373a:	4b47      	ldr	r3, [pc, #284]	; (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d119      	bne.n	800377a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e07f      	b.n	800384a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	2b02      	cmp	r3, #2
 8003750:	d003      	beq.n	800375a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003756:	2b03      	cmp	r3, #3
 8003758:	d107      	bne.n	800376a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800375a:	4b3f      	ldr	r3, [pc, #252]	; (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d109      	bne.n	800377a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e06f      	b.n	800384a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800376a:	4b3b      	ldr	r3, [pc, #236]	; (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e067      	b.n	800384a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800377a:	4b37      	ldr	r3, [pc, #220]	; (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f023 0203 	bic.w	r2, r3, #3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	4934      	ldr	r1, [pc, #208]	; (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 8003788:	4313      	orrs	r3, r2
 800378a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800378c:	f7ff fc66 	bl	800305c <HAL_GetTick>
 8003790:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003792:	e00a      	b.n	80037aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003794:	f7ff fc62 	bl	800305c <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	f241 3288 	movw	r2, #5000	; 0x1388
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e04f      	b.n	800384a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037aa:	4b2b      	ldr	r3, [pc, #172]	; (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f003 020c 	and.w	r2, r3, #12
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d1eb      	bne.n	8003794 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037bc:	4b25      	ldr	r3, [pc, #148]	; (8003854 <HAL_RCC_ClockConfig+0x1b8>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 030f 	and.w	r3, r3, #15
 80037c4:	683a      	ldr	r2, [r7, #0]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d20c      	bcs.n	80037e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ca:	4b22      	ldr	r3, [pc, #136]	; (8003854 <HAL_RCC_ClockConfig+0x1b8>)
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	b2d2      	uxtb	r2, r2
 80037d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037d2:	4b20      	ldr	r3, [pc, #128]	; (8003854 <HAL_RCC_ClockConfig+0x1b8>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 030f 	and.w	r3, r3, #15
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d001      	beq.n	80037e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e032      	b.n	800384a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0304 	and.w	r3, r3, #4
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d008      	beq.n	8003802 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037f0:	4b19      	ldr	r3, [pc, #100]	; (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	4916      	ldr	r1, [pc, #88]	; (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0308 	and.w	r3, r3, #8
 800380a:	2b00      	cmp	r3, #0
 800380c:	d009      	beq.n	8003822 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800380e:	4b12      	ldr	r3, [pc, #72]	; (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	490e      	ldr	r1, [pc, #56]	; (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 800381e:	4313      	orrs	r3, r2
 8003820:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003822:	f000 f855 	bl	80038d0 <HAL_RCC_GetSysClockFreq>
 8003826:	4602      	mov	r2, r0
 8003828:	4b0b      	ldr	r3, [pc, #44]	; (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	091b      	lsrs	r3, r3, #4
 800382e:	f003 030f 	and.w	r3, r3, #15
 8003832:	490a      	ldr	r1, [pc, #40]	; (800385c <HAL_RCC_ClockConfig+0x1c0>)
 8003834:	5ccb      	ldrb	r3, [r1, r3]
 8003836:	fa22 f303 	lsr.w	r3, r2, r3
 800383a:	4a09      	ldr	r2, [pc, #36]	; (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 800383c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800383e:	4b09      	ldr	r3, [pc, #36]	; (8003864 <HAL_RCC_ClockConfig+0x1c8>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4618      	mov	r0, r3
 8003844:	f7ff fbc6 	bl	8002fd4 <HAL_InitTick>

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	40023c00 	.word	0x40023c00
 8003858:	40023800 	.word	0x40023800
 800385c:	0800a1e8 	.word	0x0800a1e8
 8003860:	20000004 	.word	0x20000004
 8003864:	20000008 	.word	0x20000008

08003868 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800386c:	4b03      	ldr	r3, [pc, #12]	; (800387c <HAL_RCC_GetHCLKFreq+0x14>)
 800386e:	681b      	ldr	r3, [r3, #0]
}
 8003870:	4618      	mov	r0, r3
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	20000004 	.word	0x20000004

08003880 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003884:	f7ff fff0 	bl	8003868 <HAL_RCC_GetHCLKFreq>
 8003888:	4602      	mov	r2, r0
 800388a:	4b05      	ldr	r3, [pc, #20]	; (80038a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	0a9b      	lsrs	r3, r3, #10
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	4903      	ldr	r1, [pc, #12]	; (80038a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003896:	5ccb      	ldrb	r3, [r1, r3]
 8003898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800389c:	4618      	mov	r0, r3
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40023800 	.word	0x40023800
 80038a4:	0800a1f8 	.word	0x0800a1f8

080038a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038ac:	f7ff ffdc 	bl	8003868 <HAL_RCC_GetHCLKFreq>
 80038b0:	4602      	mov	r2, r0
 80038b2:	4b05      	ldr	r3, [pc, #20]	; (80038c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	0b5b      	lsrs	r3, r3, #13
 80038b8:	f003 0307 	and.w	r3, r3, #7
 80038bc:	4903      	ldr	r1, [pc, #12]	; (80038cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80038be:	5ccb      	ldrb	r3, [r1, r3]
 80038c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	40023800 	.word	0x40023800
 80038cc:	0800a1f8 	.word	0x0800a1f8

080038d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038d4:	b0ae      	sub	sp, #184	; 0xb8
 80038d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80038d8:	2300      	movs	r3, #0
 80038da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80038de:	2300      	movs	r3, #0
 80038e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80038e4:	2300      	movs	r3, #0
 80038e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80038ea:	2300      	movs	r3, #0
 80038ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80038f0:	2300      	movs	r3, #0
 80038f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038f6:	4bcb      	ldr	r3, [pc, #812]	; (8003c24 <HAL_RCC_GetSysClockFreq+0x354>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 030c 	and.w	r3, r3, #12
 80038fe:	2b0c      	cmp	r3, #12
 8003900:	f200 8206 	bhi.w	8003d10 <HAL_RCC_GetSysClockFreq+0x440>
 8003904:	a201      	add	r2, pc, #4	; (adr r2, 800390c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800390a:	bf00      	nop
 800390c:	08003941 	.word	0x08003941
 8003910:	08003d11 	.word	0x08003d11
 8003914:	08003d11 	.word	0x08003d11
 8003918:	08003d11 	.word	0x08003d11
 800391c:	08003949 	.word	0x08003949
 8003920:	08003d11 	.word	0x08003d11
 8003924:	08003d11 	.word	0x08003d11
 8003928:	08003d11 	.word	0x08003d11
 800392c:	08003951 	.word	0x08003951
 8003930:	08003d11 	.word	0x08003d11
 8003934:	08003d11 	.word	0x08003d11
 8003938:	08003d11 	.word	0x08003d11
 800393c:	08003b41 	.word	0x08003b41
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003940:	4bb9      	ldr	r3, [pc, #740]	; (8003c28 <HAL_RCC_GetSysClockFreq+0x358>)
 8003942:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003946:	e1e7      	b.n	8003d18 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003948:	4bb8      	ldr	r3, [pc, #736]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x35c>)
 800394a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800394e:	e1e3      	b.n	8003d18 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003950:	4bb4      	ldr	r3, [pc, #720]	; (8003c24 <HAL_RCC_GetSysClockFreq+0x354>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003958:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800395c:	4bb1      	ldr	r3, [pc, #708]	; (8003c24 <HAL_RCC_GetSysClockFreq+0x354>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d071      	beq.n	8003a4c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003968:	4bae      	ldr	r3, [pc, #696]	; (8003c24 <HAL_RCC_GetSysClockFreq+0x354>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	099b      	lsrs	r3, r3, #6
 800396e:	2200      	movs	r2, #0
 8003970:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003974:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003978:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800397c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003980:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003984:	2300      	movs	r3, #0
 8003986:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800398a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800398e:	4622      	mov	r2, r4
 8003990:	462b      	mov	r3, r5
 8003992:	f04f 0000 	mov.w	r0, #0
 8003996:	f04f 0100 	mov.w	r1, #0
 800399a:	0159      	lsls	r1, r3, #5
 800399c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039a0:	0150      	lsls	r0, r2, #5
 80039a2:	4602      	mov	r2, r0
 80039a4:	460b      	mov	r3, r1
 80039a6:	4621      	mov	r1, r4
 80039a8:	1a51      	subs	r1, r2, r1
 80039aa:	6439      	str	r1, [r7, #64]	; 0x40
 80039ac:	4629      	mov	r1, r5
 80039ae:	eb63 0301 	sbc.w	r3, r3, r1
 80039b2:	647b      	str	r3, [r7, #68]	; 0x44
 80039b4:	f04f 0200 	mov.w	r2, #0
 80039b8:	f04f 0300 	mov.w	r3, #0
 80039bc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80039c0:	4649      	mov	r1, r9
 80039c2:	018b      	lsls	r3, r1, #6
 80039c4:	4641      	mov	r1, r8
 80039c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039ca:	4641      	mov	r1, r8
 80039cc:	018a      	lsls	r2, r1, #6
 80039ce:	4641      	mov	r1, r8
 80039d0:	1a51      	subs	r1, r2, r1
 80039d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80039d4:	4649      	mov	r1, r9
 80039d6:	eb63 0301 	sbc.w	r3, r3, r1
 80039da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039dc:	f04f 0200 	mov.w	r2, #0
 80039e0:	f04f 0300 	mov.w	r3, #0
 80039e4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80039e8:	4649      	mov	r1, r9
 80039ea:	00cb      	lsls	r3, r1, #3
 80039ec:	4641      	mov	r1, r8
 80039ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039f2:	4641      	mov	r1, r8
 80039f4:	00ca      	lsls	r2, r1, #3
 80039f6:	4610      	mov	r0, r2
 80039f8:	4619      	mov	r1, r3
 80039fa:	4603      	mov	r3, r0
 80039fc:	4622      	mov	r2, r4
 80039fe:	189b      	adds	r3, r3, r2
 8003a00:	633b      	str	r3, [r7, #48]	; 0x30
 8003a02:	462b      	mov	r3, r5
 8003a04:	460a      	mov	r2, r1
 8003a06:	eb42 0303 	adc.w	r3, r2, r3
 8003a0a:	637b      	str	r3, [r7, #52]	; 0x34
 8003a0c:	f04f 0200 	mov.w	r2, #0
 8003a10:	f04f 0300 	mov.w	r3, #0
 8003a14:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a18:	4629      	mov	r1, r5
 8003a1a:	024b      	lsls	r3, r1, #9
 8003a1c:	4621      	mov	r1, r4
 8003a1e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a22:	4621      	mov	r1, r4
 8003a24:	024a      	lsls	r2, r1, #9
 8003a26:	4610      	mov	r0, r2
 8003a28:	4619      	mov	r1, r3
 8003a2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a34:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003a38:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003a3c:	f7fd f944 	bl	8000cc8 <__aeabi_uldivmod>
 8003a40:	4602      	mov	r2, r0
 8003a42:	460b      	mov	r3, r1
 8003a44:	4613      	mov	r3, r2
 8003a46:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a4a:	e067      	b.n	8003b1c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a4c:	4b75      	ldr	r3, [pc, #468]	; (8003c24 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	099b      	lsrs	r3, r3, #6
 8003a52:	2200      	movs	r2, #0
 8003a54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a58:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003a5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a64:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a66:	2300      	movs	r3, #0
 8003a68:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003a6a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003a6e:	4622      	mov	r2, r4
 8003a70:	462b      	mov	r3, r5
 8003a72:	f04f 0000 	mov.w	r0, #0
 8003a76:	f04f 0100 	mov.w	r1, #0
 8003a7a:	0159      	lsls	r1, r3, #5
 8003a7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a80:	0150      	lsls	r0, r2, #5
 8003a82:	4602      	mov	r2, r0
 8003a84:	460b      	mov	r3, r1
 8003a86:	4621      	mov	r1, r4
 8003a88:	1a51      	subs	r1, r2, r1
 8003a8a:	62b9      	str	r1, [r7, #40]	; 0x28
 8003a8c:	4629      	mov	r1, r5
 8003a8e:	eb63 0301 	sbc.w	r3, r3, r1
 8003a92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a94:	f04f 0200 	mov.w	r2, #0
 8003a98:	f04f 0300 	mov.w	r3, #0
 8003a9c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003aa0:	4649      	mov	r1, r9
 8003aa2:	018b      	lsls	r3, r1, #6
 8003aa4:	4641      	mov	r1, r8
 8003aa6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003aaa:	4641      	mov	r1, r8
 8003aac:	018a      	lsls	r2, r1, #6
 8003aae:	4641      	mov	r1, r8
 8003ab0:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ab4:	4649      	mov	r1, r9
 8003ab6:	eb63 0b01 	sbc.w	fp, r3, r1
 8003aba:	f04f 0200 	mov.w	r2, #0
 8003abe:	f04f 0300 	mov.w	r3, #0
 8003ac2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ac6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003aca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ace:	4692      	mov	sl, r2
 8003ad0:	469b      	mov	fp, r3
 8003ad2:	4623      	mov	r3, r4
 8003ad4:	eb1a 0303 	adds.w	r3, sl, r3
 8003ad8:	623b      	str	r3, [r7, #32]
 8003ada:	462b      	mov	r3, r5
 8003adc:	eb4b 0303 	adc.w	r3, fp, r3
 8003ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ae2:	f04f 0200 	mov.w	r2, #0
 8003ae6:	f04f 0300 	mov.w	r3, #0
 8003aea:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003aee:	4629      	mov	r1, r5
 8003af0:	028b      	lsls	r3, r1, #10
 8003af2:	4621      	mov	r1, r4
 8003af4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003af8:	4621      	mov	r1, r4
 8003afa:	028a      	lsls	r2, r1, #10
 8003afc:	4610      	mov	r0, r2
 8003afe:	4619      	mov	r1, r3
 8003b00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b04:	2200      	movs	r2, #0
 8003b06:	673b      	str	r3, [r7, #112]	; 0x70
 8003b08:	677a      	str	r2, [r7, #116]	; 0x74
 8003b0a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003b0e:	f7fd f8db 	bl	8000cc8 <__aeabi_uldivmod>
 8003b12:	4602      	mov	r2, r0
 8003b14:	460b      	mov	r3, r1
 8003b16:	4613      	mov	r3, r2
 8003b18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b1c:	4b41      	ldr	r3, [pc, #260]	; (8003c24 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	0c1b      	lsrs	r3, r3, #16
 8003b22:	f003 0303 	and.w	r3, r3, #3
 8003b26:	3301      	adds	r3, #1
 8003b28:	005b      	lsls	r3, r3, #1
 8003b2a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003b2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003b3e:	e0eb      	b.n	8003d18 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b40:	4b38      	ldr	r3, [pc, #224]	; (8003c24 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b4c:	4b35      	ldr	r3, [pc, #212]	; (8003c24 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d06b      	beq.n	8003c30 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b58:	4b32      	ldr	r3, [pc, #200]	; (8003c24 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	099b      	lsrs	r3, r3, #6
 8003b5e:	2200      	movs	r2, #0
 8003b60:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b62:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b6a:	663b      	str	r3, [r7, #96]	; 0x60
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	667b      	str	r3, [r7, #100]	; 0x64
 8003b70:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003b74:	4622      	mov	r2, r4
 8003b76:	462b      	mov	r3, r5
 8003b78:	f04f 0000 	mov.w	r0, #0
 8003b7c:	f04f 0100 	mov.w	r1, #0
 8003b80:	0159      	lsls	r1, r3, #5
 8003b82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b86:	0150      	lsls	r0, r2, #5
 8003b88:	4602      	mov	r2, r0
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	4621      	mov	r1, r4
 8003b8e:	1a51      	subs	r1, r2, r1
 8003b90:	61b9      	str	r1, [r7, #24]
 8003b92:	4629      	mov	r1, r5
 8003b94:	eb63 0301 	sbc.w	r3, r3, r1
 8003b98:	61fb      	str	r3, [r7, #28]
 8003b9a:	f04f 0200 	mov.w	r2, #0
 8003b9e:	f04f 0300 	mov.w	r3, #0
 8003ba2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003ba6:	4659      	mov	r1, fp
 8003ba8:	018b      	lsls	r3, r1, #6
 8003baa:	4651      	mov	r1, sl
 8003bac:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bb0:	4651      	mov	r1, sl
 8003bb2:	018a      	lsls	r2, r1, #6
 8003bb4:	4651      	mov	r1, sl
 8003bb6:	ebb2 0801 	subs.w	r8, r2, r1
 8003bba:	4659      	mov	r1, fp
 8003bbc:	eb63 0901 	sbc.w	r9, r3, r1
 8003bc0:	f04f 0200 	mov.w	r2, #0
 8003bc4:	f04f 0300 	mov.w	r3, #0
 8003bc8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bcc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bd0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bd4:	4690      	mov	r8, r2
 8003bd6:	4699      	mov	r9, r3
 8003bd8:	4623      	mov	r3, r4
 8003bda:	eb18 0303 	adds.w	r3, r8, r3
 8003bde:	613b      	str	r3, [r7, #16]
 8003be0:	462b      	mov	r3, r5
 8003be2:	eb49 0303 	adc.w	r3, r9, r3
 8003be6:	617b      	str	r3, [r7, #20]
 8003be8:	f04f 0200 	mov.w	r2, #0
 8003bec:	f04f 0300 	mov.w	r3, #0
 8003bf0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003bf4:	4629      	mov	r1, r5
 8003bf6:	024b      	lsls	r3, r1, #9
 8003bf8:	4621      	mov	r1, r4
 8003bfa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003bfe:	4621      	mov	r1, r4
 8003c00:	024a      	lsls	r2, r1, #9
 8003c02:	4610      	mov	r0, r2
 8003c04:	4619      	mov	r1, r3
 8003c06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c0e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003c10:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c14:	f7fd f858 	bl	8000cc8 <__aeabi_uldivmod>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c22:	e065      	b.n	8003cf0 <HAL_RCC_GetSysClockFreq+0x420>
 8003c24:	40023800 	.word	0x40023800
 8003c28:	00f42400 	.word	0x00f42400
 8003c2c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c30:	4b3d      	ldr	r3, [pc, #244]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x458>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	099b      	lsrs	r3, r3, #6
 8003c36:	2200      	movs	r2, #0
 8003c38:	4618      	mov	r0, r3
 8003c3a:	4611      	mov	r1, r2
 8003c3c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c40:	653b      	str	r3, [r7, #80]	; 0x50
 8003c42:	2300      	movs	r3, #0
 8003c44:	657b      	str	r3, [r7, #84]	; 0x54
 8003c46:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003c4a:	4642      	mov	r2, r8
 8003c4c:	464b      	mov	r3, r9
 8003c4e:	f04f 0000 	mov.w	r0, #0
 8003c52:	f04f 0100 	mov.w	r1, #0
 8003c56:	0159      	lsls	r1, r3, #5
 8003c58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c5c:	0150      	lsls	r0, r2, #5
 8003c5e:	4602      	mov	r2, r0
 8003c60:	460b      	mov	r3, r1
 8003c62:	4641      	mov	r1, r8
 8003c64:	1a51      	subs	r1, r2, r1
 8003c66:	60b9      	str	r1, [r7, #8]
 8003c68:	4649      	mov	r1, r9
 8003c6a:	eb63 0301 	sbc.w	r3, r3, r1
 8003c6e:	60fb      	str	r3, [r7, #12]
 8003c70:	f04f 0200 	mov.w	r2, #0
 8003c74:	f04f 0300 	mov.w	r3, #0
 8003c78:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003c7c:	4659      	mov	r1, fp
 8003c7e:	018b      	lsls	r3, r1, #6
 8003c80:	4651      	mov	r1, sl
 8003c82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c86:	4651      	mov	r1, sl
 8003c88:	018a      	lsls	r2, r1, #6
 8003c8a:	4651      	mov	r1, sl
 8003c8c:	1a54      	subs	r4, r2, r1
 8003c8e:	4659      	mov	r1, fp
 8003c90:	eb63 0501 	sbc.w	r5, r3, r1
 8003c94:	f04f 0200 	mov.w	r2, #0
 8003c98:	f04f 0300 	mov.w	r3, #0
 8003c9c:	00eb      	lsls	r3, r5, #3
 8003c9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ca2:	00e2      	lsls	r2, r4, #3
 8003ca4:	4614      	mov	r4, r2
 8003ca6:	461d      	mov	r5, r3
 8003ca8:	4643      	mov	r3, r8
 8003caa:	18e3      	adds	r3, r4, r3
 8003cac:	603b      	str	r3, [r7, #0]
 8003cae:	464b      	mov	r3, r9
 8003cb0:	eb45 0303 	adc.w	r3, r5, r3
 8003cb4:	607b      	str	r3, [r7, #4]
 8003cb6:	f04f 0200 	mov.w	r2, #0
 8003cba:	f04f 0300 	mov.w	r3, #0
 8003cbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cc2:	4629      	mov	r1, r5
 8003cc4:	028b      	lsls	r3, r1, #10
 8003cc6:	4621      	mov	r1, r4
 8003cc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ccc:	4621      	mov	r1, r4
 8003cce:	028a      	lsls	r2, r1, #10
 8003cd0:	4610      	mov	r0, r2
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003cd8:	2200      	movs	r2, #0
 8003cda:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cdc:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003cde:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003ce2:	f7fc fff1 	bl	8000cc8 <__aeabi_uldivmod>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	460b      	mov	r3, r1
 8003cea:	4613      	mov	r3, r2
 8003cec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003cf0:	4b0d      	ldr	r3, [pc, #52]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x458>)
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	0f1b      	lsrs	r3, r3, #28
 8003cf6:	f003 0307 	and.w	r3, r3, #7
 8003cfa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003cfe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003d0e:	e003      	b.n	8003d18 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d10:	4b06      	ldr	r3, [pc, #24]	; (8003d2c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003d12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003d16:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	37b8      	adds	r7, #184	; 0xb8
 8003d20:	46bd      	mov	sp, r7
 8003d22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d26:	bf00      	nop
 8003d28:	40023800 	.word	0x40023800
 8003d2c:	00f42400 	.word	0x00f42400

08003d30 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e28d      	b.n	800425e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f000 8083 	beq.w	8003e56 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003d50:	4b94      	ldr	r3, [pc, #592]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f003 030c 	and.w	r3, r3, #12
 8003d58:	2b04      	cmp	r3, #4
 8003d5a:	d019      	beq.n	8003d90 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d5c:	4b91      	ldr	r3, [pc, #580]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003d64:	2b08      	cmp	r3, #8
 8003d66:	d106      	bne.n	8003d76 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d68:	4b8e      	ldr	r3, [pc, #568]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d74:	d00c      	beq.n	8003d90 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d76:	4b8b      	ldr	r3, [pc, #556]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d7e:	2b0c      	cmp	r3, #12
 8003d80:	d112      	bne.n	8003da8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d82:	4b88      	ldr	r3, [pc, #544]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d8e:	d10b      	bne.n	8003da8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d90:	4b84      	ldr	r3, [pc, #528]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d05b      	beq.n	8003e54 <HAL_RCC_OscConfig+0x124>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d157      	bne.n	8003e54 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e25a      	b.n	800425e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003db0:	d106      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x90>
 8003db2:	4b7c      	ldr	r3, [pc, #496]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a7b      	ldr	r2, [pc, #492]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dbc:	6013      	str	r3, [r2, #0]
 8003dbe:	e01d      	b.n	8003dfc <HAL_RCC_OscConfig+0xcc>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dc8:	d10c      	bne.n	8003de4 <HAL_RCC_OscConfig+0xb4>
 8003dca:	4b76      	ldr	r3, [pc, #472]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a75      	ldr	r2, [pc, #468]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003dd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dd4:	6013      	str	r3, [r2, #0]
 8003dd6:	4b73      	ldr	r3, [pc, #460]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a72      	ldr	r2, [pc, #456]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003de0:	6013      	str	r3, [r2, #0]
 8003de2:	e00b      	b.n	8003dfc <HAL_RCC_OscConfig+0xcc>
 8003de4:	4b6f      	ldr	r3, [pc, #444]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a6e      	ldr	r2, [pc, #440]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003dea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dee:	6013      	str	r3, [r2, #0]
 8003df0:	4b6c      	ldr	r3, [pc, #432]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a6b      	ldr	r2, [pc, #428]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003df6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d013      	beq.n	8003e2c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e04:	f7ff f92a 	bl	800305c <HAL_GetTick>
 8003e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e0c:	f7ff f926 	bl	800305c <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b64      	cmp	r3, #100	; 0x64
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e21f      	b.n	800425e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e1e:	4b61      	ldr	r3, [pc, #388]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d0f0      	beq.n	8003e0c <HAL_RCC_OscConfig+0xdc>
 8003e2a:	e014      	b.n	8003e56 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e2c:	f7ff f916 	bl	800305c <HAL_GetTick>
 8003e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e32:	e008      	b.n	8003e46 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e34:	f7ff f912 	bl	800305c <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b64      	cmp	r3, #100	; 0x64
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e20b      	b.n	800425e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e46:	4b57      	ldr	r3, [pc, #348]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1f0      	bne.n	8003e34 <HAL_RCC_OscConfig+0x104>
 8003e52:	e000      	b.n	8003e56 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d06f      	beq.n	8003f42 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003e62:	4b50      	ldr	r3, [pc, #320]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f003 030c 	and.w	r3, r3, #12
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d017      	beq.n	8003e9e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e6e:	4b4d      	ldr	r3, [pc, #308]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003e76:	2b08      	cmp	r3, #8
 8003e78:	d105      	bne.n	8003e86 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e7a:	4b4a      	ldr	r3, [pc, #296]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00b      	beq.n	8003e9e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e86:	4b47      	ldr	r3, [pc, #284]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e8e:	2b0c      	cmp	r3, #12
 8003e90:	d11c      	bne.n	8003ecc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e92:	4b44      	ldr	r3, [pc, #272]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d116      	bne.n	8003ecc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e9e:	4b41      	ldr	r3, [pc, #260]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d005      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x186>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d001      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e1d3      	b.n	800425e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eb6:	4b3b      	ldr	r3, [pc, #236]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	00db      	lsls	r3, r3, #3
 8003ec4:	4937      	ldr	r1, [pc, #220]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eca:	e03a      	b.n	8003f42 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d020      	beq.n	8003f16 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ed4:	4b34      	ldr	r3, [pc, #208]	; (8003fa8 <HAL_RCC_OscConfig+0x278>)
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eda:	f7ff f8bf 	bl	800305c <HAL_GetTick>
 8003ede:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ee0:	e008      	b.n	8003ef4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ee2:	f7ff f8bb 	bl	800305c <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d901      	bls.n	8003ef4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e1b4      	b.n	800425e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ef4:	4b2b      	ldr	r3, [pc, #172]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d0f0      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f00:	4b28      	ldr	r3, [pc, #160]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	00db      	lsls	r3, r3, #3
 8003f0e:	4925      	ldr	r1, [pc, #148]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	600b      	str	r3, [r1, #0]
 8003f14:	e015      	b.n	8003f42 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f16:	4b24      	ldr	r3, [pc, #144]	; (8003fa8 <HAL_RCC_OscConfig+0x278>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f1c:	f7ff f89e 	bl	800305c <HAL_GetTick>
 8003f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f22:	e008      	b.n	8003f36 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f24:	f7ff f89a 	bl	800305c <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d901      	bls.n	8003f36 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e193      	b.n	800425e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f36:	4b1b      	ldr	r3, [pc, #108]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1f0      	bne.n	8003f24 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0308 	and.w	r3, r3, #8
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d036      	beq.n	8003fbc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d016      	beq.n	8003f84 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f56:	4b15      	ldr	r3, [pc, #84]	; (8003fac <HAL_RCC_OscConfig+0x27c>)
 8003f58:	2201      	movs	r2, #1
 8003f5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f5c:	f7ff f87e 	bl	800305c <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f62:	e008      	b.n	8003f76 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f64:	f7ff f87a 	bl	800305c <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e173      	b.n	800425e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f76:	4b0b      	ldr	r3, [pc, #44]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003f78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d0f0      	beq.n	8003f64 <HAL_RCC_OscConfig+0x234>
 8003f82:	e01b      	b.n	8003fbc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f84:	4b09      	ldr	r3, [pc, #36]	; (8003fac <HAL_RCC_OscConfig+0x27c>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f8a:	f7ff f867 	bl	800305c <HAL_GetTick>
 8003f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f90:	e00e      	b.n	8003fb0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f92:	f7ff f863 	bl	800305c <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d907      	bls.n	8003fb0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e15c      	b.n	800425e <HAL_RCC_OscConfig+0x52e>
 8003fa4:	40023800 	.word	0x40023800
 8003fa8:	42470000 	.word	0x42470000
 8003fac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fb0:	4b8a      	ldr	r3, [pc, #552]	; (80041dc <HAL_RCC_OscConfig+0x4ac>)
 8003fb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1ea      	bne.n	8003f92 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0304 	and.w	r3, r3, #4
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f000 8097 	beq.w	80040f8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fce:	4b83      	ldr	r3, [pc, #524]	; (80041dc <HAL_RCC_OscConfig+0x4ac>)
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10f      	bne.n	8003ffa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fda:	2300      	movs	r3, #0
 8003fdc:	60bb      	str	r3, [r7, #8]
 8003fde:	4b7f      	ldr	r3, [pc, #508]	; (80041dc <HAL_RCC_OscConfig+0x4ac>)
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe2:	4a7e      	ldr	r2, [pc, #504]	; (80041dc <HAL_RCC_OscConfig+0x4ac>)
 8003fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8003fea:	4b7c      	ldr	r3, [pc, #496]	; (80041dc <HAL_RCC_OscConfig+0x4ac>)
 8003fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff2:	60bb      	str	r3, [r7, #8]
 8003ff4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ffa:	4b79      	ldr	r3, [pc, #484]	; (80041e0 <HAL_RCC_OscConfig+0x4b0>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004002:	2b00      	cmp	r3, #0
 8004004:	d118      	bne.n	8004038 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004006:	4b76      	ldr	r3, [pc, #472]	; (80041e0 <HAL_RCC_OscConfig+0x4b0>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a75      	ldr	r2, [pc, #468]	; (80041e0 <HAL_RCC_OscConfig+0x4b0>)
 800400c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004010:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004012:	f7ff f823 	bl	800305c <HAL_GetTick>
 8004016:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004018:	e008      	b.n	800402c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800401a:	f7ff f81f 	bl	800305c <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d901      	bls.n	800402c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e118      	b.n	800425e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800402c:	4b6c      	ldr	r3, [pc, #432]	; (80041e0 <HAL_RCC_OscConfig+0x4b0>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004034:	2b00      	cmp	r3, #0
 8004036:	d0f0      	beq.n	800401a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d106      	bne.n	800404e <HAL_RCC_OscConfig+0x31e>
 8004040:	4b66      	ldr	r3, [pc, #408]	; (80041dc <HAL_RCC_OscConfig+0x4ac>)
 8004042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004044:	4a65      	ldr	r2, [pc, #404]	; (80041dc <HAL_RCC_OscConfig+0x4ac>)
 8004046:	f043 0301 	orr.w	r3, r3, #1
 800404a:	6713      	str	r3, [r2, #112]	; 0x70
 800404c:	e01c      	b.n	8004088 <HAL_RCC_OscConfig+0x358>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	2b05      	cmp	r3, #5
 8004054:	d10c      	bne.n	8004070 <HAL_RCC_OscConfig+0x340>
 8004056:	4b61      	ldr	r3, [pc, #388]	; (80041dc <HAL_RCC_OscConfig+0x4ac>)
 8004058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405a:	4a60      	ldr	r2, [pc, #384]	; (80041dc <HAL_RCC_OscConfig+0x4ac>)
 800405c:	f043 0304 	orr.w	r3, r3, #4
 8004060:	6713      	str	r3, [r2, #112]	; 0x70
 8004062:	4b5e      	ldr	r3, [pc, #376]	; (80041dc <HAL_RCC_OscConfig+0x4ac>)
 8004064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004066:	4a5d      	ldr	r2, [pc, #372]	; (80041dc <HAL_RCC_OscConfig+0x4ac>)
 8004068:	f043 0301 	orr.w	r3, r3, #1
 800406c:	6713      	str	r3, [r2, #112]	; 0x70
 800406e:	e00b      	b.n	8004088 <HAL_RCC_OscConfig+0x358>
 8004070:	4b5a      	ldr	r3, [pc, #360]	; (80041dc <HAL_RCC_OscConfig+0x4ac>)
 8004072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004074:	4a59      	ldr	r2, [pc, #356]	; (80041dc <HAL_RCC_OscConfig+0x4ac>)
 8004076:	f023 0301 	bic.w	r3, r3, #1
 800407a:	6713      	str	r3, [r2, #112]	; 0x70
 800407c:	4b57      	ldr	r3, [pc, #348]	; (80041dc <HAL_RCC_OscConfig+0x4ac>)
 800407e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004080:	4a56      	ldr	r2, [pc, #344]	; (80041dc <HAL_RCC_OscConfig+0x4ac>)
 8004082:	f023 0304 	bic.w	r3, r3, #4
 8004086:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d015      	beq.n	80040bc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004090:	f7fe ffe4 	bl	800305c <HAL_GetTick>
 8004094:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004096:	e00a      	b.n	80040ae <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004098:	f7fe ffe0 	bl	800305c <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e0d7      	b.n	800425e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ae:	4b4b      	ldr	r3, [pc, #300]	; (80041dc <HAL_RCC_OscConfig+0x4ac>)
 80040b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d0ee      	beq.n	8004098 <HAL_RCC_OscConfig+0x368>
 80040ba:	e014      	b.n	80040e6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040bc:	f7fe ffce 	bl	800305c <HAL_GetTick>
 80040c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040c2:	e00a      	b.n	80040da <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040c4:	f7fe ffca 	bl	800305c <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e0c1      	b.n	800425e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040da:	4b40      	ldr	r3, [pc, #256]	; (80041dc <HAL_RCC_OscConfig+0x4ac>)
 80040dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1ee      	bne.n	80040c4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040e6:	7dfb      	ldrb	r3, [r7, #23]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d105      	bne.n	80040f8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040ec:	4b3b      	ldr	r3, [pc, #236]	; (80041dc <HAL_RCC_OscConfig+0x4ac>)
 80040ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f0:	4a3a      	ldr	r2, [pc, #232]	; (80041dc <HAL_RCC_OscConfig+0x4ac>)
 80040f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f000 80ad 	beq.w	800425c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004102:	4b36      	ldr	r3, [pc, #216]	; (80041dc <HAL_RCC_OscConfig+0x4ac>)
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f003 030c 	and.w	r3, r3, #12
 800410a:	2b08      	cmp	r3, #8
 800410c:	d060      	beq.n	80041d0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	2b02      	cmp	r3, #2
 8004114:	d145      	bne.n	80041a2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004116:	4b33      	ldr	r3, [pc, #204]	; (80041e4 <HAL_RCC_OscConfig+0x4b4>)
 8004118:	2200      	movs	r2, #0
 800411a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800411c:	f7fe ff9e 	bl	800305c <HAL_GetTick>
 8004120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004122:	e008      	b.n	8004136 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004124:	f7fe ff9a 	bl	800305c <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b02      	cmp	r3, #2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e093      	b.n	800425e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004136:	4b29      	ldr	r3, [pc, #164]	; (80041dc <HAL_RCC_OscConfig+0x4ac>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1f0      	bne.n	8004124 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	69da      	ldr	r2, [r3, #28]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	431a      	orrs	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004150:	019b      	lsls	r3, r3, #6
 8004152:	431a      	orrs	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004158:	085b      	lsrs	r3, r3, #1
 800415a:	3b01      	subs	r3, #1
 800415c:	041b      	lsls	r3, r3, #16
 800415e:	431a      	orrs	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004164:	061b      	lsls	r3, r3, #24
 8004166:	431a      	orrs	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416c:	071b      	lsls	r3, r3, #28
 800416e:	491b      	ldr	r1, [pc, #108]	; (80041dc <HAL_RCC_OscConfig+0x4ac>)
 8004170:	4313      	orrs	r3, r2
 8004172:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004174:	4b1b      	ldr	r3, [pc, #108]	; (80041e4 <HAL_RCC_OscConfig+0x4b4>)
 8004176:	2201      	movs	r2, #1
 8004178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800417a:	f7fe ff6f 	bl	800305c <HAL_GetTick>
 800417e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004180:	e008      	b.n	8004194 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004182:	f7fe ff6b 	bl	800305c <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	2b02      	cmp	r3, #2
 800418e:	d901      	bls.n	8004194 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e064      	b.n	800425e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004194:	4b11      	ldr	r3, [pc, #68]	; (80041dc <HAL_RCC_OscConfig+0x4ac>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d0f0      	beq.n	8004182 <HAL_RCC_OscConfig+0x452>
 80041a0:	e05c      	b.n	800425c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041a2:	4b10      	ldr	r3, [pc, #64]	; (80041e4 <HAL_RCC_OscConfig+0x4b4>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a8:	f7fe ff58 	bl	800305c <HAL_GetTick>
 80041ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ae:	e008      	b.n	80041c2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041b0:	f7fe ff54 	bl	800305c <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d901      	bls.n	80041c2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e04d      	b.n	800425e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041c2:	4b06      	ldr	r3, [pc, #24]	; (80041dc <HAL_RCC_OscConfig+0x4ac>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1f0      	bne.n	80041b0 <HAL_RCC_OscConfig+0x480>
 80041ce:	e045      	b.n	800425c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d107      	bne.n	80041e8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e040      	b.n	800425e <HAL_RCC_OscConfig+0x52e>
 80041dc:	40023800 	.word	0x40023800
 80041e0:	40007000 	.word	0x40007000
 80041e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041e8:	4b1f      	ldr	r3, [pc, #124]	; (8004268 <HAL_RCC_OscConfig+0x538>)
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d030      	beq.n	8004258 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004200:	429a      	cmp	r2, r3
 8004202:	d129      	bne.n	8004258 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800420e:	429a      	cmp	r2, r3
 8004210:	d122      	bne.n	8004258 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004218:	4013      	ands	r3, r2
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800421e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004220:	4293      	cmp	r3, r2
 8004222:	d119      	bne.n	8004258 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422e:	085b      	lsrs	r3, r3, #1
 8004230:	3b01      	subs	r3, #1
 8004232:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004234:	429a      	cmp	r2, r3
 8004236:	d10f      	bne.n	8004258 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004242:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004244:	429a      	cmp	r2, r3
 8004246:	d107      	bne.n	8004258 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004252:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004254:	429a      	cmp	r2, r3
 8004256:	d001      	beq.n	800425c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e000      	b.n	800425e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3718      	adds	r7, #24
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	40023800 	.word	0x40023800

0800426c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e041      	b.n	8004302 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d106      	bne.n	8004298 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f7fe fbc8 	bl	8002a28 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2202      	movs	r2, #2
 800429c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	3304      	adds	r3, #4
 80042a8:	4619      	mov	r1, r3
 80042aa:	4610      	mov	r0, r2
 80042ac:	f000 fb66 	bl	800497c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3708      	adds	r7, #8
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
	...

0800430c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004316:	2300      	movs	r3, #0
 8004318:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d104      	bne.n	800432a <HAL_TIM_IC_Start_IT+0x1e>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004326:	b2db      	uxtb	r3, r3
 8004328:	e013      	b.n	8004352 <HAL_TIM_IC_Start_IT+0x46>
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	2b04      	cmp	r3, #4
 800432e:	d104      	bne.n	800433a <HAL_TIM_IC_Start_IT+0x2e>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004336:	b2db      	uxtb	r3, r3
 8004338:	e00b      	b.n	8004352 <HAL_TIM_IC_Start_IT+0x46>
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	2b08      	cmp	r3, #8
 800433e:	d104      	bne.n	800434a <HAL_TIM_IC_Start_IT+0x3e>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004346:	b2db      	uxtb	r3, r3
 8004348:	e003      	b.n	8004352 <HAL_TIM_IC_Start_IT+0x46>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004350:	b2db      	uxtb	r3, r3
 8004352:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d104      	bne.n	8004364 <HAL_TIM_IC_Start_IT+0x58>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004360:	b2db      	uxtb	r3, r3
 8004362:	e013      	b.n	800438c <HAL_TIM_IC_Start_IT+0x80>
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	2b04      	cmp	r3, #4
 8004368:	d104      	bne.n	8004374 <HAL_TIM_IC_Start_IT+0x68>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004370:	b2db      	uxtb	r3, r3
 8004372:	e00b      	b.n	800438c <HAL_TIM_IC_Start_IT+0x80>
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	2b08      	cmp	r3, #8
 8004378:	d104      	bne.n	8004384 <HAL_TIM_IC_Start_IT+0x78>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004380:	b2db      	uxtb	r3, r3
 8004382:	e003      	b.n	800438c <HAL_TIM_IC_Start_IT+0x80>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800438a:	b2db      	uxtb	r3, r3
 800438c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800438e:	7bbb      	ldrb	r3, [r7, #14]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d102      	bne.n	800439a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004394:	7b7b      	ldrb	r3, [r7, #13]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d001      	beq.n	800439e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e0cc      	b.n	8004538 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d104      	bne.n	80043ae <HAL_TIM_IC_Start_IT+0xa2>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2202      	movs	r2, #2
 80043a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043ac:	e013      	b.n	80043d6 <HAL_TIM_IC_Start_IT+0xca>
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	2b04      	cmp	r3, #4
 80043b2:	d104      	bne.n	80043be <HAL_TIM_IC_Start_IT+0xb2>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2202      	movs	r2, #2
 80043b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043bc:	e00b      	b.n	80043d6 <HAL_TIM_IC_Start_IT+0xca>
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	2b08      	cmp	r3, #8
 80043c2:	d104      	bne.n	80043ce <HAL_TIM_IC_Start_IT+0xc2>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2202      	movs	r2, #2
 80043c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043cc:	e003      	b.n	80043d6 <HAL_TIM_IC_Start_IT+0xca>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2202      	movs	r2, #2
 80043d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d104      	bne.n	80043e6 <HAL_TIM_IC_Start_IT+0xda>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2202      	movs	r2, #2
 80043e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043e4:	e013      	b.n	800440e <HAL_TIM_IC_Start_IT+0x102>
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	2b04      	cmp	r3, #4
 80043ea:	d104      	bne.n	80043f6 <HAL_TIM_IC_Start_IT+0xea>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2202      	movs	r2, #2
 80043f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043f4:	e00b      	b.n	800440e <HAL_TIM_IC_Start_IT+0x102>
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	2b08      	cmp	r3, #8
 80043fa:	d104      	bne.n	8004406 <HAL_TIM_IC_Start_IT+0xfa>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2202      	movs	r2, #2
 8004400:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004404:	e003      	b.n	800440e <HAL_TIM_IC_Start_IT+0x102>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2202      	movs	r2, #2
 800440a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	2b0c      	cmp	r3, #12
 8004412:	d841      	bhi.n	8004498 <HAL_TIM_IC_Start_IT+0x18c>
 8004414:	a201      	add	r2, pc, #4	; (adr r2, 800441c <HAL_TIM_IC_Start_IT+0x110>)
 8004416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800441a:	bf00      	nop
 800441c:	08004451 	.word	0x08004451
 8004420:	08004499 	.word	0x08004499
 8004424:	08004499 	.word	0x08004499
 8004428:	08004499 	.word	0x08004499
 800442c:	08004463 	.word	0x08004463
 8004430:	08004499 	.word	0x08004499
 8004434:	08004499 	.word	0x08004499
 8004438:	08004499 	.word	0x08004499
 800443c:	08004475 	.word	0x08004475
 8004440:	08004499 	.word	0x08004499
 8004444:	08004499 	.word	0x08004499
 8004448:	08004499 	.word	0x08004499
 800444c:	08004487 	.word	0x08004487
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68da      	ldr	r2, [r3, #12]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f042 0202 	orr.w	r2, r2, #2
 800445e:	60da      	str	r2, [r3, #12]
      break;
 8004460:	e01d      	b.n	800449e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68da      	ldr	r2, [r3, #12]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f042 0204 	orr.w	r2, r2, #4
 8004470:	60da      	str	r2, [r3, #12]
      break;
 8004472:	e014      	b.n	800449e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68da      	ldr	r2, [r3, #12]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f042 0208 	orr.w	r2, r2, #8
 8004482:	60da      	str	r2, [r3, #12]
      break;
 8004484:	e00b      	b.n	800449e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68da      	ldr	r2, [r3, #12]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f042 0210 	orr.w	r2, r2, #16
 8004494:	60da      	str	r2, [r3, #12]
      break;
 8004496:	e002      	b.n	800449e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	73fb      	strb	r3, [r7, #15]
      break;
 800449c:	bf00      	nop
  }

  if (status == HAL_OK)
 800449e:	7bfb      	ldrb	r3, [r7, #15]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d148      	bne.n	8004536 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2201      	movs	r2, #1
 80044aa:	6839      	ldr	r1, [r7, #0]
 80044ac:	4618      	mov	r0, r3
 80044ae:	f000 fc2f 	bl	8004d10 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a22      	ldr	r2, [pc, #136]	; (8004540 <HAL_TIM_IC_Start_IT+0x234>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d022      	beq.n	8004502 <HAL_TIM_IC_Start_IT+0x1f6>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c4:	d01d      	beq.n	8004502 <HAL_TIM_IC_Start_IT+0x1f6>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a1e      	ldr	r2, [pc, #120]	; (8004544 <HAL_TIM_IC_Start_IT+0x238>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d018      	beq.n	8004502 <HAL_TIM_IC_Start_IT+0x1f6>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a1c      	ldr	r2, [pc, #112]	; (8004548 <HAL_TIM_IC_Start_IT+0x23c>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d013      	beq.n	8004502 <HAL_TIM_IC_Start_IT+0x1f6>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a1b      	ldr	r2, [pc, #108]	; (800454c <HAL_TIM_IC_Start_IT+0x240>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d00e      	beq.n	8004502 <HAL_TIM_IC_Start_IT+0x1f6>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a19      	ldr	r2, [pc, #100]	; (8004550 <HAL_TIM_IC_Start_IT+0x244>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d009      	beq.n	8004502 <HAL_TIM_IC_Start_IT+0x1f6>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a18      	ldr	r2, [pc, #96]	; (8004554 <HAL_TIM_IC_Start_IT+0x248>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d004      	beq.n	8004502 <HAL_TIM_IC_Start_IT+0x1f6>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a16      	ldr	r2, [pc, #88]	; (8004558 <HAL_TIM_IC_Start_IT+0x24c>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d111      	bne.n	8004526 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f003 0307 	and.w	r3, r3, #7
 800450c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	2b06      	cmp	r3, #6
 8004512:	d010      	beq.n	8004536 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f042 0201 	orr.w	r2, r2, #1
 8004522:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004524:	e007      	b.n	8004536 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f042 0201 	orr.w	r2, r2, #1
 8004534:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004536:	7bfb      	ldrb	r3, [r7, #15]
}
 8004538:	4618      	mov	r0, r3
 800453a:	3710      	adds	r7, #16
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	40010000 	.word	0x40010000
 8004544:	40000400 	.word	0x40000400
 8004548:	40000800 	.word	0x40000800
 800454c:	40000c00 	.word	0x40000c00
 8004550:	40010400 	.word	0x40010400
 8004554:	40014000 	.word	0x40014000
 8004558:	40001800 	.word	0x40001800

0800455c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b02      	cmp	r3, #2
 8004570:	d122      	bne.n	80045b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b02      	cmp	r3, #2
 800457e:	d11b      	bne.n	80045b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f06f 0202 	mvn.w	r2, #2
 8004588:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2201      	movs	r2, #1
 800458e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	f003 0303 	and.w	r3, r3, #3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d003      	beq.n	80045a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f7fc fe7a 	bl	8001298 <HAL_TIM_IC_CaptureCallback>
 80045a4:	e005      	b.n	80045b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f9ca 	bl	8004940 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 f9d1 	bl	8004954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	f003 0304 	and.w	r3, r3, #4
 80045c2:	2b04      	cmp	r3, #4
 80045c4:	d122      	bne.n	800460c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	f003 0304 	and.w	r3, r3, #4
 80045d0:	2b04      	cmp	r3, #4
 80045d2:	d11b      	bne.n	800460c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f06f 0204 	mvn.w	r2, #4
 80045dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2202      	movs	r2, #2
 80045e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d003      	beq.n	80045fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f7fc fe50 	bl	8001298 <HAL_TIM_IC_CaptureCallback>
 80045f8:	e005      	b.n	8004606 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 f9a0 	bl	8004940 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 f9a7 	bl	8004954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	f003 0308 	and.w	r3, r3, #8
 8004616:	2b08      	cmp	r3, #8
 8004618:	d122      	bne.n	8004660 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	f003 0308 	and.w	r3, r3, #8
 8004624:	2b08      	cmp	r3, #8
 8004626:	d11b      	bne.n	8004660 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f06f 0208 	mvn.w	r2, #8
 8004630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2204      	movs	r2, #4
 8004636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	69db      	ldr	r3, [r3, #28]
 800463e:	f003 0303 	and.w	r3, r3, #3
 8004642:	2b00      	cmp	r3, #0
 8004644:	d003      	beq.n	800464e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f7fc fe26 	bl	8001298 <HAL_TIM_IC_CaptureCallback>
 800464c:	e005      	b.n	800465a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f976 	bl	8004940 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 f97d 	bl	8004954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	f003 0310 	and.w	r3, r3, #16
 800466a:	2b10      	cmp	r3, #16
 800466c:	d122      	bne.n	80046b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	f003 0310 	and.w	r3, r3, #16
 8004678:	2b10      	cmp	r3, #16
 800467a:	d11b      	bne.n	80046b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f06f 0210 	mvn.w	r2, #16
 8004684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2208      	movs	r2, #8
 800468a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	69db      	ldr	r3, [r3, #28]
 8004692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f7fc fdfc 	bl	8001298 <HAL_TIM_IC_CaptureCallback>
 80046a0:	e005      	b.n	80046ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f94c 	bl	8004940 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 f953 	bl	8004954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d10e      	bne.n	80046e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	f003 0301 	and.w	r3, r3, #1
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d107      	bne.n	80046e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f06f 0201 	mvn.w	r2, #1
 80046d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 f926 	bl	800492c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ea:	2b80      	cmp	r3, #128	; 0x80
 80046ec:	d10e      	bne.n	800470c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f8:	2b80      	cmp	r3, #128	; 0x80
 80046fa:	d107      	bne.n	800470c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 fbae 	bl	8004e68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004716:	2b40      	cmp	r3, #64	; 0x40
 8004718:	d10e      	bne.n	8004738 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004724:	2b40      	cmp	r3, #64	; 0x40
 8004726:	d107      	bne.n	8004738 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f918 	bl	8004968 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	f003 0320 	and.w	r3, r3, #32
 8004742:	2b20      	cmp	r3, #32
 8004744:	d10e      	bne.n	8004764 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	f003 0320 	and.w	r3, r3, #32
 8004750:	2b20      	cmp	r3, #32
 8004752:	d107      	bne.n	8004764 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f06f 0220 	mvn.w	r2, #32
 800475c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 fb78 	bl	8004e54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004764:	bf00      	nop
 8004766:	3708      	adds	r7, #8
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004778:	2300      	movs	r3, #0
 800477a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004782:	2b01      	cmp	r3, #1
 8004784:	d101      	bne.n	800478a <HAL_TIM_IC_ConfigChannel+0x1e>
 8004786:	2302      	movs	r3, #2
 8004788:	e088      	b.n	800489c <HAL_TIM_IC_ConfigChannel+0x130>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d11b      	bne.n	80047d0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6818      	ldr	r0, [r3, #0]
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	6819      	ldr	r1, [r3, #0]
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	685a      	ldr	r2, [r3, #4]
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	f000 f988 	bl	8004abc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	699a      	ldr	r2, [r3, #24]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f022 020c 	bic.w	r2, r2, #12
 80047ba:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6999      	ldr	r1, [r3, #24]
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	689a      	ldr	r2, [r3, #8]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	430a      	orrs	r2, r1
 80047cc:	619a      	str	r2, [r3, #24]
 80047ce:	e060      	b.n	8004892 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2b04      	cmp	r3, #4
 80047d4:	d11c      	bne.n	8004810 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6818      	ldr	r0, [r3, #0]
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	6819      	ldr	r1, [r3, #0]
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	685a      	ldr	r2, [r3, #4]
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	f000 f9dd 	bl	8004ba4 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	699a      	ldr	r2, [r3, #24]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80047f8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	6999      	ldr	r1, [r3, #24]
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	021a      	lsls	r2, r3, #8
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	430a      	orrs	r2, r1
 800480c:	619a      	str	r2, [r3, #24]
 800480e:	e040      	b.n	8004892 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2b08      	cmp	r3, #8
 8004814:	d11b      	bne.n	800484e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6818      	ldr	r0, [r3, #0]
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	6819      	ldr	r1, [r3, #0]
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	685a      	ldr	r2, [r3, #4]
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	f000 f9fa 	bl	8004c1e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	69da      	ldr	r2, [r3, #28]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f022 020c 	bic.w	r2, r2, #12
 8004838:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	69d9      	ldr	r1, [r3, #28]
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	689a      	ldr	r2, [r3, #8]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	430a      	orrs	r2, r1
 800484a:	61da      	str	r2, [r3, #28]
 800484c:	e021      	b.n	8004892 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2b0c      	cmp	r3, #12
 8004852:	d11c      	bne.n	800488e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6818      	ldr	r0, [r3, #0]
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	6819      	ldr	r1, [r3, #0]
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	685a      	ldr	r2, [r3, #4]
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	f000 fa17 	bl	8004c96 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	69da      	ldr	r2, [r3, #28]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004876:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	69d9      	ldr	r1, [r3, #28]
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	021a      	lsls	r2, r3, #8
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	430a      	orrs	r2, r1
 800488a:	61da      	str	r2, [r3, #28]
 800488c:	e001      	b.n	8004892 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800489a:	7dfb      	ldrb	r3, [r7, #23]
}
 800489c:	4618      	mov	r0, r3
 800489e:	3718      	adds	r7, #24
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80048ae:	2300      	movs	r3, #0
 80048b0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	2b0c      	cmp	r3, #12
 80048b6:	d831      	bhi.n	800491c <HAL_TIM_ReadCapturedValue+0x78>
 80048b8:	a201      	add	r2, pc, #4	; (adr r2, 80048c0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80048ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048be:	bf00      	nop
 80048c0:	080048f5 	.word	0x080048f5
 80048c4:	0800491d 	.word	0x0800491d
 80048c8:	0800491d 	.word	0x0800491d
 80048cc:	0800491d 	.word	0x0800491d
 80048d0:	080048ff 	.word	0x080048ff
 80048d4:	0800491d 	.word	0x0800491d
 80048d8:	0800491d 	.word	0x0800491d
 80048dc:	0800491d 	.word	0x0800491d
 80048e0:	08004909 	.word	0x08004909
 80048e4:	0800491d 	.word	0x0800491d
 80048e8:	0800491d 	.word	0x0800491d
 80048ec:	0800491d 	.word	0x0800491d
 80048f0:	08004913 	.word	0x08004913
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048fa:	60fb      	str	r3, [r7, #12]

      break;
 80048fc:	e00f      	b.n	800491e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004904:	60fb      	str	r3, [r7, #12]

      break;
 8004906:	e00a      	b.n	800491e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800490e:	60fb      	str	r3, [r7, #12]

      break;
 8004910:	e005      	b.n	800491e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004918:	60fb      	str	r3, [r7, #12]

      break;
 800491a:	e000      	b.n	800491e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800491c:	bf00      	nop
  }

  return tmpreg;
 800491e:	68fb      	ldr	r3, [r7, #12]
}
 8004920:	4618      	mov	r0, r3
 8004922:	3714      	adds	r7, #20
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004948:	bf00      	nop
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800495c:	bf00      	nop
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004970:	bf00      	nop
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a40      	ldr	r2, [pc, #256]	; (8004a90 <TIM_Base_SetConfig+0x114>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d013      	beq.n	80049bc <TIM_Base_SetConfig+0x40>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800499a:	d00f      	beq.n	80049bc <TIM_Base_SetConfig+0x40>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a3d      	ldr	r2, [pc, #244]	; (8004a94 <TIM_Base_SetConfig+0x118>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d00b      	beq.n	80049bc <TIM_Base_SetConfig+0x40>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a3c      	ldr	r2, [pc, #240]	; (8004a98 <TIM_Base_SetConfig+0x11c>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d007      	beq.n	80049bc <TIM_Base_SetConfig+0x40>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a3b      	ldr	r2, [pc, #236]	; (8004a9c <TIM_Base_SetConfig+0x120>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d003      	beq.n	80049bc <TIM_Base_SetConfig+0x40>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a3a      	ldr	r2, [pc, #232]	; (8004aa0 <TIM_Base_SetConfig+0x124>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d108      	bne.n	80049ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a2f      	ldr	r2, [pc, #188]	; (8004a90 <TIM_Base_SetConfig+0x114>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d02b      	beq.n	8004a2e <TIM_Base_SetConfig+0xb2>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049dc:	d027      	beq.n	8004a2e <TIM_Base_SetConfig+0xb2>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a2c      	ldr	r2, [pc, #176]	; (8004a94 <TIM_Base_SetConfig+0x118>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d023      	beq.n	8004a2e <TIM_Base_SetConfig+0xb2>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a2b      	ldr	r2, [pc, #172]	; (8004a98 <TIM_Base_SetConfig+0x11c>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d01f      	beq.n	8004a2e <TIM_Base_SetConfig+0xb2>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a2a      	ldr	r2, [pc, #168]	; (8004a9c <TIM_Base_SetConfig+0x120>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d01b      	beq.n	8004a2e <TIM_Base_SetConfig+0xb2>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a29      	ldr	r2, [pc, #164]	; (8004aa0 <TIM_Base_SetConfig+0x124>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d017      	beq.n	8004a2e <TIM_Base_SetConfig+0xb2>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a28      	ldr	r2, [pc, #160]	; (8004aa4 <TIM_Base_SetConfig+0x128>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d013      	beq.n	8004a2e <TIM_Base_SetConfig+0xb2>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a27      	ldr	r2, [pc, #156]	; (8004aa8 <TIM_Base_SetConfig+0x12c>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d00f      	beq.n	8004a2e <TIM_Base_SetConfig+0xb2>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a26      	ldr	r2, [pc, #152]	; (8004aac <TIM_Base_SetConfig+0x130>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d00b      	beq.n	8004a2e <TIM_Base_SetConfig+0xb2>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a25      	ldr	r2, [pc, #148]	; (8004ab0 <TIM_Base_SetConfig+0x134>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d007      	beq.n	8004a2e <TIM_Base_SetConfig+0xb2>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a24      	ldr	r2, [pc, #144]	; (8004ab4 <TIM_Base_SetConfig+0x138>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d003      	beq.n	8004a2e <TIM_Base_SetConfig+0xb2>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a23      	ldr	r2, [pc, #140]	; (8004ab8 <TIM_Base_SetConfig+0x13c>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d108      	bne.n	8004a40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	689a      	ldr	r2, [r3, #8]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a0a      	ldr	r2, [pc, #40]	; (8004a90 <TIM_Base_SetConfig+0x114>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d003      	beq.n	8004a74 <TIM_Base_SetConfig+0xf8>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a0c      	ldr	r2, [pc, #48]	; (8004aa0 <TIM_Base_SetConfig+0x124>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d103      	bne.n	8004a7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	691a      	ldr	r2, [r3, #16]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	615a      	str	r2, [r3, #20]
}
 8004a82:	bf00      	nop
 8004a84:	3714      	adds	r7, #20
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	40010000 	.word	0x40010000
 8004a94:	40000400 	.word	0x40000400
 8004a98:	40000800 	.word	0x40000800
 8004a9c:	40000c00 	.word	0x40000c00
 8004aa0:	40010400 	.word	0x40010400
 8004aa4:	40014000 	.word	0x40014000
 8004aa8:	40014400 	.word	0x40014400
 8004aac:	40014800 	.word	0x40014800
 8004ab0:	40001800 	.word	0x40001800
 8004ab4:	40001c00 	.word	0x40001c00
 8004ab8:	40002000 	.word	0x40002000

08004abc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b087      	sub	sp, #28
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
 8004ac8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	f023 0201 	bic.w	r2, r3, #1
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6a1b      	ldr	r3, [r3, #32]
 8004ae0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	4a28      	ldr	r2, [pc, #160]	; (8004b88 <TIM_TI1_SetConfig+0xcc>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d01b      	beq.n	8004b22 <TIM_TI1_SetConfig+0x66>
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004af0:	d017      	beq.n	8004b22 <TIM_TI1_SetConfig+0x66>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	4a25      	ldr	r2, [pc, #148]	; (8004b8c <TIM_TI1_SetConfig+0xd0>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d013      	beq.n	8004b22 <TIM_TI1_SetConfig+0x66>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	4a24      	ldr	r2, [pc, #144]	; (8004b90 <TIM_TI1_SetConfig+0xd4>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d00f      	beq.n	8004b22 <TIM_TI1_SetConfig+0x66>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	4a23      	ldr	r2, [pc, #140]	; (8004b94 <TIM_TI1_SetConfig+0xd8>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d00b      	beq.n	8004b22 <TIM_TI1_SetConfig+0x66>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	4a22      	ldr	r2, [pc, #136]	; (8004b98 <TIM_TI1_SetConfig+0xdc>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d007      	beq.n	8004b22 <TIM_TI1_SetConfig+0x66>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	4a21      	ldr	r2, [pc, #132]	; (8004b9c <TIM_TI1_SetConfig+0xe0>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d003      	beq.n	8004b22 <TIM_TI1_SetConfig+0x66>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	4a20      	ldr	r2, [pc, #128]	; (8004ba0 <TIM_TI1_SetConfig+0xe4>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d101      	bne.n	8004b26 <TIM_TI1_SetConfig+0x6a>
 8004b22:	2301      	movs	r3, #1
 8004b24:	e000      	b.n	8004b28 <TIM_TI1_SetConfig+0x6c>
 8004b26:	2300      	movs	r3, #0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d008      	beq.n	8004b3e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	f023 0303 	bic.w	r3, r3, #3
 8004b32:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004b34:	697a      	ldr	r2, [r7, #20]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	617b      	str	r3, [r7, #20]
 8004b3c:	e003      	b.n	8004b46 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	f043 0301 	orr.w	r3, r3, #1
 8004b44:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	011b      	lsls	r3, r3, #4
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	f023 030a 	bic.w	r3, r3, #10
 8004b60:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	f003 030a 	and.w	r3, r3, #10
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	693a      	ldr	r2, [r7, #16]
 8004b78:	621a      	str	r2, [r3, #32]
}
 8004b7a:	bf00      	nop
 8004b7c:	371c      	adds	r7, #28
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	40010000 	.word	0x40010000
 8004b8c:	40000400 	.word	0x40000400
 8004b90:	40000800 	.word	0x40000800
 8004b94:	40000c00 	.word	0x40000c00
 8004b98:	40010400 	.word	0x40010400
 8004b9c:	40014000 	.word	0x40014000
 8004ba0:	40001800 	.word	0x40001800

08004ba4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b087      	sub	sp, #28
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	607a      	str	r2, [r7, #4]
 8004bb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6a1b      	ldr	r3, [r3, #32]
 8004bb6:	f023 0210 	bic.w	r2, r3, #16
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6a1b      	ldr	r3, [r3, #32]
 8004bc8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bd0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	021b      	lsls	r3, r3, #8
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004be2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	031b      	lsls	r3, r3, #12
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	697a      	ldr	r2, [r7, #20]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004bf6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	011b      	lsls	r3, r3, #4
 8004bfc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004c00:	693a      	ldr	r2, [r7, #16]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	697a      	ldr	r2, [r7, #20]
 8004c0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	693a      	ldr	r2, [r7, #16]
 8004c10:	621a      	str	r2, [r3, #32]
}
 8004c12:	bf00      	nop
 8004c14:	371c      	adds	r7, #28
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr

08004c1e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004c1e:	b480      	push	{r7}
 8004c20:	b087      	sub	sp, #28
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	60f8      	str	r0, [r7, #12]
 8004c26:	60b9      	str	r1, [r7, #8]
 8004c28:	607a      	str	r2, [r7, #4]
 8004c2a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6a1b      	ldr	r3, [r3, #32]
 8004c30:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	69db      	ldr	r3, [r3, #28]
 8004c3c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	f023 0303 	bic.w	r3, r3, #3
 8004c4a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004c4c:	697a      	ldr	r2, [r7, #20]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c5a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	011b      	lsls	r3, r3, #4
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004c6e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	021b      	lsls	r3, r3, #8
 8004c74:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004c78:	693a      	ldr	r2, [r7, #16]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	693a      	ldr	r2, [r7, #16]
 8004c88:	621a      	str	r2, [r3, #32]
}
 8004c8a:	bf00      	nop
 8004c8c:	371c      	adds	r7, #28
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr

08004c96 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004c96:	b480      	push	{r7}
 8004c98:	b087      	sub	sp, #28
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	60f8      	str	r0, [r7, #12]
 8004c9e:	60b9      	str	r1, [r7, #8]
 8004ca0:	607a      	str	r2, [r7, #4]
 8004ca2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6a1b      	ldr	r3, [r3, #32]
 8004ca8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	69db      	ldr	r3, [r3, #28]
 8004cb4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6a1b      	ldr	r3, [r3, #32]
 8004cba:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cc2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	021b      	lsls	r3, r3, #8
 8004cc8:	697a      	ldr	r2, [r7, #20]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004cd4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	031b      	lsls	r3, r3, #12
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004ce8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	031b      	lsls	r3, r3, #12
 8004cee:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004cf2:	693a      	ldr	r2, [r7, #16]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	697a      	ldr	r2, [r7, #20]
 8004cfc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	693a      	ldr	r2, [r7, #16]
 8004d02:	621a      	str	r2, [r3, #32]
}
 8004d04:	bf00      	nop
 8004d06:	371c      	adds	r7, #28
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b087      	sub	sp, #28
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	f003 031f 	and.w	r3, r3, #31
 8004d22:	2201      	movs	r2, #1
 8004d24:	fa02 f303 	lsl.w	r3, r2, r3
 8004d28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6a1a      	ldr	r2, [r3, #32]
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	43db      	mvns	r3, r3
 8004d32:	401a      	ands	r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6a1a      	ldr	r2, [r3, #32]
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	f003 031f 	and.w	r3, r3, #31
 8004d42:	6879      	ldr	r1, [r7, #4]
 8004d44:	fa01 f303 	lsl.w	r3, r1, r3
 8004d48:	431a      	orrs	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	621a      	str	r2, [r3, #32]
}
 8004d4e:	bf00      	nop
 8004d50:	371c      	adds	r7, #28
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
	...

08004d5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b085      	sub	sp, #20
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d101      	bne.n	8004d74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d70:	2302      	movs	r3, #2
 8004d72:	e05a      	b.n	8004e2a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2202      	movs	r2, #2
 8004d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a21      	ldr	r2, [pc, #132]	; (8004e38 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d022      	beq.n	8004dfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dc0:	d01d      	beq.n	8004dfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a1d      	ldr	r2, [pc, #116]	; (8004e3c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d018      	beq.n	8004dfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a1b      	ldr	r2, [pc, #108]	; (8004e40 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d013      	beq.n	8004dfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a1a      	ldr	r2, [pc, #104]	; (8004e44 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d00e      	beq.n	8004dfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a18      	ldr	r2, [pc, #96]	; (8004e48 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d009      	beq.n	8004dfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a17      	ldr	r2, [pc, #92]	; (8004e4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d004      	beq.n	8004dfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a15      	ldr	r2, [pc, #84]	; (8004e50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d10c      	bne.n	8004e18 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	68ba      	ldr	r2, [r7, #8]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68ba      	ldr	r2, [r7, #8]
 8004e16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3714      	adds	r7, #20
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	40010000 	.word	0x40010000
 8004e3c:	40000400 	.word	0x40000400
 8004e40:	40000800 	.word	0x40000800
 8004e44:	40000c00 	.word	0x40000c00
 8004e48:	40010400 	.word	0x40010400
 8004e4c:	40014000 	.word	0x40014000
 8004e50:	40001800 	.word	0x40001800

08004e54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e03f      	b.n	8004f0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d106      	bne.n	8004ea8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f7fd fec8 	bl	8002c38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2224      	movs	r2, #36	; 0x24
 8004eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68da      	ldr	r2, [r3, #12]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ebe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f000 f929 	bl	8005118 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	691a      	ldr	r2, [r3, #16]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ed4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	695a      	ldr	r2, [r3, #20]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ee4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68da      	ldr	r2, [r3, #12]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ef4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2220      	movs	r2, #32
 8004f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2220      	movs	r2, #32
 8004f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3708      	adds	r7, #8
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}

08004f16 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f16:	b580      	push	{r7, lr}
 8004f18:	b08a      	sub	sp, #40	; 0x28
 8004f1a:	af02      	add	r7, sp, #8
 8004f1c:	60f8      	str	r0, [r7, #12]
 8004f1e:	60b9      	str	r1, [r7, #8]
 8004f20:	603b      	str	r3, [r7, #0]
 8004f22:	4613      	mov	r3, r2
 8004f24:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004f26:	2300      	movs	r3, #0
 8004f28:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b20      	cmp	r3, #32
 8004f34:	d17c      	bne.n	8005030 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d002      	beq.n	8004f42 <HAL_UART_Transmit+0x2c>
 8004f3c:	88fb      	ldrh	r3, [r7, #6]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d101      	bne.n	8004f46 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e075      	b.n	8005032 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d101      	bne.n	8004f54 <HAL_UART_Transmit+0x3e>
 8004f50:	2302      	movs	r3, #2
 8004f52:	e06e      	b.n	8005032 <HAL_UART_Transmit+0x11c>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2221      	movs	r2, #33	; 0x21
 8004f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f6a:	f7fe f877 	bl	800305c <HAL_GetTick>
 8004f6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	88fa      	ldrh	r2, [r7, #6]
 8004f74:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	88fa      	ldrh	r2, [r7, #6]
 8004f7a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f84:	d108      	bne.n	8004f98 <HAL_UART_Transmit+0x82>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d104      	bne.n	8004f98 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	61bb      	str	r3, [r7, #24]
 8004f96:	e003      	b.n	8004fa0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004fa8:	e02a      	b.n	8005000 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	9300      	str	r3, [sp, #0]
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	2180      	movs	r1, #128	; 0x80
 8004fb4:	68f8      	ldr	r0, [r7, #12]
 8004fb6:	f000 f840 	bl	800503a <UART_WaitOnFlagUntilTimeout>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d001      	beq.n	8004fc4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e036      	b.n	8005032 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d10b      	bne.n	8004fe2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	881b      	ldrh	r3, [r3, #0]
 8004fce:	461a      	mov	r2, r3
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fd8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	3302      	adds	r3, #2
 8004fde:	61bb      	str	r3, [r7, #24]
 8004fe0:	e007      	b.n	8004ff2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	781a      	ldrb	r2, [r3, #0]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	3301      	adds	r3, #1
 8004ff0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005004:	b29b      	uxth	r3, r3
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1cf      	bne.n	8004faa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	9300      	str	r3, [sp, #0]
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	2200      	movs	r2, #0
 8005012:	2140      	movs	r1, #64	; 0x40
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f000 f810 	bl	800503a <UART_WaitOnFlagUntilTimeout>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d001      	beq.n	8005024 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e006      	b.n	8005032 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2220      	movs	r2, #32
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800502c:	2300      	movs	r3, #0
 800502e:	e000      	b.n	8005032 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005030:	2302      	movs	r3, #2
  }
}
 8005032:	4618      	mov	r0, r3
 8005034:	3720      	adds	r7, #32
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}

0800503a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800503a:	b580      	push	{r7, lr}
 800503c:	b090      	sub	sp, #64	; 0x40
 800503e:	af00      	add	r7, sp, #0
 8005040:	60f8      	str	r0, [r7, #12]
 8005042:	60b9      	str	r1, [r7, #8]
 8005044:	603b      	str	r3, [r7, #0]
 8005046:	4613      	mov	r3, r2
 8005048:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800504a:	e050      	b.n	80050ee <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800504c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800504e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005052:	d04c      	beq.n	80050ee <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005054:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005056:	2b00      	cmp	r3, #0
 8005058:	d007      	beq.n	800506a <UART_WaitOnFlagUntilTimeout+0x30>
 800505a:	f7fd ffff 	bl	800305c <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005066:	429a      	cmp	r2, r3
 8005068:	d241      	bcs.n	80050ee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	330c      	adds	r3, #12
 8005070:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005074:	e853 3f00 	ldrex	r3, [r3]
 8005078:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800507a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005080:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	330c      	adds	r3, #12
 8005088:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800508a:	637a      	str	r2, [r7, #52]	; 0x34
 800508c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005090:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005092:	e841 2300 	strex	r3, r2, [r1]
 8005096:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800509a:	2b00      	cmp	r3, #0
 800509c:	d1e5      	bne.n	800506a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	3314      	adds	r3, #20
 80050a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	e853 3f00 	ldrex	r3, [r3]
 80050ac:	613b      	str	r3, [r7, #16]
   return(result);
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	f023 0301 	bic.w	r3, r3, #1
 80050b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	3314      	adds	r3, #20
 80050bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050be:	623a      	str	r2, [r7, #32]
 80050c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c2:	69f9      	ldr	r1, [r7, #28]
 80050c4:	6a3a      	ldr	r2, [r7, #32]
 80050c6:	e841 2300 	strex	r3, r2, [r1]
 80050ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1e5      	bne.n	800509e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2220      	movs	r2, #32
 80050d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2220      	movs	r2, #32
 80050de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e00f      	b.n	800510e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	4013      	ands	r3, r2
 80050f8:	68ba      	ldr	r2, [r7, #8]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	bf0c      	ite	eq
 80050fe:	2301      	moveq	r3, #1
 8005100:	2300      	movne	r3, #0
 8005102:	b2db      	uxtb	r3, r3
 8005104:	461a      	mov	r2, r3
 8005106:	79fb      	ldrb	r3, [r7, #7]
 8005108:	429a      	cmp	r2, r3
 800510a:	d09f      	beq.n	800504c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3740      	adds	r7, #64	; 0x40
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
	...

08005118 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005118:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800511c:	b0c0      	sub	sp, #256	; 0x100
 800511e:	af00      	add	r7, sp, #0
 8005120:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005134:	68d9      	ldr	r1, [r3, #12]
 8005136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	ea40 0301 	orr.w	r3, r0, r1
 8005140:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005146:	689a      	ldr	r2, [r3, #8]
 8005148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	431a      	orrs	r2, r3
 8005150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	431a      	orrs	r2, r3
 8005158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800515c:	69db      	ldr	r3, [r3, #28]
 800515e:	4313      	orrs	r3, r2
 8005160:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005170:	f021 010c 	bic.w	r1, r1, #12
 8005174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800517e:	430b      	orrs	r3, r1
 8005180:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800518e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005192:	6999      	ldr	r1, [r3, #24]
 8005194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	ea40 0301 	orr.w	r3, r0, r1
 800519e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80051a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	4b8f      	ldr	r3, [pc, #572]	; (80053e4 <UART_SetConfig+0x2cc>)
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d005      	beq.n	80051b8 <UART_SetConfig+0xa0>
 80051ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	4b8d      	ldr	r3, [pc, #564]	; (80053e8 <UART_SetConfig+0x2d0>)
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d104      	bne.n	80051c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80051b8:	f7fe fb76 	bl	80038a8 <HAL_RCC_GetPCLK2Freq>
 80051bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80051c0:	e003      	b.n	80051ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80051c2:	f7fe fb5d 	bl	8003880 <HAL_RCC_GetPCLK1Freq>
 80051c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ce:	69db      	ldr	r3, [r3, #28]
 80051d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051d4:	f040 810c 	bne.w	80053f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80051d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051dc:	2200      	movs	r2, #0
 80051de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80051e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80051e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80051ea:	4622      	mov	r2, r4
 80051ec:	462b      	mov	r3, r5
 80051ee:	1891      	adds	r1, r2, r2
 80051f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80051f2:	415b      	adcs	r3, r3
 80051f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80051fa:	4621      	mov	r1, r4
 80051fc:	eb12 0801 	adds.w	r8, r2, r1
 8005200:	4629      	mov	r1, r5
 8005202:	eb43 0901 	adc.w	r9, r3, r1
 8005206:	f04f 0200 	mov.w	r2, #0
 800520a:	f04f 0300 	mov.w	r3, #0
 800520e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005212:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005216:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800521a:	4690      	mov	r8, r2
 800521c:	4699      	mov	r9, r3
 800521e:	4623      	mov	r3, r4
 8005220:	eb18 0303 	adds.w	r3, r8, r3
 8005224:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005228:	462b      	mov	r3, r5
 800522a:	eb49 0303 	adc.w	r3, r9, r3
 800522e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800523e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005242:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005246:	460b      	mov	r3, r1
 8005248:	18db      	adds	r3, r3, r3
 800524a:	653b      	str	r3, [r7, #80]	; 0x50
 800524c:	4613      	mov	r3, r2
 800524e:	eb42 0303 	adc.w	r3, r2, r3
 8005252:	657b      	str	r3, [r7, #84]	; 0x54
 8005254:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005258:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800525c:	f7fb fd34 	bl	8000cc8 <__aeabi_uldivmod>
 8005260:	4602      	mov	r2, r0
 8005262:	460b      	mov	r3, r1
 8005264:	4b61      	ldr	r3, [pc, #388]	; (80053ec <UART_SetConfig+0x2d4>)
 8005266:	fba3 2302 	umull	r2, r3, r3, r2
 800526a:	095b      	lsrs	r3, r3, #5
 800526c:	011c      	lsls	r4, r3, #4
 800526e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005272:	2200      	movs	r2, #0
 8005274:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005278:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800527c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005280:	4642      	mov	r2, r8
 8005282:	464b      	mov	r3, r9
 8005284:	1891      	adds	r1, r2, r2
 8005286:	64b9      	str	r1, [r7, #72]	; 0x48
 8005288:	415b      	adcs	r3, r3
 800528a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800528c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005290:	4641      	mov	r1, r8
 8005292:	eb12 0a01 	adds.w	sl, r2, r1
 8005296:	4649      	mov	r1, r9
 8005298:	eb43 0b01 	adc.w	fp, r3, r1
 800529c:	f04f 0200 	mov.w	r2, #0
 80052a0:	f04f 0300 	mov.w	r3, #0
 80052a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80052a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80052ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052b0:	4692      	mov	sl, r2
 80052b2:	469b      	mov	fp, r3
 80052b4:	4643      	mov	r3, r8
 80052b6:	eb1a 0303 	adds.w	r3, sl, r3
 80052ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80052be:	464b      	mov	r3, r9
 80052c0:	eb4b 0303 	adc.w	r3, fp, r3
 80052c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80052c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80052d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80052d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80052dc:	460b      	mov	r3, r1
 80052de:	18db      	adds	r3, r3, r3
 80052e0:	643b      	str	r3, [r7, #64]	; 0x40
 80052e2:	4613      	mov	r3, r2
 80052e4:	eb42 0303 	adc.w	r3, r2, r3
 80052e8:	647b      	str	r3, [r7, #68]	; 0x44
 80052ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80052ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80052f2:	f7fb fce9 	bl	8000cc8 <__aeabi_uldivmod>
 80052f6:	4602      	mov	r2, r0
 80052f8:	460b      	mov	r3, r1
 80052fa:	4611      	mov	r1, r2
 80052fc:	4b3b      	ldr	r3, [pc, #236]	; (80053ec <UART_SetConfig+0x2d4>)
 80052fe:	fba3 2301 	umull	r2, r3, r3, r1
 8005302:	095b      	lsrs	r3, r3, #5
 8005304:	2264      	movs	r2, #100	; 0x64
 8005306:	fb02 f303 	mul.w	r3, r2, r3
 800530a:	1acb      	subs	r3, r1, r3
 800530c:	00db      	lsls	r3, r3, #3
 800530e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005312:	4b36      	ldr	r3, [pc, #216]	; (80053ec <UART_SetConfig+0x2d4>)
 8005314:	fba3 2302 	umull	r2, r3, r3, r2
 8005318:	095b      	lsrs	r3, r3, #5
 800531a:	005b      	lsls	r3, r3, #1
 800531c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005320:	441c      	add	r4, r3
 8005322:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005326:	2200      	movs	r2, #0
 8005328:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800532c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005330:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005334:	4642      	mov	r2, r8
 8005336:	464b      	mov	r3, r9
 8005338:	1891      	adds	r1, r2, r2
 800533a:	63b9      	str	r1, [r7, #56]	; 0x38
 800533c:	415b      	adcs	r3, r3
 800533e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005340:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005344:	4641      	mov	r1, r8
 8005346:	1851      	adds	r1, r2, r1
 8005348:	6339      	str	r1, [r7, #48]	; 0x30
 800534a:	4649      	mov	r1, r9
 800534c:	414b      	adcs	r3, r1
 800534e:	637b      	str	r3, [r7, #52]	; 0x34
 8005350:	f04f 0200 	mov.w	r2, #0
 8005354:	f04f 0300 	mov.w	r3, #0
 8005358:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800535c:	4659      	mov	r1, fp
 800535e:	00cb      	lsls	r3, r1, #3
 8005360:	4651      	mov	r1, sl
 8005362:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005366:	4651      	mov	r1, sl
 8005368:	00ca      	lsls	r2, r1, #3
 800536a:	4610      	mov	r0, r2
 800536c:	4619      	mov	r1, r3
 800536e:	4603      	mov	r3, r0
 8005370:	4642      	mov	r2, r8
 8005372:	189b      	adds	r3, r3, r2
 8005374:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005378:	464b      	mov	r3, r9
 800537a:	460a      	mov	r2, r1
 800537c:	eb42 0303 	adc.w	r3, r2, r3
 8005380:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005390:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005394:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005398:	460b      	mov	r3, r1
 800539a:	18db      	adds	r3, r3, r3
 800539c:	62bb      	str	r3, [r7, #40]	; 0x28
 800539e:	4613      	mov	r3, r2
 80053a0:	eb42 0303 	adc.w	r3, r2, r3
 80053a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80053aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80053ae:	f7fb fc8b 	bl	8000cc8 <__aeabi_uldivmod>
 80053b2:	4602      	mov	r2, r0
 80053b4:	460b      	mov	r3, r1
 80053b6:	4b0d      	ldr	r3, [pc, #52]	; (80053ec <UART_SetConfig+0x2d4>)
 80053b8:	fba3 1302 	umull	r1, r3, r3, r2
 80053bc:	095b      	lsrs	r3, r3, #5
 80053be:	2164      	movs	r1, #100	; 0x64
 80053c0:	fb01 f303 	mul.w	r3, r1, r3
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	00db      	lsls	r3, r3, #3
 80053c8:	3332      	adds	r3, #50	; 0x32
 80053ca:	4a08      	ldr	r2, [pc, #32]	; (80053ec <UART_SetConfig+0x2d4>)
 80053cc:	fba2 2303 	umull	r2, r3, r2, r3
 80053d0:	095b      	lsrs	r3, r3, #5
 80053d2:	f003 0207 	and.w	r2, r3, #7
 80053d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4422      	add	r2, r4
 80053de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80053e0:	e105      	b.n	80055ee <UART_SetConfig+0x4d6>
 80053e2:	bf00      	nop
 80053e4:	40011000 	.word	0x40011000
 80053e8:	40011400 	.word	0x40011400
 80053ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053f4:	2200      	movs	r2, #0
 80053f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80053fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80053fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005402:	4642      	mov	r2, r8
 8005404:	464b      	mov	r3, r9
 8005406:	1891      	adds	r1, r2, r2
 8005408:	6239      	str	r1, [r7, #32]
 800540a:	415b      	adcs	r3, r3
 800540c:	627b      	str	r3, [r7, #36]	; 0x24
 800540e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005412:	4641      	mov	r1, r8
 8005414:	1854      	adds	r4, r2, r1
 8005416:	4649      	mov	r1, r9
 8005418:	eb43 0501 	adc.w	r5, r3, r1
 800541c:	f04f 0200 	mov.w	r2, #0
 8005420:	f04f 0300 	mov.w	r3, #0
 8005424:	00eb      	lsls	r3, r5, #3
 8005426:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800542a:	00e2      	lsls	r2, r4, #3
 800542c:	4614      	mov	r4, r2
 800542e:	461d      	mov	r5, r3
 8005430:	4643      	mov	r3, r8
 8005432:	18e3      	adds	r3, r4, r3
 8005434:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005438:	464b      	mov	r3, r9
 800543a:	eb45 0303 	adc.w	r3, r5, r3
 800543e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800544e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005452:	f04f 0200 	mov.w	r2, #0
 8005456:	f04f 0300 	mov.w	r3, #0
 800545a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800545e:	4629      	mov	r1, r5
 8005460:	008b      	lsls	r3, r1, #2
 8005462:	4621      	mov	r1, r4
 8005464:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005468:	4621      	mov	r1, r4
 800546a:	008a      	lsls	r2, r1, #2
 800546c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005470:	f7fb fc2a 	bl	8000cc8 <__aeabi_uldivmod>
 8005474:	4602      	mov	r2, r0
 8005476:	460b      	mov	r3, r1
 8005478:	4b60      	ldr	r3, [pc, #384]	; (80055fc <UART_SetConfig+0x4e4>)
 800547a:	fba3 2302 	umull	r2, r3, r3, r2
 800547e:	095b      	lsrs	r3, r3, #5
 8005480:	011c      	lsls	r4, r3, #4
 8005482:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005486:	2200      	movs	r2, #0
 8005488:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800548c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005490:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005494:	4642      	mov	r2, r8
 8005496:	464b      	mov	r3, r9
 8005498:	1891      	adds	r1, r2, r2
 800549a:	61b9      	str	r1, [r7, #24]
 800549c:	415b      	adcs	r3, r3
 800549e:	61fb      	str	r3, [r7, #28]
 80054a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054a4:	4641      	mov	r1, r8
 80054a6:	1851      	adds	r1, r2, r1
 80054a8:	6139      	str	r1, [r7, #16]
 80054aa:	4649      	mov	r1, r9
 80054ac:	414b      	adcs	r3, r1
 80054ae:	617b      	str	r3, [r7, #20]
 80054b0:	f04f 0200 	mov.w	r2, #0
 80054b4:	f04f 0300 	mov.w	r3, #0
 80054b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054bc:	4659      	mov	r1, fp
 80054be:	00cb      	lsls	r3, r1, #3
 80054c0:	4651      	mov	r1, sl
 80054c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054c6:	4651      	mov	r1, sl
 80054c8:	00ca      	lsls	r2, r1, #3
 80054ca:	4610      	mov	r0, r2
 80054cc:	4619      	mov	r1, r3
 80054ce:	4603      	mov	r3, r0
 80054d0:	4642      	mov	r2, r8
 80054d2:	189b      	adds	r3, r3, r2
 80054d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80054d8:	464b      	mov	r3, r9
 80054da:	460a      	mov	r2, r1
 80054dc:	eb42 0303 	adc.w	r3, r2, r3
 80054e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80054e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80054ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80054f0:	f04f 0200 	mov.w	r2, #0
 80054f4:	f04f 0300 	mov.w	r3, #0
 80054f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80054fc:	4649      	mov	r1, r9
 80054fe:	008b      	lsls	r3, r1, #2
 8005500:	4641      	mov	r1, r8
 8005502:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005506:	4641      	mov	r1, r8
 8005508:	008a      	lsls	r2, r1, #2
 800550a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800550e:	f7fb fbdb 	bl	8000cc8 <__aeabi_uldivmod>
 8005512:	4602      	mov	r2, r0
 8005514:	460b      	mov	r3, r1
 8005516:	4b39      	ldr	r3, [pc, #228]	; (80055fc <UART_SetConfig+0x4e4>)
 8005518:	fba3 1302 	umull	r1, r3, r3, r2
 800551c:	095b      	lsrs	r3, r3, #5
 800551e:	2164      	movs	r1, #100	; 0x64
 8005520:	fb01 f303 	mul.w	r3, r1, r3
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	011b      	lsls	r3, r3, #4
 8005528:	3332      	adds	r3, #50	; 0x32
 800552a:	4a34      	ldr	r2, [pc, #208]	; (80055fc <UART_SetConfig+0x4e4>)
 800552c:	fba2 2303 	umull	r2, r3, r2, r3
 8005530:	095b      	lsrs	r3, r3, #5
 8005532:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005536:	441c      	add	r4, r3
 8005538:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800553c:	2200      	movs	r2, #0
 800553e:	673b      	str	r3, [r7, #112]	; 0x70
 8005540:	677a      	str	r2, [r7, #116]	; 0x74
 8005542:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005546:	4642      	mov	r2, r8
 8005548:	464b      	mov	r3, r9
 800554a:	1891      	adds	r1, r2, r2
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	415b      	adcs	r3, r3
 8005550:	60fb      	str	r3, [r7, #12]
 8005552:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005556:	4641      	mov	r1, r8
 8005558:	1851      	adds	r1, r2, r1
 800555a:	6039      	str	r1, [r7, #0]
 800555c:	4649      	mov	r1, r9
 800555e:	414b      	adcs	r3, r1
 8005560:	607b      	str	r3, [r7, #4]
 8005562:	f04f 0200 	mov.w	r2, #0
 8005566:	f04f 0300 	mov.w	r3, #0
 800556a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800556e:	4659      	mov	r1, fp
 8005570:	00cb      	lsls	r3, r1, #3
 8005572:	4651      	mov	r1, sl
 8005574:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005578:	4651      	mov	r1, sl
 800557a:	00ca      	lsls	r2, r1, #3
 800557c:	4610      	mov	r0, r2
 800557e:	4619      	mov	r1, r3
 8005580:	4603      	mov	r3, r0
 8005582:	4642      	mov	r2, r8
 8005584:	189b      	adds	r3, r3, r2
 8005586:	66bb      	str	r3, [r7, #104]	; 0x68
 8005588:	464b      	mov	r3, r9
 800558a:	460a      	mov	r2, r1
 800558c:	eb42 0303 	adc.w	r3, r2, r3
 8005590:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	663b      	str	r3, [r7, #96]	; 0x60
 800559c:	667a      	str	r2, [r7, #100]	; 0x64
 800559e:	f04f 0200 	mov.w	r2, #0
 80055a2:	f04f 0300 	mov.w	r3, #0
 80055a6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80055aa:	4649      	mov	r1, r9
 80055ac:	008b      	lsls	r3, r1, #2
 80055ae:	4641      	mov	r1, r8
 80055b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055b4:	4641      	mov	r1, r8
 80055b6:	008a      	lsls	r2, r1, #2
 80055b8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80055bc:	f7fb fb84 	bl	8000cc8 <__aeabi_uldivmod>
 80055c0:	4602      	mov	r2, r0
 80055c2:	460b      	mov	r3, r1
 80055c4:	4b0d      	ldr	r3, [pc, #52]	; (80055fc <UART_SetConfig+0x4e4>)
 80055c6:	fba3 1302 	umull	r1, r3, r3, r2
 80055ca:	095b      	lsrs	r3, r3, #5
 80055cc:	2164      	movs	r1, #100	; 0x64
 80055ce:	fb01 f303 	mul.w	r3, r1, r3
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	011b      	lsls	r3, r3, #4
 80055d6:	3332      	adds	r3, #50	; 0x32
 80055d8:	4a08      	ldr	r2, [pc, #32]	; (80055fc <UART_SetConfig+0x4e4>)
 80055da:	fba2 2303 	umull	r2, r3, r2, r3
 80055de:	095b      	lsrs	r3, r3, #5
 80055e0:	f003 020f 	and.w	r2, r3, #15
 80055e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4422      	add	r2, r4
 80055ec:	609a      	str	r2, [r3, #8]
}
 80055ee:	bf00      	nop
 80055f0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80055f4:	46bd      	mov	sp, r7
 80055f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055fa:	bf00      	nop
 80055fc:	51eb851f 	.word	0x51eb851f

08005600 <__errno>:
 8005600:	4b01      	ldr	r3, [pc, #4]	; (8005608 <__errno+0x8>)
 8005602:	6818      	ldr	r0, [r3, #0]
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	20000010 	.word	0x20000010

0800560c <__libc_init_array>:
 800560c:	b570      	push	{r4, r5, r6, lr}
 800560e:	4d0d      	ldr	r5, [pc, #52]	; (8005644 <__libc_init_array+0x38>)
 8005610:	4c0d      	ldr	r4, [pc, #52]	; (8005648 <__libc_init_array+0x3c>)
 8005612:	1b64      	subs	r4, r4, r5
 8005614:	10a4      	asrs	r4, r4, #2
 8005616:	2600      	movs	r6, #0
 8005618:	42a6      	cmp	r6, r4
 800561a:	d109      	bne.n	8005630 <__libc_init_array+0x24>
 800561c:	4d0b      	ldr	r5, [pc, #44]	; (800564c <__libc_init_array+0x40>)
 800561e:	4c0c      	ldr	r4, [pc, #48]	; (8005650 <__libc_init_array+0x44>)
 8005620:	f004 fd14 	bl	800a04c <_init>
 8005624:	1b64      	subs	r4, r4, r5
 8005626:	10a4      	asrs	r4, r4, #2
 8005628:	2600      	movs	r6, #0
 800562a:	42a6      	cmp	r6, r4
 800562c:	d105      	bne.n	800563a <__libc_init_array+0x2e>
 800562e:	bd70      	pop	{r4, r5, r6, pc}
 8005630:	f855 3b04 	ldr.w	r3, [r5], #4
 8005634:	4798      	blx	r3
 8005636:	3601      	adds	r6, #1
 8005638:	e7ee      	b.n	8005618 <__libc_init_array+0xc>
 800563a:	f855 3b04 	ldr.w	r3, [r5], #4
 800563e:	4798      	blx	r3
 8005640:	3601      	adds	r6, #1
 8005642:	e7f2      	b.n	800562a <__libc_init_array+0x1e>
 8005644:	0800a708 	.word	0x0800a708
 8005648:	0800a708 	.word	0x0800a708
 800564c:	0800a708 	.word	0x0800a708
 8005650:	0800a70c 	.word	0x0800a70c

08005654 <memset>:
 8005654:	4402      	add	r2, r0
 8005656:	4603      	mov	r3, r0
 8005658:	4293      	cmp	r3, r2
 800565a:	d100      	bne.n	800565e <memset+0xa>
 800565c:	4770      	bx	lr
 800565e:	f803 1b01 	strb.w	r1, [r3], #1
 8005662:	e7f9      	b.n	8005658 <memset+0x4>

08005664 <__cvt>:
 8005664:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005668:	ec55 4b10 	vmov	r4, r5, d0
 800566c:	2d00      	cmp	r5, #0
 800566e:	460e      	mov	r6, r1
 8005670:	4619      	mov	r1, r3
 8005672:	462b      	mov	r3, r5
 8005674:	bfbb      	ittet	lt
 8005676:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800567a:	461d      	movlt	r5, r3
 800567c:	2300      	movge	r3, #0
 800567e:	232d      	movlt	r3, #45	; 0x2d
 8005680:	700b      	strb	r3, [r1, #0]
 8005682:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005684:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005688:	4691      	mov	r9, r2
 800568a:	f023 0820 	bic.w	r8, r3, #32
 800568e:	bfbc      	itt	lt
 8005690:	4622      	movlt	r2, r4
 8005692:	4614      	movlt	r4, r2
 8005694:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005698:	d005      	beq.n	80056a6 <__cvt+0x42>
 800569a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800569e:	d100      	bne.n	80056a2 <__cvt+0x3e>
 80056a0:	3601      	adds	r6, #1
 80056a2:	2102      	movs	r1, #2
 80056a4:	e000      	b.n	80056a8 <__cvt+0x44>
 80056a6:	2103      	movs	r1, #3
 80056a8:	ab03      	add	r3, sp, #12
 80056aa:	9301      	str	r3, [sp, #4]
 80056ac:	ab02      	add	r3, sp, #8
 80056ae:	9300      	str	r3, [sp, #0]
 80056b0:	ec45 4b10 	vmov	d0, r4, r5
 80056b4:	4653      	mov	r3, sl
 80056b6:	4632      	mov	r2, r6
 80056b8:	f001 fe0a 	bl	80072d0 <_dtoa_r>
 80056bc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80056c0:	4607      	mov	r7, r0
 80056c2:	d102      	bne.n	80056ca <__cvt+0x66>
 80056c4:	f019 0f01 	tst.w	r9, #1
 80056c8:	d022      	beq.n	8005710 <__cvt+0xac>
 80056ca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80056ce:	eb07 0906 	add.w	r9, r7, r6
 80056d2:	d110      	bne.n	80056f6 <__cvt+0x92>
 80056d4:	783b      	ldrb	r3, [r7, #0]
 80056d6:	2b30      	cmp	r3, #48	; 0x30
 80056d8:	d10a      	bne.n	80056f0 <__cvt+0x8c>
 80056da:	2200      	movs	r2, #0
 80056dc:	2300      	movs	r3, #0
 80056de:	4620      	mov	r0, r4
 80056e0:	4629      	mov	r1, r5
 80056e2:	f7fb fa11 	bl	8000b08 <__aeabi_dcmpeq>
 80056e6:	b918      	cbnz	r0, 80056f0 <__cvt+0x8c>
 80056e8:	f1c6 0601 	rsb	r6, r6, #1
 80056ec:	f8ca 6000 	str.w	r6, [sl]
 80056f0:	f8da 3000 	ldr.w	r3, [sl]
 80056f4:	4499      	add	r9, r3
 80056f6:	2200      	movs	r2, #0
 80056f8:	2300      	movs	r3, #0
 80056fa:	4620      	mov	r0, r4
 80056fc:	4629      	mov	r1, r5
 80056fe:	f7fb fa03 	bl	8000b08 <__aeabi_dcmpeq>
 8005702:	b108      	cbz	r0, 8005708 <__cvt+0xa4>
 8005704:	f8cd 900c 	str.w	r9, [sp, #12]
 8005708:	2230      	movs	r2, #48	; 0x30
 800570a:	9b03      	ldr	r3, [sp, #12]
 800570c:	454b      	cmp	r3, r9
 800570e:	d307      	bcc.n	8005720 <__cvt+0xbc>
 8005710:	9b03      	ldr	r3, [sp, #12]
 8005712:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005714:	1bdb      	subs	r3, r3, r7
 8005716:	4638      	mov	r0, r7
 8005718:	6013      	str	r3, [r2, #0]
 800571a:	b004      	add	sp, #16
 800571c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005720:	1c59      	adds	r1, r3, #1
 8005722:	9103      	str	r1, [sp, #12]
 8005724:	701a      	strb	r2, [r3, #0]
 8005726:	e7f0      	b.n	800570a <__cvt+0xa6>

08005728 <__exponent>:
 8005728:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800572a:	4603      	mov	r3, r0
 800572c:	2900      	cmp	r1, #0
 800572e:	bfb8      	it	lt
 8005730:	4249      	neglt	r1, r1
 8005732:	f803 2b02 	strb.w	r2, [r3], #2
 8005736:	bfb4      	ite	lt
 8005738:	222d      	movlt	r2, #45	; 0x2d
 800573a:	222b      	movge	r2, #43	; 0x2b
 800573c:	2909      	cmp	r1, #9
 800573e:	7042      	strb	r2, [r0, #1]
 8005740:	dd2a      	ble.n	8005798 <__exponent+0x70>
 8005742:	f10d 0407 	add.w	r4, sp, #7
 8005746:	46a4      	mov	ip, r4
 8005748:	270a      	movs	r7, #10
 800574a:	46a6      	mov	lr, r4
 800574c:	460a      	mov	r2, r1
 800574e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005752:	fb07 1516 	mls	r5, r7, r6, r1
 8005756:	3530      	adds	r5, #48	; 0x30
 8005758:	2a63      	cmp	r2, #99	; 0x63
 800575a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800575e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005762:	4631      	mov	r1, r6
 8005764:	dcf1      	bgt.n	800574a <__exponent+0x22>
 8005766:	3130      	adds	r1, #48	; 0x30
 8005768:	f1ae 0502 	sub.w	r5, lr, #2
 800576c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005770:	1c44      	adds	r4, r0, #1
 8005772:	4629      	mov	r1, r5
 8005774:	4561      	cmp	r1, ip
 8005776:	d30a      	bcc.n	800578e <__exponent+0x66>
 8005778:	f10d 0209 	add.w	r2, sp, #9
 800577c:	eba2 020e 	sub.w	r2, r2, lr
 8005780:	4565      	cmp	r5, ip
 8005782:	bf88      	it	hi
 8005784:	2200      	movhi	r2, #0
 8005786:	4413      	add	r3, r2
 8005788:	1a18      	subs	r0, r3, r0
 800578a:	b003      	add	sp, #12
 800578c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800578e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005792:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005796:	e7ed      	b.n	8005774 <__exponent+0x4c>
 8005798:	2330      	movs	r3, #48	; 0x30
 800579a:	3130      	adds	r1, #48	; 0x30
 800579c:	7083      	strb	r3, [r0, #2]
 800579e:	70c1      	strb	r1, [r0, #3]
 80057a0:	1d03      	adds	r3, r0, #4
 80057a2:	e7f1      	b.n	8005788 <__exponent+0x60>

080057a4 <_printf_float>:
 80057a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057a8:	ed2d 8b02 	vpush	{d8}
 80057ac:	b08d      	sub	sp, #52	; 0x34
 80057ae:	460c      	mov	r4, r1
 80057b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80057b4:	4616      	mov	r6, r2
 80057b6:	461f      	mov	r7, r3
 80057b8:	4605      	mov	r5, r0
 80057ba:	f002 fef9 	bl	80085b0 <_localeconv_r>
 80057be:	f8d0 a000 	ldr.w	sl, [r0]
 80057c2:	4650      	mov	r0, sl
 80057c4:	f7fa fd24 	bl	8000210 <strlen>
 80057c8:	2300      	movs	r3, #0
 80057ca:	930a      	str	r3, [sp, #40]	; 0x28
 80057cc:	6823      	ldr	r3, [r4, #0]
 80057ce:	9305      	str	r3, [sp, #20]
 80057d0:	f8d8 3000 	ldr.w	r3, [r8]
 80057d4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80057d8:	3307      	adds	r3, #7
 80057da:	f023 0307 	bic.w	r3, r3, #7
 80057de:	f103 0208 	add.w	r2, r3, #8
 80057e2:	f8c8 2000 	str.w	r2, [r8]
 80057e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ea:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80057ee:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80057f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80057f6:	9307      	str	r3, [sp, #28]
 80057f8:	f8cd 8018 	str.w	r8, [sp, #24]
 80057fc:	ee08 0a10 	vmov	s16, r0
 8005800:	4b9f      	ldr	r3, [pc, #636]	; (8005a80 <_printf_float+0x2dc>)
 8005802:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005806:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800580a:	f7fb f9af 	bl	8000b6c <__aeabi_dcmpun>
 800580e:	bb88      	cbnz	r0, 8005874 <_printf_float+0xd0>
 8005810:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005814:	4b9a      	ldr	r3, [pc, #616]	; (8005a80 <_printf_float+0x2dc>)
 8005816:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800581a:	f7fb f989 	bl	8000b30 <__aeabi_dcmple>
 800581e:	bb48      	cbnz	r0, 8005874 <_printf_float+0xd0>
 8005820:	2200      	movs	r2, #0
 8005822:	2300      	movs	r3, #0
 8005824:	4640      	mov	r0, r8
 8005826:	4649      	mov	r1, r9
 8005828:	f7fb f978 	bl	8000b1c <__aeabi_dcmplt>
 800582c:	b110      	cbz	r0, 8005834 <_printf_float+0x90>
 800582e:	232d      	movs	r3, #45	; 0x2d
 8005830:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005834:	4b93      	ldr	r3, [pc, #588]	; (8005a84 <_printf_float+0x2e0>)
 8005836:	4894      	ldr	r0, [pc, #592]	; (8005a88 <_printf_float+0x2e4>)
 8005838:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800583c:	bf94      	ite	ls
 800583e:	4698      	movls	r8, r3
 8005840:	4680      	movhi	r8, r0
 8005842:	2303      	movs	r3, #3
 8005844:	6123      	str	r3, [r4, #16]
 8005846:	9b05      	ldr	r3, [sp, #20]
 8005848:	f023 0204 	bic.w	r2, r3, #4
 800584c:	6022      	str	r2, [r4, #0]
 800584e:	f04f 0900 	mov.w	r9, #0
 8005852:	9700      	str	r7, [sp, #0]
 8005854:	4633      	mov	r3, r6
 8005856:	aa0b      	add	r2, sp, #44	; 0x2c
 8005858:	4621      	mov	r1, r4
 800585a:	4628      	mov	r0, r5
 800585c:	f000 f9d8 	bl	8005c10 <_printf_common>
 8005860:	3001      	adds	r0, #1
 8005862:	f040 8090 	bne.w	8005986 <_printf_float+0x1e2>
 8005866:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800586a:	b00d      	add	sp, #52	; 0x34
 800586c:	ecbd 8b02 	vpop	{d8}
 8005870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005874:	4642      	mov	r2, r8
 8005876:	464b      	mov	r3, r9
 8005878:	4640      	mov	r0, r8
 800587a:	4649      	mov	r1, r9
 800587c:	f7fb f976 	bl	8000b6c <__aeabi_dcmpun>
 8005880:	b140      	cbz	r0, 8005894 <_printf_float+0xf0>
 8005882:	464b      	mov	r3, r9
 8005884:	2b00      	cmp	r3, #0
 8005886:	bfbc      	itt	lt
 8005888:	232d      	movlt	r3, #45	; 0x2d
 800588a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800588e:	487f      	ldr	r0, [pc, #508]	; (8005a8c <_printf_float+0x2e8>)
 8005890:	4b7f      	ldr	r3, [pc, #508]	; (8005a90 <_printf_float+0x2ec>)
 8005892:	e7d1      	b.n	8005838 <_printf_float+0x94>
 8005894:	6863      	ldr	r3, [r4, #4]
 8005896:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800589a:	9206      	str	r2, [sp, #24]
 800589c:	1c5a      	adds	r2, r3, #1
 800589e:	d13f      	bne.n	8005920 <_printf_float+0x17c>
 80058a0:	2306      	movs	r3, #6
 80058a2:	6063      	str	r3, [r4, #4]
 80058a4:	9b05      	ldr	r3, [sp, #20]
 80058a6:	6861      	ldr	r1, [r4, #4]
 80058a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80058ac:	2300      	movs	r3, #0
 80058ae:	9303      	str	r3, [sp, #12]
 80058b0:	ab0a      	add	r3, sp, #40	; 0x28
 80058b2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80058b6:	ab09      	add	r3, sp, #36	; 0x24
 80058b8:	ec49 8b10 	vmov	d0, r8, r9
 80058bc:	9300      	str	r3, [sp, #0]
 80058be:	6022      	str	r2, [r4, #0]
 80058c0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80058c4:	4628      	mov	r0, r5
 80058c6:	f7ff fecd 	bl	8005664 <__cvt>
 80058ca:	9b06      	ldr	r3, [sp, #24]
 80058cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058ce:	2b47      	cmp	r3, #71	; 0x47
 80058d0:	4680      	mov	r8, r0
 80058d2:	d108      	bne.n	80058e6 <_printf_float+0x142>
 80058d4:	1cc8      	adds	r0, r1, #3
 80058d6:	db02      	blt.n	80058de <_printf_float+0x13a>
 80058d8:	6863      	ldr	r3, [r4, #4]
 80058da:	4299      	cmp	r1, r3
 80058dc:	dd41      	ble.n	8005962 <_printf_float+0x1be>
 80058de:	f1ab 0b02 	sub.w	fp, fp, #2
 80058e2:	fa5f fb8b 	uxtb.w	fp, fp
 80058e6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80058ea:	d820      	bhi.n	800592e <_printf_float+0x18a>
 80058ec:	3901      	subs	r1, #1
 80058ee:	465a      	mov	r2, fp
 80058f0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80058f4:	9109      	str	r1, [sp, #36]	; 0x24
 80058f6:	f7ff ff17 	bl	8005728 <__exponent>
 80058fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058fc:	1813      	adds	r3, r2, r0
 80058fe:	2a01      	cmp	r2, #1
 8005900:	4681      	mov	r9, r0
 8005902:	6123      	str	r3, [r4, #16]
 8005904:	dc02      	bgt.n	800590c <_printf_float+0x168>
 8005906:	6822      	ldr	r2, [r4, #0]
 8005908:	07d2      	lsls	r2, r2, #31
 800590a:	d501      	bpl.n	8005910 <_printf_float+0x16c>
 800590c:	3301      	adds	r3, #1
 800590e:	6123      	str	r3, [r4, #16]
 8005910:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005914:	2b00      	cmp	r3, #0
 8005916:	d09c      	beq.n	8005852 <_printf_float+0xae>
 8005918:	232d      	movs	r3, #45	; 0x2d
 800591a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800591e:	e798      	b.n	8005852 <_printf_float+0xae>
 8005920:	9a06      	ldr	r2, [sp, #24]
 8005922:	2a47      	cmp	r2, #71	; 0x47
 8005924:	d1be      	bne.n	80058a4 <_printf_float+0x100>
 8005926:	2b00      	cmp	r3, #0
 8005928:	d1bc      	bne.n	80058a4 <_printf_float+0x100>
 800592a:	2301      	movs	r3, #1
 800592c:	e7b9      	b.n	80058a2 <_printf_float+0xfe>
 800592e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005932:	d118      	bne.n	8005966 <_printf_float+0x1c2>
 8005934:	2900      	cmp	r1, #0
 8005936:	6863      	ldr	r3, [r4, #4]
 8005938:	dd0b      	ble.n	8005952 <_printf_float+0x1ae>
 800593a:	6121      	str	r1, [r4, #16]
 800593c:	b913      	cbnz	r3, 8005944 <_printf_float+0x1a0>
 800593e:	6822      	ldr	r2, [r4, #0]
 8005940:	07d0      	lsls	r0, r2, #31
 8005942:	d502      	bpl.n	800594a <_printf_float+0x1a6>
 8005944:	3301      	adds	r3, #1
 8005946:	440b      	add	r3, r1
 8005948:	6123      	str	r3, [r4, #16]
 800594a:	65a1      	str	r1, [r4, #88]	; 0x58
 800594c:	f04f 0900 	mov.w	r9, #0
 8005950:	e7de      	b.n	8005910 <_printf_float+0x16c>
 8005952:	b913      	cbnz	r3, 800595a <_printf_float+0x1b6>
 8005954:	6822      	ldr	r2, [r4, #0]
 8005956:	07d2      	lsls	r2, r2, #31
 8005958:	d501      	bpl.n	800595e <_printf_float+0x1ba>
 800595a:	3302      	adds	r3, #2
 800595c:	e7f4      	b.n	8005948 <_printf_float+0x1a4>
 800595e:	2301      	movs	r3, #1
 8005960:	e7f2      	b.n	8005948 <_printf_float+0x1a4>
 8005962:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005968:	4299      	cmp	r1, r3
 800596a:	db05      	blt.n	8005978 <_printf_float+0x1d4>
 800596c:	6823      	ldr	r3, [r4, #0]
 800596e:	6121      	str	r1, [r4, #16]
 8005970:	07d8      	lsls	r0, r3, #31
 8005972:	d5ea      	bpl.n	800594a <_printf_float+0x1a6>
 8005974:	1c4b      	adds	r3, r1, #1
 8005976:	e7e7      	b.n	8005948 <_printf_float+0x1a4>
 8005978:	2900      	cmp	r1, #0
 800597a:	bfd4      	ite	le
 800597c:	f1c1 0202 	rsble	r2, r1, #2
 8005980:	2201      	movgt	r2, #1
 8005982:	4413      	add	r3, r2
 8005984:	e7e0      	b.n	8005948 <_printf_float+0x1a4>
 8005986:	6823      	ldr	r3, [r4, #0]
 8005988:	055a      	lsls	r2, r3, #21
 800598a:	d407      	bmi.n	800599c <_printf_float+0x1f8>
 800598c:	6923      	ldr	r3, [r4, #16]
 800598e:	4642      	mov	r2, r8
 8005990:	4631      	mov	r1, r6
 8005992:	4628      	mov	r0, r5
 8005994:	47b8      	blx	r7
 8005996:	3001      	adds	r0, #1
 8005998:	d12c      	bne.n	80059f4 <_printf_float+0x250>
 800599a:	e764      	b.n	8005866 <_printf_float+0xc2>
 800599c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80059a0:	f240 80e0 	bls.w	8005b64 <_printf_float+0x3c0>
 80059a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80059a8:	2200      	movs	r2, #0
 80059aa:	2300      	movs	r3, #0
 80059ac:	f7fb f8ac 	bl	8000b08 <__aeabi_dcmpeq>
 80059b0:	2800      	cmp	r0, #0
 80059b2:	d034      	beq.n	8005a1e <_printf_float+0x27a>
 80059b4:	4a37      	ldr	r2, [pc, #220]	; (8005a94 <_printf_float+0x2f0>)
 80059b6:	2301      	movs	r3, #1
 80059b8:	4631      	mov	r1, r6
 80059ba:	4628      	mov	r0, r5
 80059bc:	47b8      	blx	r7
 80059be:	3001      	adds	r0, #1
 80059c0:	f43f af51 	beq.w	8005866 <_printf_float+0xc2>
 80059c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059c8:	429a      	cmp	r2, r3
 80059ca:	db02      	blt.n	80059d2 <_printf_float+0x22e>
 80059cc:	6823      	ldr	r3, [r4, #0]
 80059ce:	07d8      	lsls	r0, r3, #31
 80059d0:	d510      	bpl.n	80059f4 <_printf_float+0x250>
 80059d2:	ee18 3a10 	vmov	r3, s16
 80059d6:	4652      	mov	r2, sl
 80059d8:	4631      	mov	r1, r6
 80059da:	4628      	mov	r0, r5
 80059dc:	47b8      	blx	r7
 80059de:	3001      	adds	r0, #1
 80059e0:	f43f af41 	beq.w	8005866 <_printf_float+0xc2>
 80059e4:	f04f 0800 	mov.w	r8, #0
 80059e8:	f104 091a 	add.w	r9, r4, #26
 80059ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059ee:	3b01      	subs	r3, #1
 80059f0:	4543      	cmp	r3, r8
 80059f2:	dc09      	bgt.n	8005a08 <_printf_float+0x264>
 80059f4:	6823      	ldr	r3, [r4, #0]
 80059f6:	079b      	lsls	r3, r3, #30
 80059f8:	f100 8105 	bmi.w	8005c06 <_printf_float+0x462>
 80059fc:	68e0      	ldr	r0, [r4, #12]
 80059fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a00:	4298      	cmp	r0, r3
 8005a02:	bfb8      	it	lt
 8005a04:	4618      	movlt	r0, r3
 8005a06:	e730      	b.n	800586a <_printf_float+0xc6>
 8005a08:	2301      	movs	r3, #1
 8005a0a:	464a      	mov	r2, r9
 8005a0c:	4631      	mov	r1, r6
 8005a0e:	4628      	mov	r0, r5
 8005a10:	47b8      	blx	r7
 8005a12:	3001      	adds	r0, #1
 8005a14:	f43f af27 	beq.w	8005866 <_printf_float+0xc2>
 8005a18:	f108 0801 	add.w	r8, r8, #1
 8005a1c:	e7e6      	b.n	80059ec <_printf_float+0x248>
 8005a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	dc39      	bgt.n	8005a98 <_printf_float+0x2f4>
 8005a24:	4a1b      	ldr	r2, [pc, #108]	; (8005a94 <_printf_float+0x2f0>)
 8005a26:	2301      	movs	r3, #1
 8005a28:	4631      	mov	r1, r6
 8005a2a:	4628      	mov	r0, r5
 8005a2c:	47b8      	blx	r7
 8005a2e:	3001      	adds	r0, #1
 8005a30:	f43f af19 	beq.w	8005866 <_printf_float+0xc2>
 8005a34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	d102      	bne.n	8005a42 <_printf_float+0x29e>
 8005a3c:	6823      	ldr	r3, [r4, #0]
 8005a3e:	07d9      	lsls	r1, r3, #31
 8005a40:	d5d8      	bpl.n	80059f4 <_printf_float+0x250>
 8005a42:	ee18 3a10 	vmov	r3, s16
 8005a46:	4652      	mov	r2, sl
 8005a48:	4631      	mov	r1, r6
 8005a4a:	4628      	mov	r0, r5
 8005a4c:	47b8      	blx	r7
 8005a4e:	3001      	adds	r0, #1
 8005a50:	f43f af09 	beq.w	8005866 <_printf_float+0xc2>
 8005a54:	f04f 0900 	mov.w	r9, #0
 8005a58:	f104 0a1a 	add.w	sl, r4, #26
 8005a5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a5e:	425b      	negs	r3, r3
 8005a60:	454b      	cmp	r3, r9
 8005a62:	dc01      	bgt.n	8005a68 <_printf_float+0x2c4>
 8005a64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a66:	e792      	b.n	800598e <_printf_float+0x1ea>
 8005a68:	2301      	movs	r3, #1
 8005a6a:	4652      	mov	r2, sl
 8005a6c:	4631      	mov	r1, r6
 8005a6e:	4628      	mov	r0, r5
 8005a70:	47b8      	blx	r7
 8005a72:	3001      	adds	r0, #1
 8005a74:	f43f aef7 	beq.w	8005866 <_printf_float+0xc2>
 8005a78:	f109 0901 	add.w	r9, r9, #1
 8005a7c:	e7ee      	b.n	8005a5c <_printf_float+0x2b8>
 8005a7e:	bf00      	nop
 8005a80:	7fefffff 	.word	0x7fefffff
 8005a84:	0800a204 	.word	0x0800a204
 8005a88:	0800a208 	.word	0x0800a208
 8005a8c:	0800a210 	.word	0x0800a210
 8005a90:	0800a20c 	.word	0x0800a20c
 8005a94:	0800a214 	.word	0x0800a214
 8005a98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	bfa8      	it	ge
 8005aa0:	461a      	movge	r2, r3
 8005aa2:	2a00      	cmp	r2, #0
 8005aa4:	4691      	mov	r9, r2
 8005aa6:	dc37      	bgt.n	8005b18 <_printf_float+0x374>
 8005aa8:	f04f 0b00 	mov.w	fp, #0
 8005aac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ab0:	f104 021a 	add.w	r2, r4, #26
 8005ab4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ab6:	9305      	str	r3, [sp, #20]
 8005ab8:	eba3 0309 	sub.w	r3, r3, r9
 8005abc:	455b      	cmp	r3, fp
 8005abe:	dc33      	bgt.n	8005b28 <_printf_float+0x384>
 8005ac0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	db3b      	blt.n	8005b40 <_printf_float+0x39c>
 8005ac8:	6823      	ldr	r3, [r4, #0]
 8005aca:	07da      	lsls	r2, r3, #31
 8005acc:	d438      	bmi.n	8005b40 <_printf_float+0x39c>
 8005ace:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ad0:	9a05      	ldr	r2, [sp, #20]
 8005ad2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ad4:	1a9a      	subs	r2, r3, r2
 8005ad6:	eba3 0901 	sub.w	r9, r3, r1
 8005ada:	4591      	cmp	r9, r2
 8005adc:	bfa8      	it	ge
 8005ade:	4691      	movge	r9, r2
 8005ae0:	f1b9 0f00 	cmp.w	r9, #0
 8005ae4:	dc35      	bgt.n	8005b52 <_printf_float+0x3ae>
 8005ae6:	f04f 0800 	mov.w	r8, #0
 8005aea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005aee:	f104 0a1a 	add.w	sl, r4, #26
 8005af2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005af6:	1a9b      	subs	r3, r3, r2
 8005af8:	eba3 0309 	sub.w	r3, r3, r9
 8005afc:	4543      	cmp	r3, r8
 8005afe:	f77f af79 	ble.w	80059f4 <_printf_float+0x250>
 8005b02:	2301      	movs	r3, #1
 8005b04:	4652      	mov	r2, sl
 8005b06:	4631      	mov	r1, r6
 8005b08:	4628      	mov	r0, r5
 8005b0a:	47b8      	blx	r7
 8005b0c:	3001      	adds	r0, #1
 8005b0e:	f43f aeaa 	beq.w	8005866 <_printf_float+0xc2>
 8005b12:	f108 0801 	add.w	r8, r8, #1
 8005b16:	e7ec      	b.n	8005af2 <_printf_float+0x34e>
 8005b18:	4613      	mov	r3, r2
 8005b1a:	4631      	mov	r1, r6
 8005b1c:	4642      	mov	r2, r8
 8005b1e:	4628      	mov	r0, r5
 8005b20:	47b8      	blx	r7
 8005b22:	3001      	adds	r0, #1
 8005b24:	d1c0      	bne.n	8005aa8 <_printf_float+0x304>
 8005b26:	e69e      	b.n	8005866 <_printf_float+0xc2>
 8005b28:	2301      	movs	r3, #1
 8005b2a:	4631      	mov	r1, r6
 8005b2c:	4628      	mov	r0, r5
 8005b2e:	9205      	str	r2, [sp, #20]
 8005b30:	47b8      	blx	r7
 8005b32:	3001      	adds	r0, #1
 8005b34:	f43f ae97 	beq.w	8005866 <_printf_float+0xc2>
 8005b38:	9a05      	ldr	r2, [sp, #20]
 8005b3a:	f10b 0b01 	add.w	fp, fp, #1
 8005b3e:	e7b9      	b.n	8005ab4 <_printf_float+0x310>
 8005b40:	ee18 3a10 	vmov	r3, s16
 8005b44:	4652      	mov	r2, sl
 8005b46:	4631      	mov	r1, r6
 8005b48:	4628      	mov	r0, r5
 8005b4a:	47b8      	blx	r7
 8005b4c:	3001      	adds	r0, #1
 8005b4e:	d1be      	bne.n	8005ace <_printf_float+0x32a>
 8005b50:	e689      	b.n	8005866 <_printf_float+0xc2>
 8005b52:	9a05      	ldr	r2, [sp, #20]
 8005b54:	464b      	mov	r3, r9
 8005b56:	4442      	add	r2, r8
 8005b58:	4631      	mov	r1, r6
 8005b5a:	4628      	mov	r0, r5
 8005b5c:	47b8      	blx	r7
 8005b5e:	3001      	adds	r0, #1
 8005b60:	d1c1      	bne.n	8005ae6 <_printf_float+0x342>
 8005b62:	e680      	b.n	8005866 <_printf_float+0xc2>
 8005b64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b66:	2a01      	cmp	r2, #1
 8005b68:	dc01      	bgt.n	8005b6e <_printf_float+0x3ca>
 8005b6a:	07db      	lsls	r3, r3, #31
 8005b6c:	d538      	bpl.n	8005be0 <_printf_float+0x43c>
 8005b6e:	2301      	movs	r3, #1
 8005b70:	4642      	mov	r2, r8
 8005b72:	4631      	mov	r1, r6
 8005b74:	4628      	mov	r0, r5
 8005b76:	47b8      	blx	r7
 8005b78:	3001      	adds	r0, #1
 8005b7a:	f43f ae74 	beq.w	8005866 <_printf_float+0xc2>
 8005b7e:	ee18 3a10 	vmov	r3, s16
 8005b82:	4652      	mov	r2, sl
 8005b84:	4631      	mov	r1, r6
 8005b86:	4628      	mov	r0, r5
 8005b88:	47b8      	blx	r7
 8005b8a:	3001      	adds	r0, #1
 8005b8c:	f43f ae6b 	beq.w	8005866 <_printf_float+0xc2>
 8005b90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b94:	2200      	movs	r2, #0
 8005b96:	2300      	movs	r3, #0
 8005b98:	f7fa ffb6 	bl	8000b08 <__aeabi_dcmpeq>
 8005b9c:	b9d8      	cbnz	r0, 8005bd6 <_printf_float+0x432>
 8005b9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ba0:	f108 0201 	add.w	r2, r8, #1
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	4631      	mov	r1, r6
 8005ba8:	4628      	mov	r0, r5
 8005baa:	47b8      	blx	r7
 8005bac:	3001      	adds	r0, #1
 8005bae:	d10e      	bne.n	8005bce <_printf_float+0x42a>
 8005bb0:	e659      	b.n	8005866 <_printf_float+0xc2>
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	4652      	mov	r2, sl
 8005bb6:	4631      	mov	r1, r6
 8005bb8:	4628      	mov	r0, r5
 8005bba:	47b8      	blx	r7
 8005bbc:	3001      	adds	r0, #1
 8005bbe:	f43f ae52 	beq.w	8005866 <_printf_float+0xc2>
 8005bc2:	f108 0801 	add.w	r8, r8, #1
 8005bc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	4543      	cmp	r3, r8
 8005bcc:	dcf1      	bgt.n	8005bb2 <_printf_float+0x40e>
 8005bce:	464b      	mov	r3, r9
 8005bd0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005bd4:	e6dc      	b.n	8005990 <_printf_float+0x1ec>
 8005bd6:	f04f 0800 	mov.w	r8, #0
 8005bda:	f104 0a1a 	add.w	sl, r4, #26
 8005bde:	e7f2      	b.n	8005bc6 <_printf_float+0x422>
 8005be0:	2301      	movs	r3, #1
 8005be2:	4642      	mov	r2, r8
 8005be4:	e7df      	b.n	8005ba6 <_printf_float+0x402>
 8005be6:	2301      	movs	r3, #1
 8005be8:	464a      	mov	r2, r9
 8005bea:	4631      	mov	r1, r6
 8005bec:	4628      	mov	r0, r5
 8005bee:	47b8      	blx	r7
 8005bf0:	3001      	adds	r0, #1
 8005bf2:	f43f ae38 	beq.w	8005866 <_printf_float+0xc2>
 8005bf6:	f108 0801 	add.w	r8, r8, #1
 8005bfa:	68e3      	ldr	r3, [r4, #12]
 8005bfc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005bfe:	1a5b      	subs	r3, r3, r1
 8005c00:	4543      	cmp	r3, r8
 8005c02:	dcf0      	bgt.n	8005be6 <_printf_float+0x442>
 8005c04:	e6fa      	b.n	80059fc <_printf_float+0x258>
 8005c06:	f04f 0800 	mov.w	r8, #0
 8005c0a:	f104 0919 	add.w	r9, r4, #25
 8005c0e:	e7f4      	b.n	8005bfa <_printf_float+0x456>

08005c10 <_printf_common>:
 8005c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c14:	4616      	mov	r6, r2
 8005c16:	4699      	mov	r9, r3
 8005c18:	688a      	ldr	r2, [r1, #8]
 8005c1a:	690b      	ldr	r3, [r1, #16]
 8005c1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c20:	4293      	cmp	r3, r2
 8005c22:	bfb8      	it	lt
 8005c24:	4613      	movlt	r3, r2
 8005c26:	6033      	str	r3, [r6, #0]
 8005c28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c2c:	4607      	mov	r7, r0
 8005c2e:	460c      	mov	r4, r1
 8005c30:	b10a      	cbz	r2, 8005c36 <_printf_common+0x26>
 8005c32:	3301      	adds	r3, #1
 8005c34:	6033      	str	r3, [r6, #0]
 8005c36:	6823      	ldr	r3, [r4, #0]
 8005c38:	0699      	lsls	r1, r3, #26
 8005c3a:	bf42      	ittt	mi
 8005c3c:	6833      	ldrmi	r3, [r6, #0]
 8005c3e:	3302      	addmi	r3, #2
 8005c40:	6033      	strmi	r3, [r6, #0]
 8005c42:	6825      	ldr	r5, [r4, #0]
 8005c44:	f015 0506 	ands.w	r5, r5, #6
 8005c48:	d106      	bne.n	8005c58 <_printf_common+0x48>
 8005c4a:	f104 0a19 	add.w	sl, r4, #25
 8005c4e:	68e3      	ldr	r3, [r4, #12]
 8005c50:	6832      	ldr	r2, [r6, #0]
 8005c52:	1a9b      	subs	r3, r3, r2
 8005c54:	42ab      	cmp	r3, r5
 8005c56:	dc26      	bgt.n	8005ca6 <_printf_common+0x96>
 8005c58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c5c:	1e13      	subs	r3, r2, #0
 8005c5e:	6822      	ldr	r2, [r4, #0]
 8005c60:	bf18      	it	ne
 8005c62:	2301      	movne	r3, #1
 8005c64:	0692      	lsls	r2, r2, #26
 8005c66:	d42b      	bmi.n	8005cc0 <_printf_common+0xb0>
 8005c68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c6c:	4649      	mov	r1, r9
 8005c6e:	4638      	mov	r0, r7
 8005c70:	47c0      	blx	r8
 8005c72:	3001      	adds	r0, #1
 8005c74:	d01e      	beq.n	8005cb4 <_printf_common+0xa4>
 8005c76:	6823      	ldr	r3, [r4, #0]
 8005c78:	68e5      	ldr	r5, [r4, #12]
 8005c7a:	6832      	ldr	r2, [r6, #0]
 8005c7c:	f003 0306 	and.w	r3, r3, #6
 8005c80:	2b04      	cmp	r3, #4
 8005c82:	bf08      	it	eq
 8005c84:	1aad      	subeq	r5, r5, r2
 8005c86:	68a3      	ldr	r3, [r4, #8]
 8005c88:	6922      	ldr	r2, [r4, #16]
 8005c8a:	bf0c      	ite	eq
 8005c8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c90:	2500      	movne	r5, #0
 8005c92:	4293      	cmp	r3, r2
 8005c94:	bfc4      	itt	gt
 8005c96:	1a9b      	subgt	r3, r3, r2
 8005c98:	18ed      	addgt	r5, r5, r3
 8005c9a:	2600      	movs	r6, #0
 8005c9c:	341a      	adds	r4, #26
 8005c9e:	42b5      	cmp	r5, r6
 8005ca0:	d11a      	bne.n	8005cd8 <_printf_common+0xc8>
 8005ca2:	2000      	movs	r0, #0
 8005ca4:	e008      	b.n	8005cb8 <_printf_common+0xa8>
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	4652      	mov	r2, sl
 8005caa:	4649      	mov	r1, r9
 8005cac:	4638      	mov	r0, r7
 8005cae:	47c0      	blx	r8
 8005cb0:	3001      	adds	r0, #1
 8005cb2:	d103      	bne.n	8005cbc <_printf_common+0xac>
 8005cb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cbc:	3501      	adds	r5, #1
 8005cbe:	e7c6      	b.n	8005c4e <_printf_common+0x3e>
 8005cc0:	18e1      	adds	r1, r4, r3
 8005cc2:	1c5a      	adds	r2, r3, #1
 8005cc4:	2030      	movs	r0, #48	; 0x30
 8005cc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005cca:	4422      	add	r2, r4
 8005ccc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005cd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005cd4:	3302      	adds	r3, #2
 8005cd6:	e7c7      	b.n	8005c68 <_printf_common+0x58>
 8005cd8:	2301      	movs	r3, #1
 8005cda:	4622      	mov	r2, r4
 8005cdc:	4649      	mov	r1, r9
 8005cde:	4638      	mov	r0, r7
 8005ce0:	47c0      	blx	r8
 8005ce2:	3001      	adds	r0, #1
 8005ce4:	d0e6      	beq.n	8005cb4 <_printf_common+0xa4>
 8005ce6:	3601      	adds	r6, #1
 8005ce8:	e7d9      	b.n	8005c9e <_printf_common+0x8e>
	...

08005cec <_printf_i>:
 8005cec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cf0:	7e0f      	ldrb	r7, [r1, #24]
 8005cf2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005cf4:	2f78      	cmp	r7, #120	; 0x78
 8005cf6:	4691      	mov	r9, r2
 8005cf8:	4680      	mov	r8, r0
 8005cfa:	460c      	mov	r4, r1
 8005cfc:	469a      	mov	sl, r3
 8005cfe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d02:	d807      	bhi.n	8005d14 <_printf_i+0x28>
 8005d04:	2f62      	cmp	r7, #98	; 0x62
 8005d06:	d80a      	bhi.n	8005d1e <_printf_i+0x32>
 8005d08:	2f00      	cmp	r7, #0
 8005d0a:	f000 80d8 	beq.w	8005ebe <_printf_i+0x1d2>
 8005d0e:	2f58      	cmp	r7, #88	; 0x58
 8005d10:	f000 80a3 	beq.w	8005e5a <_printf_i+0x16e>
 8005d14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d1c:	e03a      	b.n	8005d94 <_printf_i+0xa8>
 8005d1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d22:	2b15      	cmp	r3, #21
 8005d24:	d8f6      	bhi.n	8005d14 <_printf_i+0x28>
 8005d26:	a101      	add	r1, pc, #4	; (adr r1, 8005d2c <_printf_i+0x40>)
 8005d28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d2c:	08005d85 	.word	0x08005d85
 8005d30:	08005d99 	.word	0x08005d99
 8005d34:	08005d15 	.word	0x08005d15
 8005d38:	08005d15 	.word	0x08005d15
 8005d3c:	08005d15 	.word	0x08005d15
 8005d40:	08005d15 	.word	0x08005d15
 8005d44:	08005d99 	.word	0x08005d99
 8005d48:	08005d15 	.word	0x08005d15
 8005d4c:	08005d15 	.word	0x08005d15
 8005d50:	08005d15 	.word	0x08005d15
 8005d54:	08005d15 	.word	0x08005d15
 8005d58:	08005ea5 	.word	0x08005ea5
 8005d5c:	08005dc9 	.word	0x08005dc9
 8005d60:	08005e87 	.word	0x08005e87
 8005d64:	08005d15 	.word	0x08005d15
 8005d68:	08005d15 	.word	0x08005d15
 8005d6c:	08005ec7 	.word	0x08005ec7
 8005d70:	08005d15 	.word	0x08005d15
 8005d74:	08005dc9 	.word	0x08005dc9
 8005d78:	08005d15 	.word	0x08005d15
 8005d7c:	08005d15 	.word	0x08005d15
 8005d80:	08005e8f 	.word	0x08005e8f
 8005d84:	682b      	ldr	r3, [r5, #0]
 8005d86:	1d1a      	adds	r2, r3, #4
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	602a      	str	r2, [r5, #0]
 8005d8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d94:	2301      	movs	r3, #1
 8005d96:	e0a3      	b.n	8005ee0 <_printf_i+0x1f4>
 8005d98:	6820      	ldr	r0, [r4, #0]
 8005d9a:	6829      	ldr	r1, [r5, #0]
 8005d9c:	0606      	lsls	r6, r0, #24
 8005d9e:	f101 0304 	add.w	r3, r1, #4
 8005da2:	d50a      	bpl.n	8005dba <_printf_i+0xce>
 8005da4:	680e      	ldr	r6, [r1, #0]
 8005da6:	602b      	str	r3, [r5, #0]
 8005da8:	2e00      	cmp	r6, #0
 8005daa:	da03      	bge.n	8005db4 <_printf_i+0xc8>
 8005dac:	232d      	movs	r3, #45	; 0x2d
 8005dae:	4276      	negs	r6, r6
 8005db0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005db4:	485e      	ldr	r0, [pc, #376]	; (8005f30 <_printf_i+0x244>)
 8005db6:	230a      	movs	r3, #10
 8005db8:	e019      	b.n	8005dee <_printf_i+0x102>
 8005dba:	680e      	ldr	r6, [r1, #0]
 8005dbc:	602b      	str	r3, [r5, #0]
 8005dbe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005dc2:	bf18      	it	ne
 8005dc4:	b236      	sxthne	r6, r6
 8005dc6:	e7ef      	b.n	8005da8 <_printf_i+0xbc>
 8005dc8:	682b      	ldr	r3, [r5, #0]
 8005dca:	6820      	ldr	r0, [r4, #0]
 8005dcc:	1d19      	adds	r1, r3, #4
 8005dce:	6029      	str	r1, [r5, #0]
 8005dd0:	0601      	lsls	r1, r0, #24
 8005dd2:	d501      	bpl.n	8005dd8 <_printf_i+0xec>
 8005dd4:	681e      	ldr	r6, [r3, #0]
 8005dd6:	e002      	b.n	8005dde <_printf_i+0xf2>
 8005dd8:	0646      	lsls	r6, r0, #25
 8005dda:	d5fb      	bpl.n	8005dd4 <_printf_i+0xe8>
 8005ddc:	881e      	ldrh	r6, [r3, #0]
 8005dde:	4854      	ldr	r0, [pc, #336]	; (8005f30 <_printf_i+0x244>)
 8005de0:	2f6f      	cmp	r7, #111	; 0x6f
 8005de2:	bf0c      	ite	eq
 8005de4:	2308      	moveq	r3, #8
 8005de6:	230a      	movne	r3, #10
 8005de8:	2100      	movs	r1, #0
 8005dea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005dee:	6865      	ldr	r5, [r4, #4]
 8005df0:	60a5      	str	r5, [r4, #8]
 8005df2:	2d00      	cmp	r5, #0
 8005df4:	bfa2      	ittt	ge
 8005df6:	6821      	ldrge	r1, [r4, #0]
 8005df8:	f021 0104 	bicge.w	r1, r1, #4
 8005dfc:	6021      	strge	r1, [r4, #0]
 8005dfe:	b90e      	cbnz	r6, 8005e04 <_printf_i+0x118>
 8005e00:	2d00      	cmp	r5, #0
 8005e02:	d04d      	beq.n	8005ea0 <_printf_i+0x1b4>
 8005e04:	4615      	mov	r5, r2
 8005e06:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e0a:	fb03 6711 	mls	r7, r3, r1, r6
 8005e0e:	5dc7      	ldrb	r7, [r0, r7]
 8005e10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e14:	4637      	mov	r7, r6
 8005e16:	42bb      	cmp	r3, r7
 8005e18:	460e      	mov	r6, r1
 8005e1a:	d9f4      	bls.n	8005e06 <_printf_i+0x11a>
 8005e1c:	2b08      	cmp	r3, #8
 8005e1e:	d10b      	bne.n	8005e38 <_printf_i+0x14c>
 8005e20:	6823      	ldr	r3, [r4, #0]
 8005e22:	07de      	lsls	r6, r3, #31
 8005e24:	d508      	bpl.n	8005e38 <_printf_i+0x14c>
 8005e26:	6923      	ldr	r3, [r4, #16]
 8005e28:	6861      	ldr	r1, [r4, #4]
 8005e2a:	4299      	cmp	r1, r3
 8005e2c:	bfde      	ittt	le
 8005e2e:	2330      	movle	r3, #48	; 0x30
 8005e30:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e34:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005e38:	1b52      	subs	r2, r2, r5
 8005e3a:	6122      	str	r2, [r4, #16]
 8005e3c:	f8cd a000 	str.w	sl, [sp]
 8005e40:	464b      	mov	r3, r9
 8005e42:	aa03      	add	r2, sp, #12
 8005e44:	4621      	mov	r1, r4
 8005e46:	4640      	mov	r0, r8
 8005e48:	f7ff fee2 	bl	8005c10 <_printf_common>
 8005e4c:	3001      	adds	r0, #1
 8005e4e:	d14c      	bne.n	8005eea <_printf_i+0x1fe>
 8005e50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e54:	b004      	add	sp, #16
 8005e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e5a:	4835      	ldr	r0, [pc, #212]	; (8005f30 <_printf_i+0x244>)
 8005e5c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005e60:	6829      	ldr	r1, [r5, #0]
 8005e62:	6823      	ldr	r3, [r4, #0]
 8005e64:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e68:	6029      	str	r1, [r5, #0]
 8005e6a:	061d      	lsls	r5, r3, #24
 8005e6c:	d514      	bpl.n	8005e98 <_printf_i+0x1ac>
 8005e6e:	07df      	lsls	r7, r3, #31
 8005e70:	bf44      	itt	mi
 8005e72:	f043 0320 	orrmi.w	r3, r3, #32
 8005e76:	6023      	strmi	r3, [r4, #0]
 8005e78:	b91e      	cbnz	r6, 8005e82 <_printf_i+0x196>
 8005e7a:	6823      	ldr	r3, [r4, #0]
 8005e7c:	f023 0320 	bic.w	r3, r3, #32
 8005e80:	6023      	str	r3, [r4, #0]
 8005e82:	2310      	movs	r3, #16
 8005e84:	e7b0      	b.n	8005de8 <_printf_i+0xfc>
 8005e86:	6823      	ldr	r3, [r4, #0]
 8005e88:	f043 0320 	orr.w	r3, r3, #32
 8005e8c:	6023      	str	r3, [r4, #0]
 8005e8e:	2378      	movs	r3, #120	; 0x78
 8005e90:	4828      	ldr	r0, [pc, #160]	; (8005f34 <_printf_i+0x248>)
 8005e92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e96:	e7e3      	b.n	8005e60 <_printf_i+0x174>
 8005e98:	0659      	lsls	r1, r3, #25
 8005e9a:	bf48      	it	mi
 8005e9c:	b2b6      	uxthmi	r6, r6
 8005e9e:	e7e6      	b.n	8005e6e <_printf_i+0x182>
 8005ea0:	4615      	mov	r5, r2
 8005ea2:	e7bb      	b.n	8005e1c <_printf_i+0x130>
 8005ea4:	682b      	ldr	r3, [r5, #0]
 8005ea6:	6826      	ldr	r6, [r4, #0]
 8005ea8:	6961      	ldr	r1, [r4, #20]
 8005eaa:	1d18      	adds	r0, r3, #4
 8005eac:	6028      	str	r0, [r5, #0]
 8005eae:	0635      	lsls	r5, r6, #24
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	d501      	bpl.n	8005eb8 <_printf_i+0x1cc>
 8005eb4:	6019      	str	r1, [r3, #0]
 8005eb6:	e002      	b.n	8005ebe <_printf_i+0x1d2>
 8005eb8:	0670      	lsls	r0, r6, #25
 8005eba:	d5fb      	bpl.n	8005eb4 <_printf_i+0x1c8>
 8005ebc:	8019      	strh	r1, [r3, #0]
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	6123      	str	r3, [r4, #16]
 8005ec2:	4615      	mov	r5, r2
 8005ec4:	e7ba      	b.n	8005e3c <_printf_i+0x150>
 8005ec6:	682b      	ldr	r3, [r5, #0]
 8005ec8:	1d1a      	adds	r2, r3, #4
 8005eca:	602a      	str	r2, [r5, #0]
 8005ecc:	681d      	ldr	r5, [r3, #0]
 8005ece:	6862      	ldr	r2, [r4, #4]
 8005ed0:	2100      	movs	r1, #0
 8005ed2:	4628      	mov	r0, r5
 8005ed4:	f7fa f9a4 	bl	8000220 <memchr>
 8005ed8:	b108      	cbz	r0, 8005ede <_printf_i+0x1f2>
 8005eda:	1b40      	subs	r0, r0, r5
 8005edc:	6060      	str	r0, [r4, #4]
 8005ede:	6863      	ldr	r3, [r4, #4]
 8005ee0:	6123      	str	r3, [r4, #16]
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ee8:	e7a8      	b.n	8005e3c <_printf_i+0x150>
 8005eea:	6923      	ldr	r3, [r4, #16]
 8005eec:	462a      	mov	r2, r5
 8005eee:	4649      	mov	r1, r9
 8005ef0:	4640      	mov	r0, r8
 8005ef2:	47d0      	blx	sl
 8005ef4:	3001      	adds	r0, #1
 8005ef6:	d0ab      	beq.n	8005e50 <_printf_i+0x164>
 8005ef8:	6823      	ldr	r3, [r4, #0]
 8005efa:	079b      	lsls	r3, r3, #30
 8005efc:	d413      	bmi.n	8005f26 <_printf_i+0x23a>
 8005efe:	68e0      	ldr	r0, [r4, #12]
 8005f00:	9b03      	ldr	r3, [sp, #12]
 8005f02:	4298      	cmp	r0, r3
 8005f04:	bfb8      	it	lt
 8005f06:	4618      	movlt	r0, r3
 8005f08:	e7a4      	b.n	8005e54 <_printf_i+0x168>
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	4632      	mov	r2, r6
 8005f0e:	4649      	mov	r1, r9
 8005f10:	4640      	mov	r0, r8
 8005f12:	47d0      	blx	sl
 8005f14:	3001      	adds	r0, #1
 8005f16:	d09b      	beq.n	8005e50 <_printf_i+0x164>
 8005f18:	3501      	adds	r5, #1
 8005f1a:	68e3      	ldr	r3, [r4, #12]
 8005f1c:	9903      	ldr	r1, [sp, #12]
 8005f1e:	1a5b      	subs	r3, r3, r1
 8005f20:	42ab      	cmp	r3, r5
 8005f22:	dcf2      	bgt.n	8005f0a <_printf_i+0x21e>
 8005f24:	e7eb      	b.n	8005efe <_printf_i+0x212>
 8005f26:	2500      	movs	r5, #0
 8005f28:	f104 0619 	add.w	r6, r4, #25
 8005f2c:	e7f5      	b.n	8005f1a <_printf_i+0x22e>
 8005f2e:	bf00      	nop
 8005f30:	0800a216 	.word	0x0800a216
 8005f34:	0800a227 	.word	0x0800a227

08005f38 <_scanf_float>:
 8005f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f3c:	b087      	sub	sp, #28
 8005f3e:	4617      	mov	r7, r2
 8005f40:	9303      	str	r3, [sp, #12]
 8005f42:	688b      	ldr	r3, [r1, #8]
 8005f44:	1e5a      	subs	r2, r3, #1
 8005f46:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005f4a:	bf83      	ittte	hi
 8005f4c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005f50:	195b      	addhi	r3, r3, r5
 8005f52:	9302      	strhi	r3, [sp, #8]
 8005f54:	2300      	movls	r3, #0
 8005f56:	bf86      	itte	hi
 8005f58:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005f5c:	608b      	strhi	r3, [r1, #8]
 8005f5e:	9302      	strls	r3, [sp, #8]
 8005f60:	680b      	ldr	r3, [r1, #0]
 8005f62:	468b      	mov	fp, r1
 8005f64:	2500      	movs	r5, #0
 8005f66:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005f6a:	f84b 3b1c 	str.w	r3, [fp], #28
 8005f6e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005f72:	4680      	mov	r8, r0
 8005f74:	460c      	mov	r4, r1
 8005f76:	465e      	mov	r6, fp
 8005f78:	46aa      	mov	sl, r5
 8005f7a:	46a9      	mov	r9, r5
 8005f7c:	9501      	str	r5, [sp, #4]
 8005f7e:	68a2      	ldr	r2, [r4, #8]
 8005f80:	b152      	cbz	r2, 8005f98 <_scanf_float+0x60>
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	2b4e      	cmp	r3, #78	; 0x4e
 8005f88:	d864      	bhi.n	8006054 <_scanf_float+0x11c>
 8005f8a:	2b40      	cmp	r3, #64	; 0x40
 8005f8c:	d83c      	bhi.n	8006008 <_scanf_float+0xd0>
 8005f8e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005f92:	b2c8      	uxtb	r0, r1
 8005f94:	280e      	cmp	r0, #14
 8005f96:	d93a      	bls.n	800600e <_scanf_float+0xd6>
 8005f98:	f1b9 0f00 	cmp.w	r9, #0
 8005f9c:	d003      	beq.n	8005fa6 <_scanf_float+0x6e>
 8005f9e:	6823      	ldr	r3, [r4, #0]
 8005fa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fa4:	6023      	str	r3, [r4, #0]
 8005fa6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005faa:	f1ba 0f01 	cmp.w	sl, #1
 8005fae:	f200 8113 	bhi.w	80061d8 <_scanf_float+0x2a0>
 8005fb2:	455e      	cmp	r6, fp
 8005fb4:	f200 8105 	bhi.w	80061c2 <_scanf_float+0x28a>
 8005fb8:	2501      	movs	r5, #1
 8005fba:	4628      	mov	r0, r5
 8005fbc:	b007      	add	sp, #28
 8005fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fc2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005fc6:	2a0d      	cmp	r2, #13
 8005fc8:	d8e6      	bhi.n	8005f98 <_scanf_float+0x60>
 8005fca:	a101      	add	r1, pc, #4	; (adr r1, 8005fd0 <_scanf_float+0x98>)
 8005fcc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005fd0:	0800610f 	.word	0x0800610f
 8005fd4:	08005f99 	.word	0x08005f99
 8005fd8:	08005f99 	.word	0x08005f99
 8005fdc:	08005f99 	.word	0x08005f99
 8005fe0:	0800616f 	.word	0x0800616f
 8005fe4:	08006147 	.word	0x08006147
 8005fe8:	08005f99 	.word	0x08005f99
 8005fec:	08005f99 	.word	0x08005f99
 8005ff0:	0800611d 	.word	0x0800611d
 8005ff4:	08005f99 	.word	0x08005f99
 8005ff8:	08005f99 	.word	0x08005f99
 8005ffc:	08005f99 	.word	0x08005f99
 8006000:	08005f99 	.word	0x08005f99
 8006004:	080060d5 	.word	0x080060d5
 8006008:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800600c:	e7db      	b.n	8005fc6 <_scanf_float+0x8e>
 800600e:	290e      	cmp	r1, #14
 8006010:	d8c2      	bhi.n	8005f98 <_scanf_float+0x60>
 8006012:	a001      	add	r0, pc, #4	; (adr r0, 8006018 <_scanf_float+0xe0>)
 8006014:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006018:	080060c7 	.word	0x080060c7
 800601c:	08005f99 	.word	0x08005f99
 8006020:	080060c7 	.word	0x080060c7
 8006024:	0800615b 	.word	0x0800615b
 8006028:	08005f99 	.word	0x08005f99
 800602c:	08006075 	.word	0x08006075
 8006030:	080060b1 	.word	0x080060b1
 8006034:	080060b1 	.word	0x080060b1
 8006038:	080060b1 	.word	0x080060b1
 800603c:	080060b1 	.word	0x080060b1
 8006040:	080060b1 	.word	0x080060b1
 8006044:	080060b1 	.word	0x080060b1
 8006048:	080060b1 	.word	0x080060b1
 800604c:	080060b1 	.word	0x080060b1
 8006050:	080060b1 	.word	0x080060b1
 8006054:	2b6e      	cmp	r3, #110	; 0x6e
 8006056:	d809      	bhi.n	800606c <_scanf_float+0x134>
 8006058:	2b60      	cmp	r3, #96	; 0x60
 800605a:	d8b2      	bhi.n	8005fc2 <_scanf_float+0x8a>
 800605c:	2b54      	cmp	r3, #84	; 0x54
 800605e:	d077      	beq.n	8006150 <_scanf_float+0x218>
 8006060:	2b59      	cmp	r3, #89	; 0x59
 8006062:	d199      	bne.n	8005f98 <_scanf_float+0x60>
 8006064:	2d07      	cmp	r5, #7
 8006066:	d197      	bne.n	8005f98 <_scanf_float+0x60>
 8006068:	2508      	movs	r5, #8
 800606a:	e029      	b.n	80060c0 <_scanf_float+0x188>
 800606c:	2b74      	cmp	r3, #116	; 0x74
 800606e:	d06f      	beq.n	8006150 <_scanf_float+0x218>
 8006070:	2b79      	cmp	r3, #121	; 0x79
 8006072:	e7f6      	b.n	8006062 <_scanf_float+0x12a>
 8006074:	6821      	ldr	r1, [r4, #0]
 8006076:	05c8      	lsls	r0, r1, #23
 8006078:	d51a      	bpl.n	80060b0 <_scanf_float+0x178>
 800607a:	9b02      	ldr	r3, [sp, #8]
 800607c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006080:	6021      	str	r1, [r4, #0]
 8006082:	f109 0901 	add.w	r9, r9, #1
 8006086:	b11b      	cbz	r3, 8006090 <_scanf_float+0x158>
 8006088:	3b01      	subs	r3, #1
 800608a:	3201      	adds	r2, #1
 800608c:	9302      	str	r3, [sp, #8]
 800608e:	60a2      	str	r2, [r4, #8]
 8006090:	68a3      	ldr	r3, [r4, #8]
 8006092:	3b01      	subs	r3, #1
 8006094:	60a3      	str	r3, [r4, #8]
 8006096:	6923      	ldr	r3, [r4, #16]
 8006098:	3301      	adds	r3, #1
 800609a:	6123      	str	r3, [r4, #16]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	3b01      	subs	r3, #1
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	607b      	str	r3, [r7, #4]
 80060a4:	f340 8084 	ble.w	80061b0 <_scanf_float+0x278>
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	3301      	adds	r3, #1
 80060ac:	603b      	str	r3, [r7, #0]
 80060ae:	e766      	b.n	8005f7e <_scanf_float+0x46>
 80060b0:	eb1a 0f05 	cmn.w	sl, r5
 80060b4:	f47f af70 	bne.w	8005f98 <_scanf_float+0x60>
 80060b8:	6822      	ldr	r2, [r4, #0]
 80060ba:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80060be:	6022      	str	r2, [r4, #0]
 80060c0:	f806 3b01 	strb.w	r3, [r6], #1
 80060c4:	e7e4      	b.n	8006090 <_scanf_float+0x158>
 80060c6:	6822      	ldr	r2, [r4, #0]
 80060c8:	0610      	lsls	r0, r2, #24
 80060ca:	f57f af65 	bpl.w	8005f98 <_scanf_float+0x60>
 80060ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060d2:	e7f4      	b.n	80060be <_scanf_float+0x186>
 80060d4:	f1ba 0f00 	cmp.w	sl, #0
 80060d8:	d10e      	bne.n	80060f8 <_scanf_float+0x1c0>
 80060da:	f1b9 0f00 	cmp.w	r9, #0
 80060de:	d10e      	bne.n	80060fe <_scanf_float+0x1c6>
 80060e0:	6822      	ldr	r2, [r4, #0]
 80060e2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80060e6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80060ea:	d108      	bne.n	80060fe <_scanf_float+0x1c6>
 80060ec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80060f0:	6022      	str	r2, [r4, #0]
 80060f2:	f04f 0a01 	mov.w	sl, #1
 80060f6:	e7e3      	b.n	80060c0 <_scanf_float+0x188>
 80060f8:	f1ba 0f02 	cmp.w	sl, #2
 80060fc:	d055      	beq.n	80061aa <_scanf_float+0x272>
 80060fe:	2d01      	cmp	r5, #1
 8006100:	d002      	beq.n	8006108 <_scanf_float+0x1d0>
 8006102:	2d04      	cmp	r5, #4
 8006104:	f47f af48 	bne.w	8005f98 <_scanf_float+0x60>
 8006108:	3501      	adds	r5, #1
 800610a:	b2ed      	uxtb	r5, r5
 800610c:	e7d8      	b.n	80060c0 <_scanf_float+0x188>
 800610e:	f1ba 0f01 	cmp.w	sl, #1
 8006112:	f47f af41 	bne.w	8005f98 <_scanf_float+0x60>
 8006116:	f04f 0a02 	mov.w	sl, #2
 800611a:	e7d1      	b.n	80060c0 <_scanf_float+0x188>
 800611c:	b97d      	cbnz	r5, 800613e <_scanf_float+0x206>
 800611e:	f1b9 0f00 	cmp.w	r9, #0
 8006122:	f47f af3c 	bne.w	8005f9e <_scanf_float+0x66>
 8006126:	6822      	ldr	r2, [r4, #0]
 8006128:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800612c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006130:	f47f af39 	bne.w	8005fa6 <_scanf_float+0x6e>
 8006134:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006138:	6022      	str	r2, [r4, #0]
 800613a:	2501      	movs	r5, #1
 800613c:	e7c0      	b.n	80060c0 <_scanf_float+0x188>
 800613e:	2d03      	cmp	r5, #3
 8006140:	d0e2      	beq.n	8006108 <_scanf_float+0x1d0>
 8006142:	2d05      	cmp	r5, #5
 8006144:	e7de      	b.n	8006104 <_scanf_float+0x1cc>
 8006146:	2d02      	cmp	r5, #2
 8006148:	f47f af26 	bne.w	8005f98 <_scanf_float+0x60>
 800614c:	2503      	movs	r5, #3
 800614e:	e7b7      	b.n	80060c0 <_scanf_float+0x188>
 8006150:	2d06      	cmp	r5, #6
 8006152:	f47f af21 	bne.w	8005f98 <_scanf_float+0x60>
 8006156:	2507      	movs	r5, #7
 8006158:	e7b2      	b.n	80060c0 <_scanf_float+0x188>
 800615a:	6822      	ldr	r2, [r4, #0]
 800615c:	0591      	lsls	r1, r2, #22
 800615e:	f57f af1b 	bpl.w	8005f98 <_scanf_float+0x60>
 8006162:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006166:	6022      	str	r2, [r4, #0]
 8006168:	f8cd 9004 	str.w	r9, [sp, #4]
 800616c:	e7a8      	b.n	80060c0 <_scanf_float+0x188>
 800616e:	6822      	ldr	r2, [r4, #0]
 8006170:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006174:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006178:	d006      	beq.n	8006188 <_scanf_float+0x250>
 800617a:	0550      	lsls	r0, r2, #21
 800617c:	f57f af0c 	bpl.w	8005f98 <_scanf_float+0x60>
 8006180:	f1b9 0f00 	cmp.w	r9, #0
 8006184:	f43f af0f 	beq.w	8005fa6 <_scanf_float+0x6e>
 8006188:	0591      	lsls	r1, r2, #22
 800618a:	bf58      	it	pl
 800618c:	9901      	ldrpl	r1, [sp, #4]
 800618e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006192:	bf58      	it	pl
 8006194:	eba9 0101 	subpl.w	r1, r9, r1
 8006198:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800619c:	bf58      	it	pl
 800619e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80061a2:	6022      	str	r2, [r4, #0]
 80061a4:	f04f 0900 	mov.w	r9, #0
 80061a8:	e78a      	b.n	80060c0 <_scanf_float+0x188>
 80061aa:	f04f 0a03 	mov.w	sl, #3
 80061ae:	e787      	b.n	80060c0 <_scanf_float+0x188>
 80061b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80061b4:	4639      	mov	r1, r7
 80061b6:	4640      	mov	r0, r8
 80061b8:	4798      	blx	r3
 80061ba:	2800      	cmp	r0, #0
 80061bc:	f43f aedf 	beq.w	8005f7e <_scanf_float+0x46>
 80061c0:	e6ea      	b.n	8005f98 <_scanf_float+0x60>
 80061c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80061c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80061ca:	463a      	mov	r2, r7
 80061cc:	4640      	mov	r0, r8
 80061ce:	4798      	blx	r3
 80061d0:	6923      	ldr	r3, [r4, #16]
 80061d2:	3b01      	subs	r3, #1
 80061d4:	6123      	str	r3, [r4, #16]
 80061d6:	e6ec      	b.n	8005fb2 <_scanf_float+0x7a>
 80061d8:	1e6b      	subs	r3, r5, #1
 80061da:	2b06      	cmp	r3, #6
 80061dc:	d825      	bhi.n	800622a <_scanf_float+0x2f2>
 80061de:	2d02      	cmp	r5, #2
 80061e0:	d836      	bhi.n	8006250 <_scanf_float+0x318>
 80061e2:	455e      	cmp	r6, fp
 80061e4:	f67f aee8 	bls.w	8005fb8 <_scanf_float+0x80>
 80061e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80061ec:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80061f0:	463a      	mov	r2, r7
 80061f2:	4640      	mov	r0, r8
 80061f4:	4798      	blx	r3
 80061f6:	6923      	ldr	r3, [r4, #16]
 80061f8:	3b01      	subs	r3, #1
 80061fa:	6123      	str	r3, [r4, #16]
 80061fc:	e7f1      	b.n	80061e2 <_scanf_float+0x2aa>
 80061fe:	9802      	ldr	r0, [sp, #8]
 8006200:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006204:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006208:	9002      	str	r0, [sp, #8]
 800620a:	463a      	mov	r2, r7
 800620c:	4640      	mov	r0, r8
 800620e:	4798      	blx	r3
 8006210:	6923      	ldr	r3, [r4, #16]
 8006212:	3b01      	subs	r3, #1
 8006214:	6123      	str	r3, [r4, #16]
 8006216:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800621a:	fa5f fa8a 	uxtb.w	sl, sl
 800621e:	f1ba 0f02 	cmp.w	sl, #2
 8006222:	d1ec      	bne.n	80061fe <_scanf_float+0x2c6>
 8006224:	3d03      	subs	r5, #3
 8006226:	b2ed      	uxtb	r5, r5
 8006228:	1b76      	subs	r6, r6, r5
 800622a:	6823      	ldr	r3, [r4, #0]
 800622c:	05da      	lsls	r2, r3, #23
 800622e:	d52f      	bpl.n	8006290 <_scanf_float+0x358>
 8006230:	055b      	lsls	r3, r3, #21
 8006232:	d510      	bpl.n	8006256 <_scanf_float+0x31e>
 8006234:	455e      	cmp	r6, fp
 8006236:	f67f aebf 	bls.w	8005fb8 <_scanf_float+0x80>
 800623a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800623e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006242:	463a      	mov	r2, r7
 8006244:	4640      	mov	r0, r8
 8006246:	4798      	blx	r3
 8006248:	6923      	ldr	r3, [r4, #16]
 800624a:	3b01      	subs	r3, #1
 800624c:	6123      	str	r3, [r4, #16]
 800624e:	e7f1      	b.n	8006234 <_scanf_float+0x2fc>
 8006250:	46aa      	mov	sl, r5
 8006252:	9602      	str	r6, [sp, #8]
 8006254:	e7df      	b.n	8006216 <_scanf_float+0x2de>
 8006256:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800625a:	6923      	ldr	r3, [r4, #16]
 800625c:	2965      	cmp	r1, #101	; 0x65
 800625e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8006262:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8006266:	6123      	str	r3, [r4, #16]
 8006268:	d00c      	beq.n	8006284 <_scanf_float+0x34c>
 800626a:	2945      	cmp	r1, #69	; 0x45
 800626c:	d00a      	beq.n	8006284 <_scanf_float+0x34c>
 800626e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006272:	463a      	mov	r2, r7
 8006274:	4640      	mov	r0, r8
 8006276:	4798      	blx	r3
 8006278:	6923      	ldr	r3, [r4, #16]
 800627a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800627e:	3b01      	subs	r3, #1
 8006280:	1eb5      	subs	r5, r6, #2
 8006282:	6123      	str	r3, [r4, #16]
 8006284:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006288:	463a      	mov	r2, r7
 800628a:	4640      	mov	r0, r8
 800628c:	4798      	blx	r3
 800628e:	462e      	mov	r6, r5
 8006290:	6825      	ldr	r5, [r4, #0]
 8006292:	f015 0510 	ands.w	r5, r5, #16
 8006296:	d159      	bne.n	800634c <_scanf_float+0x414>
 8006298:	7035      	strb	r5, [r6, #0]
 800629a:	6823      	ldr	r3, [r4, #0]
 800629c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80062a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062a4:	d11b      	bne.n	80062de <_scanf_float+0x3a6>
 80062a6:	9b01      	ldr	r3, [sp, #4]
 80062a8:	454b      	cmp	r3, r9
 80062aa:	eba3 0209 	sub.w	r2, r3, r9
 80062ae:	d123      	bne.n	80062f8 <_scanf_float+0x3c0>
 80062b0:	2200      	movs	r2, #0
 80062b2:	4659      	mov	r1, fp
 80062b4:	4640      	mov	r0, r8
 80062b6:	f000 fed5 	bl	8007064 <_strtod_r>
 80062ba:	6822      	ldr	r2, [r4, #0]
 80062bc:	9b03      	ldr	r3, [sp, #12]
 80062be:	f012 0f02 	tst.w	r2, #2
 80062c2:	ec57 6b10 	vmov	r6, r7, d0
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	d021      	beq.n	800630e <_scanf_float+0x3d6>
 80062ca:	9903      	ldr	r1, [sp, #12]
 80062cc:	1d1a      	adds	r2, r3, #4
 80062ce:	600a      	str	r2, [r1, #0]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	e9c3 6700 	strd	r6, r7, [r3]
 80062d6:	68e3      	ldr	r3, [r4, #12]
 80062d8:	3301      	adds	r3, #1
 80062da:	60e3      	str	r3, [r4, #12]
 80062dc:	e66d      	b.n	8005fba <_scanf_float+0x82>
 80062de:	9b04      	ldr	r3, [sp, #16]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d0e5      	beq.n	80062b0 <_scanf_float+0x378>
 80062e4:	9905      	ldr	r1, [sp, #20]
 80062e6:	230a      	movs	r3, #10
 80062e8:	462a      	mov	r2, r5
 80062ea:	3101      	adds	r1, #1
 80062ec:	4640      	mov	r0, r8
 80062ee:	f000 ff41 	bl	8007174 <_strtol_r>
 80062f2:	9b04      	ldr	r3, [sp, #16]
 80062f4:	9e05      	ldr	r6, [sp, #20]
 80062f6:	1ac2      	subs	r2, r0, r3
 80062f8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80062fc:	429e      	cmp	r6, r3
 80062fe:	bf28      	it	cs
 8006300:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006304:	4912      	ldr	r1, [pc, #72]	; (8006350 <_scanf_float+0x418>)
 8006306:	4630      	mov	r0, r6
 8006308:	f000 f86a 	bl	80063e0 <siprintf>
 800630c:	e7d0      	b.n	80062b0 <_scanf_float+0x378>
 800630e:	9903      	ldr	r1, [sp, #12]
 8006310:	f012 0f04 	tst.w	r2, #4
 8006314:	f103 0204 	add.w	r2, r3, #4
 8006318:	600a      	str	r2, [r1, #0]
 800631a:	d1d9      	bne.n	80062d0 <_scanf_float+0x398>
 800631c:	f8d3 8000 	ldr.w	r8, [r3]
 8006320:	ee10 2a10 	vmov	r2, s0
 8006324:	ee10 0a10 	vmov	r0, s0
 8006328:	463b      	mov	r3, r7
 800632a:	4639      	mov	r1, r7
 800632c:	f7fa fc1e 	bl	8000b6c <__aeabi_dcmpun>
 8006330:	b128      	cbz	r0, 800633e <_scanf_float+0x406>
 8006332:	4808      	ldr	r0, [pc, #32]	; (8006354 <_scanf_float+0x41c>)
 8006334:	f000 f84e 	bl	80063d4 <nanf>
 8006338:	ed88 0a00 	vstr	s0, [r8]
 800633c:	e7cb      	b.n	80062d6 <_scanf_float+0x39e>
 800633e:	4630      	mov	r0, r6
 8006340:	4639      	mov	r1, r7
 8006342:	f7fa fc71 	bl	8000c28 <__aeabi_d2f>
 8006346:	f8c8 0000 	str.w	r0, [r8]
 800634a:	e7c4      	b.n	80062d6 <_scanf_float+0x39e>
 800634c:	2500      	movs	r5, #0
 800634e:	e634      	b.n	8005fba <_scanf_float+0x82>
 8006350:	0800a238 	.word	0x0800a238
 8006354:	0800a33b 	.word	0x0800a33b

08006358 <rand>:
 8006358:	4b16      	ldr	r3, [pc, #88]	; (80063b4 <rand+0x5c>)
 800635a:	b510      	push	{r4, lr}
 800635c:	681c      	ldr	r4, [r3, #0]
 800635e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006360:	b9b3      	cbnz	r3, 8006390 <rand+0x38>
 8006362:	2018      	movs	r0, #24
 8006364:	f002 f928 	bl	80085b8 <malloc>
 8006368:	63a0      	str	r0, [r4, #56]	; 0x38
 800636a:	b928      	cbnz	r0, 8006378 <rand+0x20>
 800636c:	4602      	mov	r2, r0
 800636e:	4b12      	ldr	r3, [pc, #72]	; (80063b8 <rand+0x60>)
 8006370:	4812      	ldr	r0, [pc, #72]	; (80063bc <rand+0x64>)
 8006372:	214e      	movs	r1, #78	; 0x4e
 8006374:	f000 ff00 	bl	8007178 <__assert_func>
 8006378:	4a11      	ldr	r2, [pc, #68]	; (80063c0 <rand+0x68>)
 800637a:	4b12      	ldr	r3, [pc, #72]	; (80063c4 <rand+0x6c>)
 800637c:	e9c0 2300 	strd	r2, r3, [r0]
 8006380:	4b11      	ldr	r3, [pc, #68]	; (80063c8 <rand+0x70>)
 8006382:	6083      	str	r3, [r0, #8]
 8006384:	230b      	movs	r3, #11
 8006386:	8183      	strh	r3, [r0, #12]
 8006388:	2201      	movs	r2, #1
 800638a:	2300      	movs	r3, #0
 800638c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8006390:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8006392:	4a0e      	ldr	r2, [pc, #56]	; (80063cc <rand+0x74>)
 8006394:	6920      	ldr	r0, [r4, #16]
 8006396:	6963      	ldr	r3, [r4, #20]
 8006398:	490d      	ldr	r1, [pc, #52]	; (80063d0 <rand+0x78>)
 800639a:	4342      	muls	r2, r0
 800639c:	fb01 2203 	mla	r2, r1, r3, r2
 80063a0:	fba0 0101 	umull	r0, r1, r0, r1
 80063a4:	1c43      	adds	r3, r0, #1
 80063a6:	eb42 0001 	adc.w	r0, r2, r1
 80063aa:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80063ae:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80063b2:	bd10      	pop	{r4, pc}
 80063b4:	20000010 	.word	0x20000010
 80063b8:	0800a23d 	.word	0x0800a23d
 80063bc:	0800a254 	.word	0x0800a254
 80063c0:	abcd330e 	.word	0xabcd330e
 80063c4:	e66d1234 	.word	0xe66d1234
 80063c8:	0005deec 	.word	0x0005deec
 80063cc:	5851f42d 	.word	0x5851f42d
 80063d0:	4c957f2d 	.word	0x4c957f2d

080063d4 <nanf>:
 80063d4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80063dc <nanf+0x8>
 80063d8:	4770      	bx	lr
 80063da:	bf00      	nop
 80063dc:	7fc00000 	.word	0x7fc00000

080063e0 <siprintf>:
 80063e0:	b40e      	push	{r1, r2, r3}
 80063e2:	b500      	push	{lr}
 80063e4:	b09c      	sub	sp, #112	; 0x70
 80063e6:	ab1d      	add	r3, sp, #116	; 0x74
 80063e8:	9002      	str	r0, [sp, #8]
 80063ea:	9006      	str	r0, [sp, #24]
 80063ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80063f0:	4809      	ldr	r0, [pc, #36]	; (8006418 <siprintf+0x38>)
 80063f2:	9107      	str	r1, [sp, #28]
 80063f4:	9104      	str	r1, [sp, #16]
 80063f6:	4909      	ldr	r1, [pc, #36]	; (800641c <siprintf+0x3c>)
 80063f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80063fc:	9105      	str	r1, [sp, #20]
 80063fe:	6800      	ldr	r0, [r0, #0]
 8006400:	9301      	str	r3, [sp, #4]
 8006402:	a902      	add	r1, sp, #8
 8006404:	f002 ff14 	bl	8009230 <_svfiprintf_r>
 8006408:	9b02      	ldr	r3, [sp, #8]
 800640a:	2200      	movs	r2, #0
 800640c:	701a      	strb	r2, [r3, #0]
 800640e:	b01c      	add	sp, #112	; 0x70
 8006410:	f85d eb04 	ldr.w	lr, [sp], #4
 8006414:	b003      	add	sp, #12
 8006416:	4770      	bx	lr
 8006418:	20000010 	.word	0x20000010
 800641c:	ffff0208 	.word	0xffff0208

08006420 <sulp>:
 8006420:	b570      	push	{r4, r5, r6, lr}
 8006422:	4604      	mov	r4, r0
 8006424:	460d      	mov	r5, r1
 8006426:	ec45 4b10 	vmov	d0, r4, r5
 800642a:	4616      	mov	r6, r2
 800642c:	f002 fc5e 	bl	8008cec <__ulp>
 8006430:	ec51 0b10 	vmov	r0, r1, d0
 8006434:	b17e      	cbz	r6, 8006456 <sulp+0x36>
 8006436:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800643a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800643e:	2b00      	cmp	r3, #0
 8006440:	dd09      	ble.n	8006456 <sulp+0x36>
 8006442:	051b      	lsls	r3, r3, #20
 8006444:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006448:	2400      	movs	r4, #0
 800644a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800644e:	4622      	mov	r2, r4
 8006450:	462b      	mov	r3, r5
 8006452:	f7fa f8f1 	bl	8000638 <__aeabi_dmul>
 8006456:	bd70      	pop	{r4, r5, r6, pc}

08006458 <_strtod_l>:
 8006458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800645c:	ed2d 8b02 	vpush	{d8}
 8006460:	b09d      	sub	sp, #116	; 0x74
 8006462:	461f      	mov	r7, r3
 8006464:	2300      	movs	r3, #0
 8006466:	9318      	str	r3, [sp, #96]	; 0x60
 8006468:	4ba2      	ldr	r3, [pc, #648]	; (80066f4 <_strtod_l+0x29c>)
 800646a:	9213      	str	r2, [sp, #76]	; 0x4c
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	9305      	str	r3, [sp, #20]
 8006470:	4604      	mov	r4, r0
 8006472:	4618      	mov	r0, r3
 8006474:	4688      	mov	r8, r1
 8006476:	f7f9 fecb 	bl	8000210 <strlen>
 800647a:	f04f 0a00 	mov.w	sl, #0
 800647e:	4605      	mov	r5, r0
 8006480:	f04f 0b00 	mov.w	fp, #0
 8006484:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006488:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800648a:	781a      	ldrb	r2, [r3, #0]
 800648c:	2a2b      	cmp	r2, #43	; 0x2b
 800648e:	d04e      	beq.n	800652e <_strtod_l+0xd6>
 8006490:	d83b      	bhi.n	800650a <_strtod_l+0xb2>
 8006492:	2a0d      	cmp	r2, #13
 8006494:	d834      	bhi.n	8006500 <_strtod_l+0xa8>
 8006496:	2a08      	cmp	r2, #8
 8006498:	d834      	bhi.n	8006504 <_strtod_l+0xac>
 800649a:	2a00      	cmp	r2, #0
 800649c:	d03e      	beq.n	800651c <_strtod_l+0xc4>
 800649e:	2300      	movs	r3, #0
 80064a0:	930a      	str	r3, [sp, #40]	; 0x28
 80064a2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80064a4:	7833      	ldrb	r3, [r6, #0]
 80064a6:	2b30      	cmp	r3, #48	; 0x30
 80064a8:	f040 80b0 	bne.w	800660c <_strtod_l+0x1b4>
 80064ac:	7873      	ldrb	r3, [r6, #1]
 80064ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80064b2:	2b58      	cmp	r3, #88	; 0x58
 80064b4:	d168      	bne.n	8006588 <_strtod_l+0x130>
 80064b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064b8:	9301      	str	r3, [sp, #4]
 80064ba:	ab18      	add	r3, sp, #96	; 0x60
 80064bc:	9702      	str	r7, [sp, #8]
 80064be:	9300      	str	r3, [sp, #0]
 80064c0:	4a8d      	ldr	r2, [pc, #564]	; (80066f8 <_strtod_l+0x2a0>)
 80064c2:	ab19      	add	r3, sp, #100	; 0x64
 80064c4:	a917      	add	r1, sp, #92	; 0x5c
 80064c6:	4620      	mov	r0, r4
 80064c8:	f001 fd6a 	bl	8007fa0 <__gethex>
 80064cc:	f010 0707 	ands.w	r7, r0, #7
 80064d0:	4605      	mov	r5, r0
 80064d2:	d005      	beq.n	80064e0 <_strtod_l+0x88>
 80064d4:	2f06      	cmp	r7, #6
 80064d6:	d12c      	bne.n	8006532 <_strtod_l+0xda>
 80064d8:	3601      	adds	r6, #1
 80064da:	2300      	movs	r3, #0
 80064dc:	9617      	str	r6, [sp, #92]	; 0x5c
 80064de:	930a      	str	r3, [sp, #40]	; 0x28
 80064e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	f040 8590 	bne.w	8007008 <_strtod_l+0xbb0>
 80064e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064ea:	b1eb      	cbz	r3, 8006528 <_strtod_l+0xd0>
 80064ec:	4652      	mov	r2, sl
 80064ee:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80064f2:	ec43 2b10 	vmov	d0, r2, r3
 80064f6:	b01d      	add	sp, #116	; 0x74
 80064f8:	ecbd 8b02 	vpop	{d8}
 80064fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006500:	2a20      	cmp	r2, #32
 8006502:	d1cc      	bne.n	800649e <_strtod_l+0x46>
 8006504:	3301      	adds	r3, #1
 8006506:	9317      	str	r3, [sp, #92]	; 0x5c
 8006508:	e7be      	b.n	8006488 <_strtod_l+0x30>
 800650a:	2a2d      	cmp	r2, #45	; 0x2d
 800650c:	d1c7      	bne.n	800649e <_strtod_l+0x46>
 800650e:	2201      	movs	r2, #1
 8006510:	920a      	str	r2, [sp, #40]	; 0x28
 8006512:	1c5a      	adds	r2, r3, #1
 8006514:	9217      	str	r2, [sp, #92]	; 0x5c
 8006516:	785b      	ldrb	r3, [r3, #1]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d1c2      	bne.n	80064a2 <_strtod_l+0x4a>
 800651c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800651e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006522:	2b00      	cmp	r3, #0
 8006524:	f040 856e 	bne.w	8007004 <_strtod_l+0xbac>
 8006528:	4652      	mov	r2, sl
 800652a:	465b      	mov	r3, fp
 800652c:	e7e1      	b.n	80064f2 <_strtod_l+0x9a>
 800652e:	2200      	movs	r2, #0
 8006530:	e7ee      	b.n	8006510 <_strtod_l+0xb8>
 8006532:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006534:	b13a      	cbz	r2, 8006546 <_strtod_l+0xee>
 8006536:	2135      	movs	r1, #53	; 0x35
 8006538:	a81a      	add	r0, sp, #104	; 0x68
 800653a:	f002 fce2 	bl	8008f02 <__copybits>
 800653e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006540:	4620      	mov	r0, r4
 8006542:	f002 f8a1 	bl	8008688 <_Bfree>
 8006546:	3f01      	subs	r7, #1
 8006548:	2f04      	cmp	r7, #4
 800654a:	d806      	bhi.n	800655a <_strtod_l+0x102>
 800654c:	e8df f007 	tbb	[pc, r7]
 8006550:	1714030a 	.word	0x1714030a
 8006554:	0a          	.byte	0x0a
 8006555:	00          	.byte	0x00
 8006556:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800655a:	0728      	lsls	r0, r5, #28
 800655c:	d5c0      	bpl.n	80064e0 <_strtod_l+0x88>
 800655e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006562:	e7bd      	b.n	80064e0 <_strtod_l+0x88>
 8006564:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006568:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800656a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800656e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006572:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006576:	e7f0      	b.n	800655a <_strtod_l+0x102>
 8006578:	f8df b180 	ldr.w	fp, [pc, #384]	; 80066fc <_strtod_l+0x2a4>
 800657c:	e7ed      	b.n	800655a <_strtod_l+0x102>
 800657e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006582:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006586:	e7e8      	b.n	800655a <_strtod_l+0x102>
 8006588:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800658a:	1c5a      	adds	r2, r3, #1
 800658c:	9217      	str	r2, [sp, #92]	; 0x5c
 800658e:	785b      	ldrb	r3, [r3, #1]
 8006590:	2b30      	cmp	r3, #48	; 0x30
 8006592:	d0f9      	beq.n	8006588 <_strtod_l+0x130>
 8006594:	2b00      	cmp	r3, #0
 8006596:	d0a3      	beq.n	80064e0 <_strtod_l+0x88>
 8006598:	2301      	movs	r3, #1
 800659a:	f04f 0900 	mov.w	r9, #0
 800659e:	9304      	str	r3, [sp, #16]
 80065a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80065a2:	9308      	str	r3, [sp, #32]
 80065a4:	f8cd 901c 	str.w	r9, [sp, #28]
 80065a8:	464f      	mov	r7, r9
 80065aa:	220a      	movs	r2, #10
 80065ac:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80065ae:	7806      	ldrb	r6, [r0, #0]
 80065b0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80065b4:	b2d9      	uxtb	r1, r3
 80065b6:	2909      	cmp	r1, #9
 80065b8:	d92a      	bls.n	8006610 <_strtod_l+0x1b8>
 80065ba:	9905      	ldr	r1, [sp, #20]
 80065bc:	462a      	mov	r2, r5
 80065be:	f003 f8ab 	bl	8009718 <strncmp>
 80065c2:	b398      	cbz	r0, 800662c <_strtod_l+0x1d4>
 80065c4:	2000      	movs	r0, #0
 80065c6:	4632      	mov	r2, r6
 80065c8:	463d      	mov	r5, r7
 80065ca:	9005      	str	r0, [sp, #20]
 80065cc:	4603      	mov	r3, r0
 80065ce:	2a65      	cmp	r2, #101	; 0x65
 80065d0:	d001      	beq.n	80065d6 <_strtod_l+0x17e>
 80065d2:	2a45      	cmp	r2, #69	; 0x45
 80065d4:	d118      	bne.n	8006608 <_strtod_l+0x1b0>
 80065d6:	b91d      	cbnz	r5, 80065e0 <_strtod_l+0x188>
 80065d8:	9a04      	ldr	r2, [sp, #16]
 80065da:	4302      	orrs	r2, r0
 80065dc:	d09e      	beq.n	800651c <_strtod_l+0xc4>
 80065de:	2500      	movs	r5, #0
 80065e0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80065e4:	f108 0201 	add.w	r2, r8, #1
 80065e8:	9217      	str	r2, [sp, #92]	; 0x5c
 80065ea:	f898 2001 	ldrb.w	r2, [r8, #1]
 80065ee:	2a2b      	cmp	r2, #43	; 0x2b
 80065f0:	d075      	beq.n	80066de <_strtod_l+0x286>
 80065f2:	2a2d      	cmp	r2, #45	; 0x2d
 80065f4:	d07b      	beq.n	80066ee <_strtod_l+0x296>
 80065f6:	f04f 0c00 	mov.w	ip, #0
 80065fa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80065fe:	2909      	cmp	r1, #9
 8006600:	f240 8082 	bls.w	8006708 <_strtod_l+0x2b0>
 8006604:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006608:	2600      	movs	r6, #0
 800660a:	e09d      	b.n	8006748 <_strtod_l+0x2f0>
 800660c:	2300      	movs	r3, #0
 800660e:	e7c4      	b.n	800659a <_strtod_l+0x142>
 8006610:	2f08      	cmp	r7, #8
 8006612:	bfd8      	it	le
 8006614:	9907      	ldrle	r1, [sp, #28]
 8006616:	f100 0001 	add.w	r0, r0, #1
 800661a:	bfda      	itte	le
 800661c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006620:	9307      	strle	r3, [sp, #28]
 8006622:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006626:	3701      	adds	r7, #1
 8006628:	9017      	str	r0, [sp, #92]	; 0x5c
 800662a:	e7bf      	b.n	80065ac <_strtod_l+0x154>
 800662c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800662e:	195a      	adds	r2, r3, r5
 8006630:	9217      	str	r2, [sp, #92]	; 0x5c
 8006632:	5d5a      	ldrb	r2, [r3, r5]
 8006634:	2f00      	cmp	r7, #0
 8006636:	d037      	beq.n	80066a8 <_strtod_l+0x250>
 8006638:	9005      	str	r0, [sp, #20]
 800663a:	463d      	mov	r5, r7
 800663c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006640:	2b09      	cmp	r3, #9
 8006642:	d912      	bls.n	800666a <_strtod_l+0x212>
 8006644:	2301      	movs	r3, #1
 8006646:	e7c2      	b.n	80065ce <_strtod_l+0x176>
 8006648:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800664a:	1c5a      	adds	r2, r3, #1
 800664c:	9217      	str	r2, [sp, #92]	; 0x5c
 800664e:	785a      	ldrb	r2, [r3, #1]
 8006650:	3001      	adds	r0, #1
 8006652:	2a30      	cmp	r2, #48	; 0x30
 8006654:	d0f8      	beq.n	8006648 <_strtod_l+0x1f0>
 8006656:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800665a:	2b08      	cmp	r3, #8
 800665c:	f200 84d9 	bhi.w	8007012 <_strtod_l+0xbba>
 8006660:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006662:	9005      	str	r0, [sp, #20]
 8006664:	2000      	movs	r0, #0
 8006666:	9308      	str	r3, [sp, #32]
 8006668:	4605      	mov	r5, r0
 800666a:	3a30      	subs	r2, #48	; 0x30
 800666c:	f100 0301 	add.w	r3, r0, #1
 8006670:	d014      	beq.n	800669c <_strtod_l+0x244>
 8006672:	9905      	ldr	r1, [sp, #20]
 8006674:	4419      	add	r1, r3
 8006676:	9105      	str	r1, [sp, #20]
 8006678:	462b      	mov	r3, r5
 800667a:	eb00 0e05 	add.w	lr, r0, r5
 800667e:	210a      	movs	r1, #10
 8006680:	4573      	cmp	r3, lr
 8006682:	d113      	bne.n	80066ac <_strtod_l+0x254>
 8006684:	182b      	adds	r3, r5, r0
 8006686:	2b08      	cmp	r3, #8
 8006688:	f105 0501 	add.w	r5, r5, #1
 800668c:	4405      	add	r5, r0
 800668e:	dc1c      	bgt.n	80066ca <_strtod_l+0x272>
 8006690:	9907      	ldr	r1, [sp, #28]
 8006692:	230a      	movs	r3, #10
 8006694:	fb03 2301 	mla	r3, r3, r1, r2
 8006698:	9307      	str	r3, [sp, #28]
 800669a:	2300      	movs	r3, #0
 800669c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800669e:	1c51      	adds	r1, r2, #1
 80066a0:	9117      	str	r1, [sp, #92]	; 0x5c
 80066a2:	7852      	ldrb	r2, [r2, #1]
 80066a4:	4618      	mov	r0, r3
 80066a6:	e7c9      	b.n	800663c <_strtod_l+0x1e4>
 80066a8:	4638      	mov	r0, r7
 80066aa:	e7d2      	b.n	8006652 <_strtod_l+0x1fa>
 80066ac:	2b08      	cmp	r3, #8
 80066ae:	dc04      	bgt.n	80066ba <_strtod_l+0x262>
 80066b0:	9e07      	ldr	r6, [sp, #28]
 80066b2:	434e      	muls	r6, r1
 80066b4:	9607      	str	r6, [sp, #28]
 80066b6:	3301      	adds	r3, #1
 80066b8:	e7e2      	b.n	8006680 <_strtod_l+0x228>
 80066ba:	f103 0c01 	add.w	ip, r3, #1
 80066be:	f1bc 0f10 	cmp.w	ip, #16
 80066c2:	bfd8      	it	le
 80066c4:	fb01 f909 	mulle.w	r9, r1, r9
 80066c8:	e7f5      	b.n	80066b6 <_strtod_l+0x25e>
 80066ca:	2d10      	cmp	r5, #16
 80066cc:	bfdc      	itt	le
 80066ce:	230a      	movle	r3, #10
 80066d0:	fb03 2909 	mlale	r9, r3, r9, r2
 80066d4:	e7e1      	b.n	800669a <_strtod_l+0x242>
 80066d6:	2300      	movs	r3, #0
 80066d8:	9305      	str	r3, [sp, #20]
 80066da:	2301      	movs	r3, #1
 80066dc:	e77c      	b.n	80065d8 <_strtod_l+0x180>
 80066de:	f04f 0c00 	mov.w	ip, #0
 80066e2:	f108 0202 	add.w	r2, r8, #2
 80066e6:	9217      	str	r2, [sp, #92]	; 0x5c
 80066e8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80066ec:	e785      	b.n	80065fa <_strtod_l+0x1a2>
 80066ee:	f04f 0c01 	mov.w	ip, #1
 80066f2:	e7f6      	b.n	80066e2 <_strtod_l+0x28a>
 80066f4:	0800a51c 	.word	0x0800a51c
 80066f8:	0800a2b0 	.word	0x0800a2b0
 80066fc:	7ff00000 	.word	0x7ff00000
 8006700:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006702:	1c51      	adds	r1, r2, #1
 8006704:	9117      	str	r1, [sp, #92]	; 0x5c
 8006706:	7852      	ldrb	r2, [r2, #1]
 8006708:	2a30      	cmp	r2, #48	; 0x30
 800670a:	d0f9      	beq.n	8006700 <_strtod_l+0x2a8>
 800670c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006710:	2908      	cmp	r1, #8
 8006712:	f63f af79 	bhi.w	8006608 <_strtod_l+0x1b0>
 8006716:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800671a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800671c:	9206      	str	r2, [sp, #24]
 800671e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006720:	1c51      	adds	r1, r2, #1
 8006722:	9117      	str	r1, [sp, #92]	; 0x5c
 8006724:	7852      	ldrb	r2, [r2, #1]
 8006726:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800672a:	2e09      	cmp	r6, #9
 800672c:	d937      	bls.n	800679e <_strtod_l+0x346>
 800672e:	9e06      	ldr	r6, [sp, #24]
 8006730:	1b89      	subs	r1, r1, r6
 8006732:	2908      	cmp	r1, #8
 8006734:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006738:	dc02      	bgt.n	8006740 <_strtod_l+0x2e8>
 800673a:	4576      	cmp	r6, lr
 800673c:	bfa8      	it	ge
 800673e:	4676      	movge	r6, lr
 8006740:	f1bc 0f00 	cmp.w	ip, #0
 8006744:	d000      	beq.n	8006748 <_strtod_l+0x2f0>
 8006746:	4276      	negs	r6, r6
 8006748:	2d00      	cmp	r5, #0
 800674a:	d14d      	bne.n	80067e8 <_strtod_l+0x390>
 800674c:	9904      	ldr	r1, [sp, #16]
 800674e:	4301      	orrs	r1, r0
 8006750:	f47f aec6 	bne.w	80064e0 <_strtod_l+0x88>
 8006754:	2b00      	cmp	r3, #0
 8006756:	f47f aee1 	bne.w	800651c <_strtod_l+0xc4>
 800675a:	2a69      	cmp	r2, #105	; 0x69
 800675c:	d027      	beq.n	80067ae <_strtod_l+0x356>
 800675e:	dc24      	bgt.n	80067aa <_strtod_l+0x352>
 8006760:	2a49      	cmp	r2, #73	; 0x49
 8006762:	d024      	beq.n	80067ae <_strtod_l+0x356>
 8006764:	2a4e      	cmp	r2, #78	; 0x4e
 8006766:	f47f aed9 	bne.w	800651c <_strtod_l+0xc4>
 800676a:	499f      	ldr	r1, [pc, #636]	; (80069e8 <_strtod_l+0x590>)
 800676c:	a817      	add	r0, sp, #92	; 0x5c
 800676e:	f001 fe6f 	bl	8008450 <__match>
 8006772:	2800      	cmp	r0, #0
 8006774:	f43f aed2 	beq.w	800651c <_strtod_l+0xc4>
 8006778:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	2b28      	cmp	r3, #40	; 0x28
 800677e:	d12d      	bne.n	80067dc <_strtod_l+0x384>
 8006780:	499a      	ldr	r1, [pc, #616]	; (80069ec <_strtod_l+0x594>)
 8006782:	aa1a      	add	r2, sp, #104	; 0x68
 8006784:	a817      	add	r0, sp, #92	; 0x5c
 8006786:	f001 fe77 	bl	8008478 <__hexnan>
 800678a:	2805      	cmp	r0, #5
 800678c:	d126      	bne.n	80067dc <_strtod_l+0x384>
 800678e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006790:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8006794:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006798:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800679c:	e6a0      	b.n	80064e0 <_strtod_l+0x88>
 800679e:	210a      	movs	r1, #10
 80067a0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80067a4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80067a8:	e7b9      	b.n	800671e <_strtod_l+0x2c6>
 80067aa:	2a6e      	cmp	r2, #110	; 0x6e
 80067ac:	e7db      	b.n	8006766 <_strtod_l+0x30e>
 80067ae:	4990      	ldr	r1, [pc, #576]	; (80069f0 <_strtod_l+0x598>)
 80067b0:	a817      	add	r0, sp, #92	; 0x5c
 80067b2:	f001 fe4d 	bl	8008450 <__match>
 80067b6:	2800      	cmp	r0, #0
 80067b8:	f43f aeb0 	beq.w	800651c <_strtod_l+0xc4>
 80067bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80067be:	498d      	ldr	r1, [pc, #564]	; (80069f4 <_strtod_l+0x59c>)
 80067c0:	3b01      	subs	r3, #1
 80067c2:	a817      	add	r0, sp, #92	; 0x5c
 80067c4:	9317      	str	r3, [sp, #92]	; 0x5c
 80067c6:	f001 fe43 	bl	8008450 <__match>
 80067ca:	b910      	cbnz	r0, 80067d2 <_strtod_l+0x37a>
 80067cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80067ce:	3301      	adds	r3, #1
 80067d0:	9317      	str	r3, [sp, #92]	; 0x5c
 80067d2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8006a04 <_strtod_l+0x5ac>
 80067d6:	f04f 0a00 	mov.w	sl, #0
 80067da:	e681      	b.n	80064e0 <_strtod_l+0x88>
 80067dc:	4886      	ldr	r0, [pc, #536]	; (80069f8 <_strtod_l+0x5a0>)
 80067de:	f002 ff83 	bl	80096e8 <nan>
 80067e2:	ec5b ab10 	vmov	sl, fp, d0
 80067e6:	e67b      	b.n	80064e0 <_strtod_l+0x88>
 80067e8:	9b05      	ldr	r3, [sp, #20]
 80067ea:	9807      	ldr	r0, [sp, #28]
 80067ec:	1af3      	subs	r3, r6, r3
 80067ee:	2f00      	cmp	r7, #0
 80067f0:	bf08      	it	eq
 80067f2:	462f      	moveq	r7, r5
 80067f4:	2d10      	cmp	r5, #16
 80067f6:	9306      	str	r3, [sp, #24]
 80067f8:	46a8      	mov	r8, r5
 80067fa:	bfa8      	it	ge
 80067fc:	f04f 0810 	movge.w	r8, #16
 8006800:	f7f9 fea0 	bl	8000544 <__aeabi_ui2d>
 8006804:	2d09      	cmp	r5, #9
 8006806:	4682      	mov	sl, r0
 8006808:	468b      	mov	fp, r1
 800680a:	dd13      	ble.n	8006834 <_strtod_l+0x3dc>
 800680c:	4b7b      	ldr	r3, [pc, #492]	; (80069fc <_strtod_l+0x5a4>)
 800680e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006812:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006816:	f7f9 ff0f 	bl	8000638 <__aeabi_dmul>
 800681a:	4682      	mov	sl, r0
 800681c:	4648      	mov	r0, r9
 800681e:	468b      	mov	fp, r1
 8006820:	f7f9 fe90 	bl	8000544 <__aeabi_ui2d>
 8006824:	4602      	mov	r2, r0
 8006826:	460b      	mov	r3, r1
 8006828:	4650      	mov	r0, sl
 800682a:	4659      	mov	r1, fp
 800682c:	f7f9 fd4e 	bl	80002cc <__adddf3>
 8006830:	4682      	mov	sl, r0
 8006832:	468b      	mov	fp, r1
 8006834:	2d0f      	cmp	r5, #15
 8006836:	dc38      	bgt.n	80068aa <_strtod_l+0x452>
 8006838:	9b06      	ldr	r3, [sp, #24]
 800683a:	2b00      	cmp	r3, #0
 800683c:	f43f ae50 	beq.w	80064e0 <_strtod_l+0x88>
 8006840:	dd24      	ble.n	800688c <_strtod_l+0x434>
 8006842:	2b16      	cmp	r3, #22
 8006844:	dc0b      	bgt.n	800685e <_strtod_l+0x406>
 8006846:	496d      	ldr	r1, [pc, #436]	; (80069fc <_strtod_l+0x5a4>)
 8006848:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800684c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006850:	4652      	mov	r2, sl
 8006852:	465b      	mov	r3, fp
 8006854:	f7f9 fef0 	bl	8000638 <__aeabi_dmul>
 8006858:	4682      	mov	sl, r0
 800685a:	468b      	mov	fp, r1
 800685c:	e640      	b.n	80064e0 <_strtod_l+0x88>
 800685e:	9a06      	ldr	r2, [sp, #24]
 8006860:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006864:	4293      	cmp	r3, r2
 8006866:	db20      	blt.n	80068aa <_strtod_l+0x452>
 8006868:	4c64      	ldr	r4, [pc, #400]	; (80069fc <_strtod_l+0x5a4>)
 800686a:	f1c5 050f 	rsb	r5, r5, #15
 800686e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006872:	4652      	mov	r2, sl
 8006874:	465b      	mov	r3, fp
 8006876:	e9d1 0100 	ldrd	r0, r1, [r1]
 800687a:	f7f9 fedd 	bl	8000638 <__aeabi_dmul>
 800687e:	9b06      	ldr	r3, [sp, #24]
 8006880:	1b5d      	subs	r5, r3, r5
 8006882:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006886:	e9d4 2300 	ldrd	r2, r3, [r4]
 800688a:	e7e3      	b.n	8006854 <_strtod_l+0x3fc>
 800688c:	9b06      	ldr	r3, [sp, #24]
 800688e:	3316      	adds	r3, #22
 8006890:	db0b      	blt.n	80068aa <_strtod_l+0x452>
 8006892:	9b05      	ldr	r3, [sp, #20]
 8006894:	1b9e      	subs	r6, r3, r6
 8006896:	4b59      	ldr	r3, [pc, #356]	; (80069fc <_strtod_l+0x5a4>)
 8006898:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800689c:	e9d6 2300 	ldrd	r2, r3, [r6]
 80068a0:	4650      	mov	r0, sl
 80068a2:	4659      	mov	r1, fp
 80068a4:	f7f9 fff2 	bl	800088c <__aeabi_ddiv>
 80068a8:	e7d6      	b.n	8006858 <_strtod_l+0x400>
 80068aa:	9b06      	ldr	r3, [sp, #24]
 80068ac:	eba5 0808 	sub.w	r8, r5, r8
 80068b0:	4498      	add	r8, r3
 80068b2:	f1b8 0f00 	cmp.w	r8, #0
 80068b6:	dd74      	ble.n	80069a2 <_strtod_l+0x54a>
 80068b8:	f018 030f 	ands.w	r3, r8, #15
 80068bc:	d00a      	beq.n	80068d4 <_strtod_l+0x47c>
 80068be:	494f      	ldr	r1, [pc, #316]	; (80069fc <_strtod_l+0x5a4>)
 80068c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80068c4:	4652      	mov	r2, sl
 80068c6:	465b      	mov	r3, fp
 80068c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068cc:	f7f9 feb4 	bl	8000638 <__aeabi_dmul>
 80068d0:	4682      	mov	sl, r0
 80068d2:	468b      	mov	fp, r1
 80068d4:	f038 080f 	bics.w	r8, r8, #15
 80068d8:	d04f      	beq.n	800697a <_strtod_l+0x522>
 80068da:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80068de:	dd22      	ble.n	8006926 <_strtod_l+0x4ce>
 80068e0:	2500      	movs	r5, #0
 80068e2:	462e      	mov	r6, r5
 80068e4:	9507      	str	r5, [sp, #28]
 80068e6:	9505      	str	r5, [sp, #20]
 80068e8:	2322      	movs	r3, #34	; 0x22
 80068ea:	f8df b118 	ldr.w	fp, [pc, #280]	; 8006a04 <_strtod_l+0x5ac>
 80068ee:	6023      	str	r3, [r4, #0]
 80068f0:	f04f 0a00 	mov.w	sl, #0
 80068f4:	9b07      	ldr	r3, [sp, #28]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	f43f adf2 	beq.w	80064e0 <_strtod_l+0x88>
 80068fc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80068fe:	4620      	mov	r0, r4
 8006900:	f001 fec2 	bl	8008688 <_Bfree>
 8006904:	9905      	ldr	r1, [sp, #20]
 8006906:	4620      	mov	r0, r4
 8006908:	f001 febe 	bl	8008688 <_Bfree>
 800690c:	4631      	mov	r1, r6
 800690e:	4620      	mov	r0, r4
 8006910:	f001 feba 	bl	8008688 <_Bfree>
 8006914:	9907      	ldr	r1, [sp, #28]
 8006916:	4620      	mov	r0, r4
 8006918:	f001 feb6 	bl	8008688 <_Bfree>
 800691c:	4629      	mov	r1, r5
 800691e:	4620      	mov	r0, r4
 8006920:	f001 feb2 	bl	8008688 <_Bfree>
 8006924:	e5dc      	b.n	80064e0 <_strtod_l+0x88>
 8006926:	4b36      	ldr	r3, [pc, #216]	; (8006a00 <_strtod_l+0x5a8>)
 8006928:	9304      	str	r3, [sp, #16]
 800692a:	2300      	movs	r3, #0
 800692c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006930:	4650      	mov	r0, sl
 8006932:	4659      	mov	r1, fp
 8006934:	4699      	mov	r9, r3
 8006936:	f1b8 0f01 	cmp.w	r8, #1
 800693a:	dc21      	bgt.n	8006980 <_strtod_l+0x528>
 800693c:	b10b      	cbz	r3, 8006942 <_strtod_l+0x4ea>
 800693e:	4682      	mov	sl, r0
 8006940:	468b      	mov	fp, r1
 8006942:	4b2f      	ldr	r3, [pc, #188]	; (8006a00 <_strtod_l+0x5a8>)
 8006944:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006948:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800694c:	4652      	mov	r2, sl
 800694e:	465b      	mov	r3, fp
 8006950:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006954:	f7f9 fe70 	bl	8000638 <__aeabi_dmul>
 8006958:	4b2a      	ldr	r3, [pc, #168]	; (8006a04 <_strtod_l+0x5ac>)
 800695a:	460a      	mov	r2, r1
 800695c:	400b      	ands	r3, r1
 800695e:	492a      	ldr	r1, [pc, #168]	; (8006a08 <_strtod_l+0x5b0>)
 8006960:	428b      	cmp	r3, r1
 8006962:	4682      	mov	sl, r0
 8006964:	d8bc      	bhi.n	80068e0 <_strtod_l+0x488>
 8006966:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800696a:	428b      	cmp	r3, r1
 800696c:	bf86      	itte	hi
 800696e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8006a0c <_strtod_l+0x5b4>
 8006972:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8006976:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800697a:	2300      	movs	r3, #0
 800697c:	9304      	str	r3, [sp, #16]
 800697e:	e084      	b.n	8006a8a <_strtod_l+0x632>
 8006980:	f018 0f01 	tst.w	r8, #1
 8006984:	d005      	beq.n	8006992 <_strtod_l+0x53a>
 8006986:	9b04      	ldr	r3, [sp, #16]
 8006988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800698c:	f7f9 fe54 	bl	8000638 <__aeabi_dmul>
 8006990:	2301      	movs	r3, #1
 8006992:	9a04      	ldr	r2, [sp, #16]
 8006994:	3208      	adds	r2, #8
 8006996:	f109 0901 	add.w	r9, r9, #1
 800699a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800699e:	9204      	str	r2, [sp, #16]
 80069a0:	e7c9      	b.n	8006936 <_strtod_l+0x4de>
 80069a2:	d0ea      	beq.n	800697a <_strtod_l+0x522>
 80069a4:	f1c8 0800 	rsb	r8, r8, #0
 80069a8:	f018 020f 	ands.w	r2, r8, #15
 80069ac:	d00a      	beq.n	80069c4 <_strtod_l+0x56c>
 80069ae:	4b13      	ldr	r3, [pc, #76]	; (80069fc <_strtod_l+0x5a4>)
 80069b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069b4:	4650      	mov	r0, sl
 80069b6:	4659      	mov	r1, fp
 80069b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069bc:	f7f9 ff66 	bl	800088c <__aeabi_ddiv>
 80069c0:	4682      	mov	sl, r0
 80069c2:	468b      	mov	fp, r1
 80069c4:	ea5f 1828 	movs.w	r8, r8, asr #4
 80069c8:	d0d7      	beq.n	800697a <_strtod_l+0x522>
 80069ca:	f1b8 0f1f 	cmp.w	r8, #31
 80069ce:	dd1f      	ble.n	8006a10 <_strtod_l+0x5b8>
 80069d0:	2500      	movs	r5, #0
 80069d2:	462e      	mov	r6, r5
 80069d4:	9507      	str	r5, [sp, #28]
 80069d6:	9505      	str	r5, [sp, #20]
 80069d8:	2322      	movs	r3, #34	; 0x22
 80069da:	f04f 0a00 	mov.w	sl, #0
 80069de:	f04f 0b00 	mov.w	fp, #0
 80069e2:	6023      	str	r3, [r4, #0]
 80069e4:	e786      	b.n	80068f4 <_strtod_l+0x49c>
 80069e6:	bf00      	nop
 80069e8:	0800a211 	.word	0x0800a211
 80069ec:	0800a2c4 	.word	0x0800a2c4
 80069f0:	0800a209 	.word	0x0800a209
 80069f4:	0800a440 	.word	0x0800a440
 80069f8:	0800a33b 	.word	0x0800a33b
 80069fc:	0800a5b8 	.word	0x0800a5b8
 8006a00:	0800a590 	.word	0x0800a590
 8006a04:	7ff00000 	.word	0x7ff00000
 8006a08:	7ca00000 	.word	0x7ca00000
 8006a0c:	7fefffff 	.word	0x7fefffff
 8006a10:	f018 0310 	ands.w	r3, r8, #16
 8006a14:	bf18      	it	ne
 8006a16:	236a      	movne	r3, #106	; 0x6a
 8006a18:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006dc8 <_strtod_l+0x970>
 8006a1c:	9304      	str	r3, [sp, #16]
 8006a1e:	4650      	mov	r0, sl
 8006a20:	4659      	mov	r1, fp
 8006a22:	2300      	movs	r3, #0
 8006a24:	f018 0f01 	tst.w	r8, #1
 8006a28:	d004      	beq.n	8006a34 <_strtod_l+0x5dc>
 8006a2a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006a2e:	f7f9 fe03 	bl	8000638 <__aeabi_dmul>
 8006a32:	2301      	movs	r3, #1
 8006a34:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006a38:	f109 0908 	add.w	r9, r9, #8
 8006a3c:	d1f2      	bne.n	8006a24 <_strtod_l+0x5cc>
 8006a3e:	b10b      	cbz	r3, 8006a44 <_strtod_l+0x5ec>
 8006a40:	4682      	mov	sl, r0
 8006a42:	468b      	mov	fp, r1
 8006a44:	9b04      	ldr	r3, [sp, #16]
 8006a46:	b1c3      	cbz	r3, 8006a7a <_strtod_l+0x622>
 8006a48:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006a4c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	4659      	mov	r1, fp
 8006a54:	dd11      	ble.n	8006a7a <_strtod_l+0x622>
 8006a56:	2b1f      	cmp	r3, #31
 8006a58:	f340 8124 	ble.w	8006ca4 <_strtod_l+0x84c>
 8006a5c:	2b34      	cmp	r3, #52	; 0x34
 8006a5e:	bfde      	ittt	le
 8006a60:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006a64:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8006a68:	fa03 f202 	lslle.w	r2, r3, r2
 8006a6c:	f04f 0a00 	mov.w	sl, #0
 8006a70:	bfcc      	ite	gt
 8006a72:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006a76:	ea02 0b01 	andle.w	fp, r2, r1
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	4650      	mov	r0, sl
 8006a80:	4659      	mov	r1, fp
 8006a82:	f7fa f841 	bl	8000b08 <__aeabi_dcmpeq>
 8006a86:	2800      	cmp	r0, #0
 8006a88:	d1a2      	bne.n	80069d0 <_strtod_l+0x578>
 8006a8a:	9b07      	ldr	r3, [sp, #28]
 8006a8c:	9300      	str	r3, [sp, #0]
 8006a8e:	9908      	ldr	r1, [sp, #32]
 8006a90:	462b      	mov	r3, r5
 8006a92:	463a      	mov	r2, r7
 8006a94:	4620      	mov	r0, r4
 8006a96:	f001 fe5f 	bl	8008758 <__s2b>
 8006a9a:	9007      	str	r0, [sp, #28]
 8006a9c:	2800      	cmp	r0, #0
 8006a9e:	f43f af1f 	beq.w	80068e0 <_strtod_l+0x488>
 8006aa2:	9b05      	ldr	r3, [sp, #20]
 8006aa4:	1b9e      	subs	r6, r3, r6
 8006aa6:	9b06      	ldr	r3, [sp, #24]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	bfb4      	ite	lt
 8006aac:	4633      	movlt	r3, r6
 8006aae:	2300      	movge	r3, #0
 8006ab0:	930c      	str	r3, [sp, #48]	; 0x30
 8006ab2:	9b06      	ldr	r3, [sp, #24]
 8006ab4:	2500      	movs	r5, #0
 8006ab6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006aba:	9312      	str	r3, [sp, #72]	; 0x48
 8006abc:	462e      	mov	r6, r5
 8006abe:	9b07      	ldr	r3, [sp, #28]
 8006ac0:	4620      	mov	r0, r4
 8006ac2:	6859      	ldr	r1, [r3, #4]
 8006ac4:	f001 fda0 	bl	8008608 <_Balloc>
 8006ac8:	9005      	str	r0, [sp, #20]
 8006aca:	2800      	cmp	r0, #0
 8006acc:	f43f af0c 	beq.w	80068e8 <_strtod_l+0x490>
 8006ad0:	9b07      	ldr	r3, [sp, #28]
 8006ad2:	691a      	ldr	r2, [r3, #16]
 8006ad4:	3202      	adds	r2, #2
 8006ad6:	f103 010c 	add.w	r1, r3, #12
 8006ada:	0092      	lsls	r2, r2, #2
 8006adc:	300c      	adds	r0, #12
 8006ade:	f001 fd85 	bl	80085ec <memcpy>
 8006ae2:	ec4b ab10 	vmov	d0, sl, fp
 8006ae6:	aa1a      	add	r2, sp, #104	; 0x68
 8006ae8:	a919      	add	r1, sp, #100	; 0x64
 8006aea:	4620      	mov	r0, r4
 8006aec:	f002 f97a 	bl	8008de4 <__d2b>
 8006af0:	ec4b ab18 	vmov	d8, sl, fp
 8006af4:	9018      	str	r0, [sp, #96]	; 0x60
 8006af6:	2800      	cmp	r0, #0
 8006af8:	f43f aef6 	beq.w	80068e8 <_strtod_l+0x490>
 8006afc:	2101      	movs	r1, #1
 8006afe:	4620      	mov	r0, r4
 8006b00:	f001 fec4 	bl	800888c <__i2b>
 8006b04:	4606      	mov	r6, r0
 8006b06:	2800      	cmp	r0, #0
 8006b08:	f43f aeee 	beq.w	80068e8 <_strtod_l+0x490>
 8006b0c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006b0e:	9904      	ldr	r1, [sp, #16]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	bfab      	itete	ge
 8006b14:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8006b16:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8006b18:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006b1a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8006b1e:	bfac      	ite	ge
 8006b20:	eb03 0902 	addge.w	r9, r3, r2
 8006b24:	1ad7      	sublt	r7, r2, r3
 8006b26:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006b28:	eba3 0801 	sub.w	r8, r3, r1
 8006b2c:	4490      	add	r8, r2
 8006b2e:	4ba1      	ldr	r3, [pc, #644]	; (8006db4 <_strtod_l+0x95c>)
 8006b30:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8006b34:	4598      	cmp	r8, r3
 8006b36:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006b3a:	f280 80c7 	bge.w	8006ccc <_strtod_l+0x874>
 8006b3e:	eba3 0308 	sub.w	r3, r3, r8
 8006b42:	2b1f      	cmp	r3, #31
 8006b44:	eba2 0203 	sub.w	r2, r2, r3
 8006b48:	f04f 0101 	mov.w	r1, #1
 8006b4c:	f300 80b1 	bgt.w	8006cb2 <_strtod_l+0x85a>
 8006b50:	fa01 f303 	lsl.w	r3, r1, r3
 8006b54:	930d      	str	r3, [sp, #52]	; 0x34
 8006b56:	2300      	movs	r3, #0
 8006b58:	9308      	str	r3, [sp, #32]
 8006b5a:	eb09 0802 	add.w	r8, r9, r2
 8006b5e:	9b04      	ldr	r3, [sp, #16]
 8006b60:	45c1      	cmp	r9, r8
 8006b62:	4417      	add	r7, r2
 8006b64:	441f      	add	r7, r3
 8006b66:	464b      	mov	r3, r9
 8006b68:	bfa8      	it	ge
 8006b6a:	4643      	movge	r3, r8
 8006b6c:	42bb      	cmp	r3, r7
 8006b6e:	bfa8      	it	ge
 8006b70:	463b      	movge	r3, r7
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	bfc2      	ittt	gt
 8006b76:	eba8 0803 	subgt.w	r8, r8, r3
 8006b7a:	1aff      	subgt	r7, r7, r3
 8006b7c:	eba9 0903 	subgt.w	r9, r9, r3
 8006b80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	dd17      	ble.n	8006bb6 <_strtod_l+0x75e>
 8006b86:	4631      	mov	r1, r6
 8006b88:	461a      	mov	r2, r3
 8006b8a:	4620      	mov	r0, r4
 8006b8c:	f001 ff3e 	bl	8008a0c <__pow5mult>
 8006b90:	4606      	mov	r6, r0
 8006b92:	2800      	cmp	r0, #0
 8006b94:	f43f aea8 	beq.w	80068e8 <_strtod_l+0x490>
 8006b98:	4601      	mov	r1, r0
 8006b9a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006b9c:	4620      	mov	r0, r4
 8006b9e:	f001 fe8b 	bl	80088b8 <__multiply>
 8006ba2:	900b      	str	r0, [sp, #44]	; 0x2c
 8006ba4:	2800      	cmp	r0, #0
 8006ba6:	f43f ae9f 	beq.w	80068e8 <_strtod_l+0x490>
 8006baa:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006bac:	4620      	mov	r0, r4
 8006bae:	f001 fd6b 	bl	8008688 <_Bfree>
 8006bb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bb4:	9318      	str	r3, [sp, #96]	; 0x60
 8006bb6:	f1b8 0f00 	cmp.w	r8, #0
 8006bba:	f300 808c 	bgt.w	8006cd6 <_strtod_l+0x87e>
 8006bbe:	9b06      	ldr	r3, [sp, #24]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	dd08      	ble.n	8006bd6 <_strtod_l+0x77e>
 8006bc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006bc6:	9905      	ldr	r1, [sp, #20]
 8006bc8:	4620      	mov	r0, r4
 8006bca:	f001 ff1f 	bl	8008a0c <__pow5mult>
 8006bce:	9005      	str	r0, [sp, #20]
 8006bd0:	2800      	cmp	r0, #0
 8006bd2:	f43f ae89 	beq.w	80068e8 <_strtod_l+0x490>
 8006bd6:	2f00      	cmp	r7, #0
 8006bd8:	dd08      	ble.n	8006bec <_strtod_l+0x794>
 8006bda:	9905      	ldr	r1, [sp, #20]
 8006bdc:	463a      	mov	r2, r7
 8006bde:	4620      	mov	r0, r4
 8006be0:	f001 ff6e 	bl	8008ac0 <__lshift>
 8006be4:	9005      	str	r0, [sp, #20]
 8006be6:	2800      	cmp	r0, #0
 8006be8:	f43f ae7e 	beq.w	80068e8 <_strtod_l+0x490>
 8006bec:	f1b9 0f00 	cmp.w	r9, #0
 8006bf0:	dd08      	ble.n	8006c04 <_strtod_l+0x7ac>
 8006bf2:	4631      	mov	r1, r6
 8006bf4:	464a      	mov	r2, r9
 8006bf6:	4620      	mov	r0, r4
 8006bf8:	f001 ff62 	bl	8008ac0 <__lshift>
 8006bfc:	4606      	mov	r6, r0
 8006bfe:	2800      	cmp	r0, #0
 8006c00:	f43f ae72 	beq.w	80068e8 <_strtod_l+0x490>
 8006c04:	9a05      	ldr	r2, [sp, #20]
 8006c06:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006c08:	4620      	mov	r0, r4
 8006c0a:	f001 ffe5 	bl	8008bd8 <__mdiff>
 8006c0e:	4605      	mov	r5, r0
 8006c10:	2800      	cmp	r0, #0
 8006c12:	f43f ae69 	beq.w	80068e8 <_strtod_l+0x490>
 8006c16:	68c3      	ldr	r3, [r0, #12]
 8006c18:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	60c3      	str	r3, [r0, #12]
 8006c1e:	4631      	mov	r1, r6
 8006c20:	f001 ffbe 	bl	8008ba0 <__mcmp>
 8006c24:	2800      	cmp	r0, #0
 8006c26:	da60      	bge.n	8006cea <_strtod_l+0x892>
 8006c28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c2a:	ea53 030a 	orrs.w	r3, r3, sl
 8006c2e:	f040 8082 	bne.w	8006d36 <_strtod_l+0x8de>
 8006c32:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d17d      	bne.n	8006d36 <_strtod_l+0x8de>
 8006c3a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006c3e:	0d1b      	lsrs	r3, r3, #20
 8006c40:	051b      	lsls	r3, r3, #20
 8006c42:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006c46:	d976      	bls.n	8006d36 <_strtod_l+0x8de>
 8006c48:	696b      	ldr	r3, [r5, #20]
 8006c4a:	b913      	cbnz	r3, 8006c52 <_strtod_l+0x7fa>
 8006c4c:	692b      	ldr	r3, [r5, #16]
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	dd71      	ble.n	8006d36 <_strtod_l+0x8de>
 8006c52:	4629      	mov	r1, r5
 8006c54:	2201      	movs	r2, #1
 8006c56:	4620      	mov	r0, r4
 8006c58:	f001 ff32 	bl	8008ac0 <__lshift>
 8006c5c:	4631      	mov	r1, r6
 8006c5e:	4605      	mov	r5, r0
 8006c60:	f001 ff9e 	bl	8008ba0 <__mcmp>
 8006c64:	2800      	cmp	r0, #0
 8006c66:	dd66      	ble.n	8006d36 <_strtod_l+0x8de>
 8006c68:	9904      	ldr	r1, [sp, #16]
 8006c6a:	4a53      	ldr	r2, [pc, #332]	; (8006db8 <_strtod_l+0x960>)
 8006c6c:	465b      	mov	r3, fp
 8006c6e:	2900      	cmp	r1, #0
 8006c70:	f000 8081 	beq.w	8006d76 <_strtod_l+0x91e>
 8006c74:	ea02 010b 	and.w	r1, r2, fp
 8006c78:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006c7c:	dc7b      	bgt.n	8006d76 <_strtod_l+0x91e>
 8006c7e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006c82:	f77f aea9 	ble.w	80069d8 <_strtod_l+0x580>
 8006c86:	4b4d      	ldr	r3, [pc, #308]	; (8006dbc <_strtod_l+0x964>)
 8006c88:	4650      	mov	r0, sl
 8006c8a:	4659      	mov	r1, fp
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f7f9 fcd3 	bl	8000638 <__aeabi_dmul>
 8006c92:	460b      	mov	r3, r1
 8006c94:	4303      	orrs	r3, r0
 8006c96:	bf08      	it	eq
 8006c98:	2322      	moveq	r3, #34	; 0x22
 8006c9a:	4682      	mov	sl, r0
 8006c9c:	468b      	mov	fp, r1
 8006c9e:	bf08      	it	eq
 8006ca0:	6023      	streq	r3, [r4, #0]
 8006ca2:	e62b      	b.n	80068fc <_strtod_l+0x4a4>
 8006ca4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8006cac:	ea03 0a0a 	and.w	sl, r3, sl
 8006cb0:	e6e3      	b.n	8006a7a <_strtod_l+0x622>
 8006cb2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006cb6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006cba:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006cbe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006cc2:	fa01 f308 	lsl.w	r3, r1, r8
 8006cc6:	9308      	str	r3, [sp, #32]
 8006cc8:	910d      	str	r1, [sp, #52]	; 0x34
 8006cca:	e746      	b.n	8006b5a <_strtod_l+0x702>
 8006ccc:	2300      	movs	r3, #0
 8006cce:	9308      	str	r3, [sp, #32]
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	930d      	str	r3, [sp, #52]	; 0x34
 8006cd4:	e741      	b.n	8006b5a <_strtod_l+0x702>
 8006cd6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006cd8:	4642      	mov	r2, r8
 8006cda:	4620      	mov	r0, r4
 8006cdc:	f001 fef0 	bl	8008ac0 <__lshift>
 8006ce0:	9018      	str	r0, [sp, #96]	; 0x60
 8006ce2:	2800      	cmp	r0, #0
 8006ce4:	f47f af6b 	bne.w	8006bbe <_strtod_l+0x766>
 8006ce8:	e5fe      	b.n	80068e8 <_strtod_l+0x490>
 8006cea:	465f      	mov	r7, fp
 8006cec:	d16e      	bne.n	8006dcc <_strtod_l+0x974>
 8006cee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006cf0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006cf4:	b342      	cbz	r2, 8006d48 <_strtod_l+0x8f0>
 8006cf6:	4a32      	ldr	r2, [pc, #200]	; (8006dc0 <_strtod_l+0x968>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d128      	bne.n	8006d4e <_strtod_l+0x8f6>
 8006cfc:	9b04      	ldr	r3, [sp, #16]
 8006cfe:	4651      	mov	r1, sl
 8006d00:	b1eb      	cbz	r3, 8006d3e <_strtod_l+0x8e6>
 8006d02:	4b2d      	ldr	r3, [pc, #180]	; (8006db8 <_strtod_l+0x960>)
 8006d04:	403b      	ands	r3, r7
 8006d06:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006d0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d0e:	d819      	bhi.n	8006d44 <_strtod_l+0x8ec>
 8006d10:	0d1b      	lsrs	r3, r3, #20
 8006d12:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006d16:	fa02 f303 	lsl.w	r3, r2, r3
 8006d1a:	4299      	cmp	r1, r3
 8006d1c:	d117      	bne.n	8006d4e <_strtod_l+0x8f6>
 8006d1e:	4b29      	ldr	r3, [pc, #164]	; (8006dc4 <_strtod_l+0x96c>)
 8006d20:	429f      	cmp	r7, r3
 8006d22:	d102      	bne.n	8006d2a <_strtod_l+0x8d2>
 8006d24:	3101      	adds	r1, #1
 8006d26:	f43f addf 	beq.w	80068e8 <_strtod_l+0x490>
 8006d2a:	4b23      	ldr	r3, [pc, #140]	; (8006db8 <_strtod_l+0x960>)
 8006d2c:	403b      	ands	r3, r7
 8006d2e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006d32:	f04f 0a00 	mov.w	sl, #0
 8006d36:	9b04      	ldr	r3, [sp, #16]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d1a4      	bne.n	8006c86 <_strtod_l+0x82e>
 8006d3c:	e5de      	b.n	80068fc <_strtod_l+0x4a4>
 8006d3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d42:	e7ea      	b.n	8006d1a <_strtod_l+0x8c2>
 8006d44:	4613      	mov	r3, r2
 8006d46:	e7e8      	b.n	8006d1a <_strtod_l+0x8c2>
 8006d48:	ea53 030a 	orrs.w	r3, r3, sl
 8006d4c:	d08c      	beq.n	8006c68 <_strtod_l+0x810>
 8006d4e:	9b08      	ldr	r3, [sp, #32]
 8006d50:	b1db      	cbz	r3, 8006d8a <_strtod_l+0x932>
 8006d52:	423b      	tst	r3, r7
 8006d54:	d0ef      	beq.n	8006d36 <_strtod_l+0x8de>
 8006d56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d58:	9a04      	ldr	r2, [sp, #16]
 8006d5a:	4650      	mov	r0, sl
 8006d5c:	4659      	mov	r1, fp
 8006d5e:	b1c3      	cbz	r3, 8006d92 <_strtod_l+0x93a>
 8006d60:	f7ff fb5e 	bl	8006420 <sulp>
 8006d64:	4602      	mov	r2, r0
 8006d66:	460b      	mov	r3, r1
 8006d68:	ec51 0b18 	vmov	r0, r1, d8
 8006d6c:	f7f9 faae 	bl	80002cc <__adddf3>
 8006d70:	4682      	mov	sl, r0
 8006d72:	468b      	mov	fp, r1
 8006d74:	e7df      	b.n	8006d36 <_strtod_l+0x8de>
 8006d76:	4013      	ands	r3, r2
 8006d78:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006d7c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006d80:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006d84:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006d88:	e7d5      	b.n	8006d36 <_strtod_l+0x8de>
 8006d8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d8c:	ea13 0f0a 	tst.w	r3, sl
 8006d90:	e7e0      	b.n	8006d54 <_strtod_l+0x8fc>
 8006d92:	f7ff fb45 	bl	8006420 <sulp>
 8006d96:	4602      	mov	r2, r0
 8006d98:	460b      	mov	r3, r1
 8006d9a:	ec51 0b18 	vmov	r0, r1, d8
 8006d9e:	f7f9 fa93 	bl	80002c8 <__aeabi_dsub>
 8006da2:	2200      	movs	r2, #0
 8006da4:	2300      	movs	r3, #0
 8006da6:	4682      	mov	sl, r0
 8006da8:	468b      	mov	fp, r1
 8006daa:	f7f9 fead 	bl	8000b08 <__aeabi_dcmpeq>
 8006dae:	2800      	cmp	r0, #0
 8006db0:	d0c1      	beq.n	8006d36 <_strtod_l+0x8de>
 8006db2:	e611      	b.n	80069d8 <_strtod_l+0x580>
 8006db4:	fffffc02 	.word	0xfffffc02
 8006db8:	7ff00000 	.word	0x7ff00000
 8006dbc:	39500000 	.word	0x39500000
 8006dc0:	000fffff 	.word	0x000fffff
 8006dc4:	7fefffff 	.word	0x7fefffff
 8006dc8:	0800a2d8 	.word	0x0800a2d8
 8006dcc:	4631      	mov	r1, r6
 8006dce:	4628      	mov	r0, r5
 8006dd0:	f002 f864 	bl	8008e9c <__ratio>
 8006dd4:	ec59 8b10 	vmov	r8, r9, d0
 8006dd8:	ee10 0a10 	vmov	r0, s0
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006de2:	4649      	mov	r1, r9
 8006de4:	f7f9 fea4 	bl	8000b30 <__aeabi_dcmple>
 8006de8:	2800      	cmp	r0, #0
 8006dea:	d07a      	beq.n	8006ee2 <_strtod_l+0xa8a>
 8006dec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d04a      	beq.n	8006e88 <_strtod_l+0xa30>
 8006df2:	4b95      	ldr	r3, [pc, #596]	; (8007048 <_strtod_l+0xbf0>)
 8006df4:	2200      	movs	r2, #0
 8006df6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006dfa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007048 <_strtod_l+0xbf0>
 8006dfe:	f04f 0800 	mov.w	r8, #0
 8006e02:	4b92      	ldr	r3, [pc, #584]	; (800704c <_strtod_l+0xbf4>)
 8006e04:	403b      	ands	r3, r7
 8006e06:	930d      	str	r3, [sp, #52]	; 0x34
 8006e08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006e0a:	4b91      	ldr	r3, [pc, #580]	; (8007050 <_strtod_l+0xbf8>)
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	f040 80b0 	bne.w	8006f72 <_strtod_l+0xb1a>
 8006e12:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006e16:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006e1a:	ec4b ab10 	vmov	d0, sl, fp
 8006e1e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006e22:	f001 ff63 	bl	8008cec <__ulp>
 8006e26:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006e2a:	ec53 2b10 	vmov	r2, r3, d0
 8006e2e:	f7f9 fc03 	bl	8000638 <__aeabi_dmul>
 8006e32:	4652      	mov	r2, sl
 8006e34:	465b      	mov	r3, fp
 8006e36:	f7f9 fa49 	bl	80002cc <__adddf3>
 8006e3a:	460b      	mov	r3, r1
 8006e3c:	4983      	ldr	r1, [pc, #524]	; (800704c <_strtod_l+0xbf4>)
 8006e3e:	4a85      	ldr	r2, [pc, #532]	; (8007054 <_strtod_l+0xbfc>)
 8006e40:	4019      	ands	r1, r3
 8006e42:	4291      	cmp	r1, r2
 8006e44:	4682      	mov	sl, r0
 8006e46:	d960      	bls.n	8006f0a <_strtod_l+0xab2>
 8006e48:	ee18 3a90 	vmov	r3, s17
 8006e4c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d104      	bne.n	8006e5e <_strtod_l+0xa06>
 8006e54:	ee18 3a10 	vmov	r3, s16
 8006e58:	3301      	adds	r3, #1
 8006e5a:	f43f ad45 	beq.w	80068e8 <_strtod_l+0x490>
 8006e5e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007060 <_strtod_l+0xc08>
 8006e62:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006e66:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006e68:	4620      	mov	r0, r4
 8006e6a:	f001 fc0d 	bl	8008688 <_Bfree>
 8006e6e:	9905      	ldr	r1, [sp, #20]
 8006e70:	4620      	mov	r0, r4
 8006e72:	f001 fc09 	bl	8008688 <_Bfree>
 8006e76:	4631      	mov	r1, r6
 8006e78:	4620      	mov	r0, r4
 8006e7a:	f001 fc05 	bl	8008688 <_Bfree>
 8006e7e:	4629      	mov	r1, r5
 8006e80:	4620      	mov	r0, r4
 8006e82:	f001 fc01 	bl	8008688 <_Bfree>
 8006e86:	e61a      	b.n	8006abe <_strtod_l+0x666>
 8006e88:	f1ba 0f00 	cmp.w	sl, #0
 8006e8c:	d11b      	bne.n	8006ec6 <_strtod_l+0xa6e>
 8006e8e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006e92:	b9f3      	cbnz	r3, 8006ed2 <_strtod_l+0xa7a>
 8006e94:	4b6c      	ldr	r3, [pc, #432]	; (8007048 <_strtod_l+0xbf0>)
 8006e96:	2200      	movs	r2, #0
 8006e98:	4640      	mov	r0, r8
 8006e9a:	4649      	mov	r1, r9
 8006e9c:	f7f9 fe3e 	bl	8000b1c <__aeabi_dcmplt>
 8006ea0:	b9d0      	cbnz	r0, 8006ed8 <_strtod_l+0xa80>
 8006ea2:	4640      	mov	r0, r8
 8006ea4:	4649      	mov	r1, r9
 8006ea6:	4b6c      	ldr	r3, [pc, #432]	; (8007058 <_strtod_l+0xc00>)
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f7f9 fbc5 	bl	8000638 <__aeabi_dmul>
 8006eae:	4680      	mov	r8, r0
 8006eb0:	4689      	mov	r9, r1
 8006eb2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006eb6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8006eba:	9315      	str	r3, [sp, #84]	; 0x54
 8006ebc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006ec0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006ec4:	e79d      	b.n	8006e02 <_strtod_l+0x9aa>
 8006ec6:	f1ba 0f01 	cmp.w	sl, #1
 8006eca:	d102      	bne.n	8006ed2 <_strtod_l+0xa7a>
 8006ecc:	2f00      	cmp	r7, #0
 8006ece:	f43f ad83 	beq.w	80069d8 <_strtod_l+0x580>
 8006ed2:	4b62      	ldr	r3, [pc, #392]	; (800705c <_strtod_l+0xc04>)
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	e78e      	b.n	8006df6 <_strtod_l+0x99e>
 8006ed8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007058 <_strtod_l+0xc00>
 8006edc:	f04f 0800 	mov.w	r8, #0
 8006ee0:	e7e7      	b.n	8006eb2 <_strtod_l+0xa5a>
 8006ee2:	4b5d      	ldr	r3, [pc, #372]	; (8007058 <_strtod_l+0xc00>)
 8006ee4:	4640      	mov	r0, r8
 8006ee6:	4649      	mov	r1, r9
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f7f9 fba5 	bl	8000638 <__aeabi_dmul>
 8006eee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ef0:	4680      	mov	r8, r0
 8006ef2:	4689      	mov	r9, r1
 8006ef4:	b933      	cbnz	r3, 8006f04 <_strtod_l+0xaac>
 8006ef6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006efa:	900e      	str	r0, [sp, #56]	; 0x38
 8006efc:	930f      	str	r3, [sp, #60]	; 0x3c
 8006efe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006f02:	e7dd      	b.n	8006ec0 <_strtod_l+0xa68>
 8006f04:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006f08:	e7f9      	b.n	8006efe <_strtod_l+0xaa6>
 8006f0a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006f0e:	9b04      	ldr	r3, [sp, #16]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d1a8      	bne.n	8006e66 <_strtod_l+0xa0e>
 8006f14:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006f18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006f1a:	0d1b      	lsrs	r3, r3, #20
 8006f1c:	051b      	lsls	r3, r3, #20
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d1a1      	bne.n	8006e66 <_strtod_l+0xa0e>
 8006f22:	4640      	mov	r0, r8
 8006f24:	4649      	mov	r1, r9
 8006f26:	f7f9 fee7 	bl	8000cf8 <__aeabi_d2lz>
 8006f2a:	f7f9 fb57 	bl	80005dc <__aeabi_l2d>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	460b      	mov	r3, r1
 8006f32:	4640      	mov	r0, r8
 8006f34:	4649      	mov	r1, r9
 8006f36:	f7f9 f9c7 	bl	80002c8 <__aeabi_dsub>
 8006f3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006f3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f40:	ea43 030a 	orr.w	r3, r3, sl
 8006f44:	4313      	orrs	r3, r2
 8006f46:	4680      	mov	r8, r0
 8006f48:	4689      	mov	r9, r1
 8006f4a:	d055      	beq.n	8006ff8 <_strtod_l+0xba0>
 8006f4c:	a336      	add	r3, pc, #216	; (adr r3, 8007028 <_strtod_l+0xbd0>)
 8006f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f52:	f7f9 fde3 	bl	8000b1c <__aeabi_dcmplt>
 8006f56:	2800      	cmp	r0, #0
 8006f58:	f47f acd0 	bne.w	80068fc <_strtod_l+0x4a4>
 8006f5c:	a334      	add	r3, pc, #208	; (adr r3, 8007030 <_strtod_l+0xbd8>)
 8006f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f62:	4640      	mov	r0, r8
 8006f64:	4649      	mov	r1, r9
 8006f66:	f7f9 fdf7 	bl	8000b58 <__aeabi_dcmpgt>
 8006f6a:	2800      	cmp	r0, #0
 8006f6c:	f43f af7b 	beq.w	8006e66 <_strtod_l+0xa0e>
 8006f70:	e4c4      	b.n	80068fc <_strtod_l+0x4a4>
 8006f72:	9b04      	ldr	r3, [sp, #16]
 8006f74:	b333      	cbz	r3, 8006fc4 <_strtod_l+0xb6c>
 8006f76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f78:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006f7c:	d822      	bhi.n	8006fc4 <_strtod_l+0xb6c>
 8006f7e:	a32e      	add	r3, pc, #184	; (adr r3, 8007038 <_strtod_l+0xbe0>)
 8006f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f84:	4640      	mov	r0, r8
 8006f86:	4649      	mov	r1, r9
 8006f88:	f7f9 fdd2 	bl	8000b30 <__aeabi_dcmple>
 8006f8c:	b1a0      	cbz	r0, 8006fb8 <_strtod_l+0xb60>
 8006f8e:	4649      	mov	r1, r9
 8006f90:	4640      	mov	r0, r8
 8006f92:	f7f9 fe29 	bl	8000be8 <__aeabi_d2uiz>
 8006f96:	2801      	cmp	r0, #1
 8006f98:	bf38      	it	cc
 8006f9a:	2001      	movcc	r0, #1
 8006f9c:	f7f9 fad2 	bl	8000544 <__aeabi_ui2d>
 8006fa0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fa2:	4680      	mov	r8, r0
 8006fa4:	4689      	mov	r9, r1
 8006fa6:	bb23      	cbnz	r3, 8006ff2 <_strtod_l+0xb9a>
 8006fa8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006fac:	9010      	str	r0, [sp, #64]	; 0x40
 8006fae:	9311      	str	r3, [sp, #68]	; 0x44
 8006fb0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006fb4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006fb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006fbc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006fc0:	1a9b      	subs	r3, r3, r2
 8006fc2:	9309      	str	r3, [sp, #36]	; 0x24
 8006fc4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006fc8:	eeb0 0a48 	vmov.f32	s0, s16
 8006fcc:	eef0 0a68 	vmov.f32	s1, s17
 8006fd0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006fd4:	f001 fe8a 	bl	8008cec <__ulp>
 8006fd8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006fdc:	ec53 2b10 	vmov	r2, r3, d0
 8006fe0:	f7f9 fb2a 	bl	8000638 <__aeabi_dmul>
 8006fe4:	ec53 2b18 	vmov	r2, r3, d8
 8006fe8:	f7f9 f970 	bl	80002cc <__adddf3>
 8006fec:	4682      	mov	sl, r0
 8006fee:	468b      	mov	fp, r1
 8006ff0:	e78d      	b.n	8006f0e <_strtod_l+0xab6>
 8006ff2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8006ff6:	e7db      	b.n	8006fb0 <_strtod_l+0xb58>
 8006ff8:	a311      	add	r3, pc, #68	; (adr r3, 8007040 <_strtod_l+0xbe8>)
 8006ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ffe:	f7f9 fd8d 	bl	8000b1c <__aeabi_dcmplt>
 8007002:	e7b2      	b.n	8006f6a <_strtod_l+0xb12>
 8007004:	2300      	movs	r3, #0
 8007006:	930a      	str	r3, [sp, #40]	; 0x28
 8007008:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800700a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800700c:	6013      	str	r3, [r2, #0]
 800700e:	f7ff ba6b 	b.w	80064e8 <_strtod_l+0x90>
 8007012:	2a65      	cmp	r2, #101	; 0x65
 8007014:	f43f ab5f 	beq.w	80066d6 <_strtod_l+0x27e>
 8007018:	2a45      	cmp	r2, #69	; 0x45
 800701a:	f43f ab5c 	beq.w	80066d6 <_strtod_l+0x27e>
 800701e:	2301      	movs	r3, #1
 8007020:	f7ff bb94 	b.w	800674c <_strtod_l+0x2f4>
 8007024:	f3af 8000 	nop.w
 8007028:	94a03595 	.word	0x94a03595
 800702c:	3fdfffff 	.word	0x3fdfffff
 8007030:	35afe535 	.word	0x35afe535
 8007034:	3fe00000 	.word	0x3fe00000
 8007038:	ffc00000 	.word	0xffc00000
 800703c:	41dfffff 	.word	0x41dfffff
 8007040:	94a03595 	.word	0x94a03595
 8007044:	3fcfffff 	.word	0x3fcfffff
 8007048:	3ff00000 	.word	0x3ff00000
 800704c:	7ff00000 	.word	0x7ff00000
 8007050:	7fe00000 	.word	0x7fe00000
 8007054:	7c9fffff 	.word	0x7c9fffff
 8007058:	3fe00000 	.word	0x3fe00000
 800705c:	bff00000 	.word	0xbff00000
 8007060:	7fefffff 	.word	0x7fefffff

08007064 <_strtod_r>:
 8007064:	4b01      	ldr	r3, [pc, #4]	; (800706c <_strtod_r+0x8>)
 8007066:	f7ff b9f7 	b.w	8006458 <_strtod_l>
 800706a:	bf00      	nop
 800706c:	20000078 	.word	0x20000078

08007070 <_strtol_l.constprop.0>:
 8007070:	2b01      	cmp	r3, #1
 8007072:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007076:	d001      	beq.n	800707c <_strtol_l.constprop.0+0xc>
 8007078:	2b24      	cmp	r3, #36	; 0x24
 800707a:	d906      	bls.n	800708a <_strtol_l.constprop.0+0x1a>
 800707c:	f7fe fac0 	bl	8005600 <__errno>
 8007080:	2316      	movs	r3, #22
 8007082:	6003      	str	r3, [r0, #0]
 8007084:	2000      	movs	r0, #0
 8007086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800708a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007170 <_strtol_l.constprop.0+0x100>
 800708e:	460d      	mov	r5, r1
 8007090:	462e      	mov	r6, r5
 8007092:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007096:	f814 700c 	ldrb.w	r7, [r4, ip]
 800709a:	f017 0708 	ands.w	r7, r7, #8
 800709e:	d1f7      	bne.n	8007090 <_strtol_l.constprop.0+0x20>
 80070a0:	2c2d      	cmp	r4, #45	; 0x2d
 80070a2:	d132      	bne.n	800710a <_strtol_l.constprop.0+0x9a>
 80070a4:	782c      	ldrb	r4, [r5, #0]
 80070a6:	2701      	movs	r7, #1
 80070a8:	1cb5      	adds	r5, r6, #2
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d05b      	beq.n	8007166 <_strtol_l.constprop.0+0xf6>
 80070ae:	2b10      	cmp	r3, #16
 80070b0:	d109      	bne.n	80070c6 <_strtol_l.constprop.0+0x56>
 80070b2:	2c30      	cmp	r4, #48	; 0x30
 80070b4:	d107      	bne.n	80070c6 <_strtol_l.constprop.0+0x56>
 80070b6:	782c      	ldrb	r4, [r5, #0]
 80070b8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80070bc:	2c58      	cmp	r4, #88	; 0x58
 80070be:	d14d      	bne.n	800715c <_strtol_l.constprop.0+0xec>
 80070c0:	786c      	ldrb	r4, [r5, #1]
 80070c2:	2310      	movs	r3, #16
 80070c4:	3502      	adds	r5, #2
 80070c6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80070ca:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80070ce:	f04f 0c00 	mov.w	ip, #0
 80070d2:	fbb8 f9f3 	udiv	r9, r8, r3
 80070d6:	4666      	mov	r6, ip
 80070d8:	fb03 8a19 	mls	sl, r3, r9, r8
 80070dc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80070e0:	f1be 0f09 	cmp.w	lr, #9
 80070e4:	d816      	bhi.n	8007114 <_strtol_l.constprop.0+0xa4>
 80070e6:	4674      	mov	r4, lr
 80070e8:	42a3      	cmp	r3, r4
 80070ea:	dd24      	ble.n	8007136 <_strtol_l.constprop.0+0xc6>
 80070ec:	f1bc 0f00 	cmp.w	ip, #0
 80070f0:	db1e      	blt.n	8007130 <_strtol_l.constprop.0+0xc0>
 80070f2:	45b1      	cmp	r9, r6
 80070f4:	d31c      	bcc.n	8007130 <_strtol_l.constprop.0+0xc0>
 80070f6:	d101      	bne.n	80070fc <_strtol_l.constprop.0+0x8c>
 80070f8:	45a2      	cmp	sl, r4
 80070fa:	db19      	blt.n	8007130 <_strtol_l.constprop.0+0xc0>
 80070fc:	fb06 4603 	mla	r6, r6, r3, r4
 8007100:	f04f 0c01 	mov.w	ip, #1
 8007104:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007108:	e7e8      	b.n	80070dc <_strtol_l.constprop.0+0x6c>
 800710a:	2c2b      	cmp	r4, #43	; 0x2b
 800710c:	bf04      	itt	eq
 800710e:	782c      	ldrbeq	r4, [r5, #0]
 8007110:	1cb5      	addeq	r5, r6, #2
 8007112:	e7ca      	b.n	80070aa <_strtol_l.constprop.0+0x3a>
 8007114:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007118:	f1be 0f19 	cmp.w	lr, #25
 800711c:	d801      	bhi.n	8007122 <_strtol_l.constprop.0+0xb2>
 800711e:	3c37      	subs	r4, #55	; 0x37
 8007120:	e7e2      	b.n	80070e8 <_strtol_l.constprop.0+0x78>
 8007122:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007126:	f1be 0f19 	cmp.w	lr, #25
 800712a:	d804      	bhi.n	8007136 <_strtol_l.constprop.0+0xc6>
 800712c:	3c57      	subs	r4, #87	; 0x57
 800712e:	e7db      	b.n	80070e8 <_strtol_l.constprop.0+0x78>
 8007130:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8007134:	e7e6      	b.n	8007104 <_strtol_l.constprop.0+0x94>
 8007136:	f1bc 0f00 	cmp.w	ip, #0
 800713a:	da05      	bge.n	8007148 <_strtol_l.constprop.0+0xd8>
 800713c:	2322      	movs	r3, #34	; 0x22
 800713e:	6003      	str	r3, [r0, #0]
 8007140:	4646      	mov	r6, r8
 8007142:	b942      	cbnz	r2, 8007156 <_strtol_l.constprop.0+0xe6>
 8007144:	4630      	mov	r0, r6
 8007146:	e79e      	b.n	8007086 <_strtol_l.constprop.0+0x16>
 8007148:	b107      	cbz	r7, 800714c <_strtol_l.constprop.0+0xdc>
 800714a:	4276      	negs	r6, r6
 800714c:	2a00      	cmp	r2, #0
 800714e:	d0f9      	beq.n	8007144 <_strtol_l.constprop.0+0xd4>
 8007150:	f1bc 0f00 	cmp.w	ip, #0
 8007154:	d000      	beq.n	8007158 <_strtol_l.constprop.0+0xe8>
 8007156:	1e69      	subs	r1, r5, #1
 8007158:	6011      	str	r1, [r2, #0]
 800715a:	e7f3      	b.n	8007144 <_strtol_l.constprop.0+0xd4>
 800715c:	2430      	movs	r4, #48	; 0x30
 800715e:	2b00      	cmp	r3, #0
 8007160:	d1b1      	bne.n	80070c6 <_strtol_l.constprop.0+0x56>
 8007162:	2308      	movs	r3, #8
 8007164:	e7af      	b.n	80070c6 <_strtol_l.constprop.0+0x56>
 8007166:	2c30      	cmp	r4, #48	; 0x30
 8007168:	d0a5      	beq.n	80070b6 <_strtol_l.constprop.0+0x46>
 800716a:	230a      	movs	r3, #10
 800716c:	e7ab      	b.n	80070c6 <_strtol_l.constprop.0+0x56>
 800716e:	bf00      	nop
 8007170:	0800a33d 	.word	0x0800a33d

08007174 <_strtol_r>:
 8007174:	f7ff bf7c 	b.w	8007070 <_strtol_l.constprop.0>

08007178 <__assert_func>:
 8007178:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800717a:	4614      	mov	r4, r2
 800717c:	461a      	mov	r2, r3
 800717e:	4b09      	ldr	r3, [pc, #36]	; (80071a4 <__assert_func+0x2c>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4605      	mov	r5, r0
 8007184:	68d8      	ldr	r0, [r3, #12]
 8007186:	b14c      	cbz	r4, 800719c <__assert_func+0x24>
 8007188:	4b07      	ldr	r3, [pc, #28]	; (80071a8 <__assert_func+0x30>)
 800718a:	9100      	str	r1, [sp, #0]
 800718c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007190:	4906      	ldr	r1, [pc, #24]	; (80071ac <__assert_func+0x34>)
 8007192:	462b      	mov	r3, r5
 8007194:	f000 fe8a 	bl	8007eac <fiprintf>
 8007198:	f002 fba0 	bl	80098dc <abort>
 800719c:	4b04      	ldr	r3, [pc, #16]	; (80071b0 <__assert_func+0x38>)
 800719e:	461c      	mov	r4, r3
 80071a0:	e7f3      	b.n	800718a <__assert_func+0x12>
 80071a2:	bf00      	nop
 80071a4:	20000010 	.word	0x20000010
 80071a8:	0800a300 	.word	0x0800a300
 80071ac:	0800a30d 	.word	0x0800a30d
 80071b0:	0800a33b 	.word	0x0800a33b

080071b4 <quorem>:
 80071b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071b8:	6903      	ldr	r3, [r0, #16]
 80071ba:	690c      	ldr	r4, [r1, #16]
 80071bc:	42a3      	cmp	r3, r4
 80071be:	4607      	mov	r7, r0
 80071c0:	f2c0 8081 	blt.w	80072c6 <quorem+0x112>
 80071c4:	3c01      	subs	r4, #1
 80071c6:	f101 0814 	add.w	r8, r1, #20
 80071ca:	f100 0514 	add.w	r5, r0, #20
 80071ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071d2:	9301      	str	r3, [sp, #4]
 80071d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80071d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071dc:	3301      	adds	r3, #1
 80071de:	429a      	cmp	r2, r3
 80071e0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80071e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80071e8:	fbb2 f6f3 	udiv	r6, r2, r3
 80071ec:	d331      	bcc.n	8007252 <quorem+0x9e>
 80071ee:	f04f 0e00 	mov.w	lr, #0
 80071f2:	4640      	mov	r0, r8
 80071f4:	46ac      	mov	ip, r5
 80071f6:	46f2      	mov	sl, lr
 80071f8:	f850 2b04 	ldr.w	r2, [r0], #4
 80071fc:	b293      	uxth	r3, r2
 80071fe:	fb06 e303 	mla	r3, r6, r3, lr
 8007202:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007206:	b29b      	uxth	r3, r3
 8007208:	ebaa 0303 	sub.w	r3, sl, r3
 800720c:	f8dc a000 	ldr.w	sl, [ip]
 8007210:	0c12      	lsrs	r2, r2, #16
 8007212:	fa13 f38a 	uxtah	r3, r3, sl
 8007216:	fb06 e202 	mla	r2, r6, r2, lr
 800721a:	9300      	str	r3, [sp, #0]
 800721c:	9b00      	ldr	r3, [sp, #0]
 800721e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007222:	b292      	uxth	r2, r2
 8007224:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007228:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800722c:	f8bd 3000 	ldrh.w	r3, [sp]
 8007230:	4581      	cmp	r9, r0
 8007232:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007236:	f84c 3b04 	str.w	r3, [ip], #4
 800723a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800723e:	d2db      	bcs.n	80071f8 <quorem+0x44>
 8007240:	f855 300b 	ldr.w	r3, [r5, fp]
 8007244:	b92b      	cbnz	r3, 8007252 <quorem+0x9e>
 8007246:	9b01      	ldr	r3, [sp, #4]
 8007248:	3b04      	subs	r3, #4
 800724a:	429d      	cmp	r5, r3
 800724c:	461a      	mov	r2, r3
 800724e:	d32e      	bcc.n	80072ae <quorem+0xfa>
 8007250:	613c      	str	r4, [r7, #16]
 8007252:	4638      	mov	r0, r7
 8007254:	f001 fca4 	bl	8008ba0 <__mcmp>
 8007258:	2800      	cmp	r0, #0
 800725a:	db24      	blt.n	80072a6 <quorem+0xf2>
 800725c:	3601      	adds	r6, #1
 800725e:	4628      	mov	r0, r5
 8007260:	f04f 0c00 	mov.w	ip, #0
 8007264:	f858 2b04 	ldr.w	r2, [r8], #4
 8007268:	f8d0 e000 	ldr.w	lr, [r0]
 800726c:	b293      	uxth	r3, r2
 800726e:	ebac 0303 	sub.w	r3, ip, r3
 8007272:	0c12      	lsrs	r2, r2, #16
 8007274:	fa13 f38e 	uxtah	r3, r3, lr
 8007278:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800727c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007280:	b29b      	uxth	r3, r3
 8007282:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007286:	45c1      	cmp	r9, r8
 8007288:	f840 3b04 	str.w	r3, [r0], #4
 800728c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007290:	d2e8      	bcs.n	8007264 <quorem+0xb0>
 8007292:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007296:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800729a:	b922      	cbnz	r2, 80072a6 <quorem+0xf2>
 800729c:	3b04      	subs	r3, #4
 800729e:	429d      	cmp	r5, r3
 80072a0:	461a      	mov	r2, r3
 80072a2:	d30a      	bcc.n	80072ba <quorem+0x106>
 80072a4:	613c      	str	r4, [r7, #16]
 80072a6:	4630      	mov	r0, r6
 80072a8:	b003      	add	sp, #12
 80072aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072ae:	6812      	ldr	r2, [r2, #0]
 80072b0:	3b04      	subs	r3, #4
 80072b2:	2a00      	cmp	r2, #0
 80072b4:	d1cc      	bne.n	8007250 <quorem+0x9c>
 80072b6:	3c01      	subs	r4, #1
 80072b8:	e7c7      	b.n	800724a <quorem+0x96>
 80072ba:	6812      	ldr	r2, [r2, #0]
 80072bc:	3b04      	subs	r3, #4
 80072be:	2a00      	cmp	r2, #0
 80072c0:	d1f0      	bne.n	80072a4 <quorem+0xf0>
 80072c2:	3c01      	subs	r4, #1
 80072c4:	e7eb      	b.n	800729e <quorem+0xea>
 80072c6:	2000      	movs	r0, #0
 80072c8:	e7ee      	b.n	80072a8 <quorem+0xf4>
 80072ca:	0000      	movs	r0, r0
 80072cc:	0000      	movs	r0, r0
	...

080072d0 <_dtoa_r>:
 80072d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072d4:	ed2d 8b04 	vpush	{d8-d9}
 80072d8:	ec57 6b10 	vmov	r6, r7, d0
 80072dc:	b093      	sub	sp, #76	; 0x4c
 80072de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80072e0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80072e4:	9106      	str	r1, [sp, #24]
 80072e6:	ee10 aa10 	vmov	sl, s0
 80072ea:	4604      	mov	r4, r0
 80072ec:	9209      	str	r2, [sp, #36]	; 0x24
 80072ee:	930c      	str	r3, [sp, #48]	; 0x30
 80072f0:	46bb      	mov	fp, r7
 80072f2:	b975      	cbnz	r5, 8007312 <_dtoa_r+0x42>
 80072f4:	2010      	movs	r0, #16
 80072f6:	f001 f95f 	bl	80085b8 <malloc>
 80072fa:	4602      	mov	r2, r0
 80072fc:	6260      	str	r0, [r4, #36]	; 0x24
 80072fe:	b920      	cbnz	r0, 800730a <_dtoa_r+0x3a>
 8007300:	4ba7      	ldr	r3, [pc, #668]	; (80075a0 <_dtoa_r+0x2d0>)
 8007302:	21ea      	movs	r1, #234	; 0xea
 8007304:	48a7      	ldr	r0, [pc, #668]	; (80075a4 <_dtoa_r+0x2d4>)
 8007306:	f7ff ff37 	bl	8007178 <__assert_func>
 800730a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800730e:	6005      	str	r5, [r0, #0]
 8007310:	60c5      	str	r5, [r0, #12]
 8007312:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007314:	6819      	ldr	r1, [r3, #0]
 8007316:	b151      	cbz	r1, 800732e <_dtoa_r+0x5e>
 8007318:	685a      	ldr	r2, [r3, #4]
 800731a:	604a      	str	r2, [r1, #4]
 800731c:	2301      	movs	r3, #1
 800731e:	4093      	lsls	r3, r2
 8007320:	608b      	str	r3, [r1, #8]
 8007322:	4620      	mov	r0, r4
 8007324:	f001 f9b0 	bl	8008688 <_Bfree>
 8007328:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800732a:	2200      	movs	r2, #0
 800732c:	601a      	str	r2, [r3, #0]
 800732e:	1e3b      	subs	r3, r7, #0
 8007330:	bfaa      	itet	ge
 8007332:	2300      	movge	r3, #0
 8007334:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007338:	f8c8 3000 	strge.w	r3, [r8]
 800733c:	4b9a      	ldr	r3, [pc, #616]	; (80075a8 <_dtoa_r+0x2d8>)
 800733e:	bfbc      	itt	lt
 8007340:	2201      	movlt	r2, #1
 8007342:	f8c8 2000 	strlt.w	r2, [r8]
 8007346:	ea33 030b 	bics.w	r3, r3, fp
 800734a:	d11b      	bne.n	8007384 <_dtoa_r+0xb4>
 800734c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800734e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007352:	6013      	str	r3, [r2, #0]
 8007354:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007358:	4333      	orrs	r3, r6
 800735a:	f000 8592 	beq.w	8007e82 <_dtoa_r+0xbb2>
 800735e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007360:	b963      	cbnz	r3, 800737c <_dtoa_r+0xac>
 8007362:	4b92      	ldr	r3, [pc, #584]	; (80075ac <_dtoa_r+0x2dc>)
 8007364:	e022      	b.n	80073ac <_dtoa_r+0xdc>
 8007366:	4b92      	ldr	r3, [pc, #584]	; (80075b0 <_dtoa_r+0x2e0>)
 8007368:	9301      	str	r3, [sp, #4]
 800736a:	3308      	adds	r3, #8
 800736c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800736e:	6013      	str	r3, [r2, #0]
 8007370:	9801      	ldr	r0, [sp, #4]
 8007372:	b013      	add	sp, #76	; 0x4c
 8007374:	ecbd 8b04 	vpop	{d8-d9}
 8007378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800737c:	4b8b      	ldr	r3, [pc, #556]	; (80075ac <_dtoa_r+0x2dc>)
 800737e:	9301      	str	r3, [sp, #4]
 8007380:	3303      	adds	r3, #3
 8007382:	e7f3      	b.n	800736c <_dtoa_r+0x9c>
 8007384:	2200      	movs	r2, #0
 8007386:	2300      	movs	r3, #0
 8007388:	4650      	mov	r0, sl
 800738a:	4659      	mov	r1, fp
 800738c:	f7f9 fbbc 	bl	8000b08 <__aeabi_dcmpeq>
 8007390:	ec4b ab19 	vmov	d9, sl, fp
 8007394:	4680      	mov	r8, r0
 8007396:	b158      	cbz	r0, 80073b0 <_dtoa_r+0xe0>
 8007398:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800739a:	2301      	movs	r3, #1
 800739c:	6013      	str	r3, [r2, #0]
 800739e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	f000 856b 	beq.w	8007e7c <_dtoa_r+0xbac>
 80073a6:	4883      	ldr	r0, [pc, #524]	; (80075b4 <_dtoa_r+0x2e4>)
 80073a8:	6018      	str	r0, [r3, #0]
 80073aa:	1e43      	subs	r3, r0, #1
 80073ac:	9301      	str	r3, [sp, #4]
 80073ae:	e7df      	b.n	8007370 <_dtoa_r+0xa0>
 80073b0:	ec4b ab10 	vmov	d0, sl, fp
 80073b4:	aa10      	add	r2, sp, #64	; 0x40
 80073b6:	a911      	add	r1, sp, #68	; 0x44
 80073b8:	4620      	mov	r0, r4
 80073ba:	f001 fd13 	bl	8008de4 <__d2b>
 80073be:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80073c2:	ee08 0a10 	vmov	s16, r0
 80073c6:	2d00      	cmp	r5, #0
 80073c8:	f000 8084 	beq.w	80074d4 <_dtoa_r+0x204>
 80073cc:	ee19 3a90 	vmov	r3, s19
 80073d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80073d4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80073d8:	4656      	mov	r6, sl
 80073da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80073de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80073e2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80073e6:	4b74      	ldr	r3, [pc, #464]	; (80075b8 <_dtoa_r+0x2e8>)
 80073e8:	2200      	movs	r2, #0
 80073ea:	4630      	mov	r0, r6
 80073ec:	4639      	mov	r1, r7
 80073ee:	f7f8 ff6b 	bl	80002c8 <__aeabi_dsub>
 80073f2:	a365      	add	r3, pc, #404	; (adr r3, 8007588 <_dtoa_r+0x2b8>)
 80073f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f8:	f7f9 f91e 	bl	8000638 <__aeabi_dmul>
 80073fc:	a364      	add	r3, pc, #400	; (adr r3, 8007590 <_dtoa_r+0x2c0>)
 80073fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007402:	f7f8 ff63 	bl	80002cc <__adddf3>
 8007406:	4606      	mov	r6, r0
 8007408:	4628      	mov	r0, r5
 800740a:	460f      	mov	r7, r1
 800740c:	f7f9 f8aa 	bl	8000564 <__aeabi_i2d>
 8007410:	a361      	add	r3, pc, #388	; (adr r3, 8007598 <_dtoa_r+0x2c8>)
 8007412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007416:	f7f9 f90f 	bl	8000638 <__aeabi_dmul>
 800741a:	4602      	mov	r2, r0
 800741c:	460b      	mov	r3, r1
 800741e:	4630      	mov	r0, r6
 8007420:	4639      	mov	r1, r7
 8007422:	f7f8 ff53 	bl	80002cc <__adddf3>
 8007426:	4606      	mov	r6, r0
 8007428:	460f      	mov	r7, r1
 800742a:	f7f9 fbb5 	bl	8000b98 <__aeabi_d2iz>
 800742e:	2200      	movs	r2, #0
 8007430:	9000      	str	r0, [sp, #0]
 8007432:	2300      	movs	r3, #0
 8007434:	4630      	mov	r0, r6
 8007436:	4639      	mov	r1, r7
 8007438:	f7f9 fb70 	bl	8000b1c <__aeabi_dcmplt>
 800743c:	b150      	cbz	r0, 8007454 <_dtoa_r+0x184>
 800743e:	9800      	ldr	r0, [sp, #0]
 8007440:	f7f9 f890 	bl	8000564 <__aeabi_i2d>
 8007444:	4632      	mov	r2, r6
 8007446:	463b      	mov	r3, r7
 8007448:	f7f9 fb5e 	bl	8000b08 <__aeabi_dcmpeq>
 800744c:	b910      	cbnz	r0, 8007454 <_dtoa_r+0x184>
 800744e:	9b00      	ldr	r3, [sp, #0]
 8007450:	3b01      	subs	r3, #1
 8007452:	9300      	str	r3, [sp, #0]
 8007454:	9b00      	ldr	r3, [sp, #0]
 8007456:	2b16      	cmp	r3, #22
 8007458:	d85a      	bhi.n	8007510 <_dtoa_r+0x240>
 800745a:	9a00      	ldr	r2, [sp, #0]
 800745c:	4b57      	ldr	r3, [pc, #348]	; (80075bc <_dtoa_r+0x2ec>)
 800745e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007466:	ec51 0b19 	vmov	r0, r1, d9
 800746a:	f7f9 fb57 	bl	8000b1c <__aeabi_dcmplt>
 800746e:	2800      	cmp	r0, #0
 8007470:	d050      	beq.n	8007514 <_dtoa_r+0x244>
 8007472:	9b00      	ldr	r3, [sp, #0]
 8007474:	3b01      	subs	r3, #1
 8007476:	9300      	str	r3, [sp, #0]
 8007478:	2300      	movs	r3, #0
 800747a:	930b      	str	r3, [sp, #44]	; 0x2c
 800747c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800747e:	1b5d      	subs	r5, r3, r5
 8007480:	1e6b      	subs	r3, r5, #1
 8007482:	9305      	str	r3, [sp, #20]
 8007484:	bf45      	ittet	mi
 8007486:	f1c5 0301 	rsbmi	r3, r5, #1
 800748a:	9304      	strmi	r3, [sp, #16]
 800748c:	2300      	movpl	r3, #0
 800748e:	2300      	movmi	r3, #0
 8007490:	bf4c      	ite	mi
 8007492:	9305      	strmi	r3, [sp, #20]
 8007494:	9304      	strpl	r3, [sp, #16]
 8007496:	9b00      	ldr	r3, [sp, #0]
 8007498:	2b00      	cmp	r3, #0
 800749a:	db3d      	blt.n	8007518 <_dtoa_r+0x248>
 800749c:	9b05      	ldr	r3, [sp, #20]
 800749e:	9a00      	ldr	r2, [sp, #0]
 80074a0:	920a      	str	r2, [sp, #40]	; 0x28
 80074a2:	4413      	add	r3, r2
 80074a4:	9305      	str	r3, [sp, #20]
 80074a6:	2300      	movs	r3, #0
 80074a8:	9307      	str	r3, [sp, #28]
 80074aa:	9b06      	ldr	r3, [sp, #24]
 80074ac:	2b09      	cmp	r3, #9
 80074ae:	f200 8089 	bhi.w	80075c4 <_dtoa_r+0x2f4>
 80074b2:	2b05      	cmp	r3, #5
 80074b4:	bfc4      	itt	gt
 80074b6:	3b04      	subgt	r3, #4
 80074b8:	9306      	strgt	r3, [sp, #24]
 80074ba:	9b06      	ldr	r3, [sp, #24]
 80074bc:	f1a3 0302 	sub.w	r3, r3, #2
 80074c0:	bfcc      	ite	gt
 80074c2:	2500      	movgt	r5, #0
 80074c4:	2501      	movle	r5, #1
 80074c6:	2b03      	cmp	r3, #3
 80074c8:	f200 8087 	bhi.w	80075da <_dtoa_r+0x30a>
 80074cc:	e8df f003 	tbb	[pc, r3]
 80074d0:	59383a2d 	.word	0x59383a2d
 80074d4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80074d8:	441d      	add	r5, r3
 80074da:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80074de:	2b20      	cmp	r3, #32
 80074e0:	bfc1      	itttt	gt
 80074e2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80074e6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80074ea:	fa0b f303 	lslgt.w	r3, fp, r3
 80074ee:	fa26 f000 	lsrgt.w	r0, r6, r0
 80074f2:	bfda      	itte	le
 80074f4:	f1c3 0320 	rsble	r3, r3, #32
 80074f8:	fa06 f003 	lslle.w	r0, r6, r3
 80074fc:	4318      	orrgt	r0, r3
 80074fe:	f7f9 f821 	bl	8000544 <__aeabi_ui2d>
 8007502:	2301      	movs	r3, #1
 8007504:	4606      	mov	r6, r0
 8007506:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800750a:	3d01      	subs	r5, #1
 800750c:	930e      	str	r3, [sp, #56]	; 0x38
 800750e:	e76a      	b.n	80073e6 <_dtoa_r+0x116>
 8007510:	2301      	movs	r3, #1
 8007512:	e7b2      	b.n	800747a <_dtoa_r+0x1aa>
 8007514:	900b      	str	r0, [sp, #44]	; 0x2c
 8007516:	e7b1      	b.n	800747c <_dtoa_r+0x1ac>
 8007518:	9b04      	ldr	r3, [sp, #16]
 800751a:	9a00      	ldr	r2, [sp, #0]
 800751c:	1a9b      	subs	r3, r3, r2
 800751e:	9304      	str	r3, [sp, #16]
 8007520:	4253      	negs	r3, r2
 8007522:	9307      	str	r3, [sp, #28]
 8007524:	2300      	movs	r3, #0
 8007526:	930a      	str	r3, [sp, #40]	; 0x28
 8007528:	e7bf      	b.n	80074aa <_dtoa_r+0x1da>
 800752a:	2300      	movs	r3, #0
 800752c:	9308      	str	r3, [sp, #32]
 800752e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007530:	2b00      	cmp	r3, #0
 8007532:	dc55      	bgt.n	80075e0 <_dtoa_r+0x310>
 8007534:	2301      	movs	r3, #1
 8007536:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800753a:	461a      	mov	r2, r3
 800753c:	9209      	str	r2, [sp, #36]	; 0x24
 800753e:	e00c      	b.n	800755a <_dtoa_r+0x28a>
 8007540:	2301      	movs	r3, #1
 8007542:	e7f3      	b.n	800752c <_dtoa_r+0x25c>
 8007544:	2300      	movs	r3, #0
 8007546:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007548:	9308      	str	r3, [sp, #32]
 800754a:	9b00      	ldr	r3, [sp, #0]
 800754c:	4413      	add	r3, r2
 800754e:	9302      	str	r3, [sp, #8]
 8007550:	3301      	adds	r3, #1
 8007552:	2b01      	cmp	r3, #1
 8007554:	9303      	str	r3, [sp, #12]
 8007556:	bfb8      	it	lt
 8007558:	2301      	movlt	r3, #1
 800755a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800755c:	2200      	movs	r2, #0
 800755e:	6042      	str	r2, [r0, #4]
 8007560:	2204      	movs	r2, #4
 8007562:	f102 0614 	add.w	r6, r2, #20
 8007566:	429e      	cmp	r6, r3
 8007568:	6841      	ldr	r1, [r0, #4]
 800756a:	d93d      	bls.n	80075e8 <_dtoa_r+0x318>
 800756c:	4620      	mov	r0, r4
 800756e:	f001 f84b 	bl	8008608 <_Balloc>
 8007572:	9001      	str	r0, [sp, #4]
 8007574:	2800      	cmp	r0, #0
 8007576:	d13b      	bne.n	80075f0 <_dtoa_r+0x320>
 8007578:	4b11      	ldr	r3, [pc, #68]	; (80075c0 <_dtoa_r+0x2f0>)
 800757a:	4602      	mov	r2, r0
 800757c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007580:	e6c0      	b.n	8007304 <_dtoa_r+0x34>
 8007582:	2301      	movs	r3, #1
 8007584:	e7df      	b.n	8007546 <_dtoa_r+0x276>
 8007586:	bf00      	nop
 8007588:	636f4361 	.word	0x636f4361
 800758c:	3fd287a7 	.word	0x3fd287a7
 8007590:	8b60c8b3 	.word	0x8b60c8b3
 8007594:	3fc68a28 	.word	0x3fc68a28
 8007598:	509f79fb 	.word	0x509f79fb
 800759c:	3fd34413 	.word	0x3fd34413
 80075a0:	0800a23d 	.word	0x0800a23d
 80075a4:	0800a44a 	.word	0x0800a44a
 80075a8:	7ff00000 	.word	0x7ff00000
 80075ac:	0800a446 	.word	0x0800a446
 80075b0:	0800a43d 	.word	0x0800a43d
 80075b4:	0800a215 	.word	0x0800a215
 80075b8:	3ff80000 	.word	0x3ff80000
 80075bc:	0800a5b8 	.word	0x0800a5b8
 80075c0:	0800a4a5 	.word	0x0800a4a5
 80075c4:	2501      	movs	r5, #1
 80075c6:	2300      	movs	r3, #0
 80075c8:	9306      	str	r3, [sp, #24]
 80075ca:	9508      	str	r5, [sp, #32]
 80075cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80075d4:	2200      	movs	r2, #0
 80075d6:	2312      	movs	r3, #18
 80075d8:	e7b0      	b.n	800753c <_dtoa_r+0x26c>
 80075da:	2301      	movs	r3, #1
 80075dc:	9308      	str	r3, [sp, #32]
 80075de:	e7f5      	b.n	80075cc <_dtoa_r+0x2fc>
 80075e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80075e6:	e7b8      	b.n	800755a <_dtoa_r+0x28a>
 80075e8:	3101      	adds	r1, #1
 80075ea:	6041      	str	r1, [r0, #4]
 80075ec:	0052      	lsls	r2, r2, #1
 80075ee:	e7b8      	b.n	8007562 <_dtoa_r+0x292>
 80075f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075f2:	9a01      	ldr	r2, [sp, #4]
 80075f4:	601a      	str	r2, [r3, #0]
 80075f6:	9b03      	ldr	r3, [sp, #12]
 80075f8:	2b0e      	cmp	r3, #14
 80075fa:	f200 809d 	bhi.w	8007738 <_dtoa_r+0x468>
 80075fe:	2d00      	cmp	r5, #0
 8007600:	f000 809a 	beq.w	8007738 <_dtoa_r+0x468>
 8007604:	9b00      	ldr	r3, [sp, #0]
 8007606:	2b00      	cmp	r3, #0
 8007608:	dd32      	ble.n	8007670 <_dtoa_r+0x3a0>
 800760a:	4ab7      	ldr	r2, [pc, #732]	; (80078e8 <_dtoa_r+0x618>)
 800760c:	f003 030f 	and.w	r3, r3, #15
 8007610:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007614:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007618:	9b00      	ldr	r3, [sp, #0]
 800761a:	05d8      	lsls	r0, r3, #23
 800761c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007620:	d516      	bpl.n	8007650 <_dtoa_r+0x380>
 8007622:	4bb2      	ldr	r3, [pc, #712]	; (80078ec <_dtoa_r+0x61c>)
 8007624:	ec51 0b19 	vmov	r0, r1, d9
 8007628:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800762c:	f7f9 f92e 	bl	800088c <__aeabi_ddiv>
 8007630:	f007 070f 	and.w	r7, r7, #15
 8007634:	4682      	mov	sl, r0
 8007636:	468b      	mov	fp, r1
 8007638:	2503      	movs	r5, #3
 800763a:	4eac      	ldr	r6, [pc, #688]	; (80078ec <_dtoa_r+0x61c>)
 800763c:	b957      	cbnz	r7, 8007654 <_dtoa_r+0x384>
 800763e:	4642      	mov	r2, r8
 8007640:	464b      	mov	r3, r9
 8007642:	4650      	mov	r0, sl
 8007644:	4659      	mov	r1, fp
 8007646:	f7f9 f921 	bl	800088c <__aeabi_ddiv>
 800764a:	4682      	mov	sl, r0
 800764c:	468b      	mov	fp, r1
 800764e:	e028      	b.n	80076a2 <_dtoa_r+0x3d2>
 8007650:	2502      	movs	r5, #2
 8007652:	e7f2      	b.n	800763a <_dtoa_r+0x36a>
 8007654:	07f9      	lsls	r1, r7, #31
 8007656:	d508      	bpl.n	800766a <_dtoa_r+0x39a>
 8007658:	4640      	mov	r0, r8
 800765a:	4649      	mov	r1, r9
 800765c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007660:	f7f8 ffea 	bl	8000638 <__aeabi_dmul>
 8007664:	3501      	adds	r5, #1
 8007666:	4680      	mov	r8, r0
 8007668:	4689      	mov	r9, r1
 800766a:	107f      	asrs	r7, r7, #1
 800766c:	3608      	adds	r6, #8
 800766e:	e7e5      	b.n	800763c <_dtoa_r+0x36c>
 8007670:	f000 809b 	beq.w	80077aa <_dtoa_r+0x4da>
 8007674:	9b00      	ldr	r3, [sp, #0]
 8007676:	4f9d      	ldr	r7, [pc, #628]	; (80078ec <_dtoa_r+0x61c>)
 8007678:	425e      	negs	r6, r3
 800767a:	4b9b      	ldr	r3, [pc, #620]	; (80078e8 <_dtoa_r+0x618>)
 800767c:	f006 020f 	and.w	r2, r6, #15
 8007680:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007688:	ec51 0b19 	vmov	r0, r1, d9
 800768c:	f7f8 ffd4 	bl	8000638 <__aeabi_dmul>
 8007690:	1136      	asrs	r6, r6, #4
 8007692:	4682      	mov	sl, r0
 8007694:	468b      	mov	fp, r1
 8007696:	2300      	movs	r3, #0
 8007698:	2502      	movs	r5, #2
 800769a:	2e00      	cmp	r6, #0
 800769c:	d17a      	bne.n	8007794 <_dtoa_r+0x4c4>
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d1d3      	bne.n	800764a <_dtoa_r+0x37a>
 80076a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	f000 8082 	beq.w	80077ae <_dtoa_r+0x4de>
 80076aa:	4b91      	ldr	r3, [pc, #580]	; (80078f0 <_dtoa_r+0x620>)
 80076ac:	2200      	movs	r2, #0
 80076ae:	4650      	mov	r0, sl
 80076b0:	4659      	mov	r1, fp
 80076b2:	f7f9 fa33 	bl	8000b1c <__aeabi_dcmplt>
 80076b6:	2800      	cmp	r0, #0
 80076b8:	d079      	beq.n	80077ae <_dtoa_r+0x4de>
 80076ba:	9b03      	ldr	r3, [sp, #12]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d076      	beq.n	80077ae <_dtoa_r+0x4de>
 80076c0:	9b02      	ldr	r3, [sp, #8]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	dd36      	ble.n	8007734 <_dtoa_r+0x464>
 80076c6:	9b00      	ldr	r3, [sp, #0]
 80076c8:	4650      	mov	r0, sl
 80076ca:	4659      	mov	r1, fp
 80076cc:	1e5f      	subs	r7, r3, #1
 80076ce:	2200      	movs	r2, #0
 80076d0:	4b88      	ldr	r3, [pc, #544]	; (80078f4 <_dtoa_r+0x624>)
 80076d2:	f7f8 ffb1 	bl	8000638 <__aeabi_dmul>
 80076d6:	9e02      	ldr	r6, [sp, #8]
 80076d8:	4682      	mov	sl, r0
 80076da:	468b      	mov	fp, r1
 80076dc:	3501      	adds	r5, #1
 80076de:	4628      	mov	r0, r5
 80076e0:	f7f8 ff40 	bl	8000564 <__aeabi_i2d>
 80076e4:	4652      	mov	r2, sl
 80076e6:	465b      	mov	r3, fp
 80076e8:	f7f8 ffa6 	bl	8000638 <__aeabi_dmul>
 80076ec:	4b82      	ldr	r3, [pc, #520]	; (80078f8 <_dtoa_r+0x628>)
 80076ee:	2200      	movs	r2, #0
 80076f0:	f7f8 fdec 	bl	80002cc <__adddf3>
 80076f4:	46d0      	mov	r8, sl
 80076f6:	46d9      	mov	r9, fp
 80076f8:	4682      	mov	sl, r0
 80076fa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80076fe:	2e00      	cmp	r6, #0
 8007700:	d158      	bne.n	80077b4 <_dtoa_r+0x4e4>
 8007702:	4b7e      	ldr	r3, [pc, #504]	; (80078fc <_dtoa_r+0x62c>)
 8007704:	2200      	movs	r2, #0
 8007706:	4640      	mov	r0, r8
 8007708:	4649      	mov	r1, r9
 800770a:	f7f8 fddd 	bl	80002c8 <__aeabi_dsub>
 800770e:	4652      	mov	r2, sl
 8007710:	465b      	mov	r3, fp
 8007712:	4680      	mov	r8, r0
 8007714:	4689      	mov	r9, r1
 8007716:	f7f9 fa1f 	bl	8000b58 <__aeabi_dcmpgt>
 800771a:	2800      	cmp	r0, #0
 800771c:	f040 8295 	bne.w	8007c4a <_dtoa_r+0x97a>
 8007720:	4652      	mov	r2, sl
 8007722:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007726:	4640      	mov	r0, r8
 8007728:	4649      	mov	r1, r9
 800772a:	f7f9 f9f7 	bl	8000b1c <__aeabi_dcmplt>
 800772e:	2800      	cmp	r0, #0
 8007730:	f040 8289 	bne.w	8007c46 <_dtoa_r+0x976>
 8007734:	ec5b ab19 	vmov	sl, fp, d9
 8007738:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800773a:	2b00      	cmp	r3, #0
 800773c:	f2c0 8148 	blt.w	80079d0 <_dtoa_r+0x700>
 8007740:	9a00      	ldr	r2, [sp, #0]
 8007742:	2a0e      	cmp	r2, #14
 8007744:	f300 8144 	bgt.w	80079d0 <_dtoa_r+0x700>
 8007748:	4b67      	ldr	r3, [pc, #412]	; (80078e8 <_dtoa_r+0x618>)
 800774a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800774e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007752:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007754:	2b00      	cmp	r3, #0
 8007756:	f280 80d5 	bge.w	8007904 <_dtoa_r+0x634>
 800775a:	9b03      	ldr	r3, [sp, #12]
 800775c:	2b00      	cmp	r3, #0
 800775e:	f300 80d1 	bgt.w	8007904 <_dtoa_r+0x634>
 8007762:	f040 826f 	bne.w	8007c44 <_dtoa_r+0x974>
 8007766:	4b65      	ldr	r3, [pc, #404]	; (80078fc <_dtoa_r+0x62c>)
 8007768:	2200      	movs	r2, #0
 800776a:	4640      	mov	r0, r8
 800776c:	4649      	mov	r1, r9
 800776e:	f7f8 ff63 	bl	8000638 <__aeabi_dmul>
 8007772:	4652      	mov	r2, sl
 8007774:	465b      	mov	r3, fp
 8007776:	f7f9 f9e5 	bl	8000b44 <__aeabi_dcmpge>
 800777a:	9e03      	ldr	r6, [sp, #12]
 800777c:	4637      	mov	r7, r6
 800777e:	2800      	cmp	r0, #0
 8007780:	f040 8245 	bne.w	8007c0e <_dtoa_r+0x93e>
 8007784:	9d01      	ldr	r5, [sp, #4]
 8007786:	2331      	movs	r3, #49	; 0x31
 8007788:	f805 3b01 	strb.w	r3, [r5], #1
 800778c:	9b00      	ldr	r3, [sp, #0]
 800778e:	3301      	adds	r3, #1
 8007790:	9300      	str	r3, [sp, #0]
 8007792:	e240      	b.n	8007c16 <_dtoa_r+0x946>
 8007794:	07f2      	lsls	r2, r6, #31
 8007796:	d505      	bpl.n	80077a4 <_dtoa_r+0x4d4>
 8007798:	e9d7 2300 	ldrd	r2, r3, [r7]
 800779c:	f7f8 ff4c 	bl	8000638 <__aeabi_dmul>
 80077a0:	3501      	adds	r5, #1
 80077a2:	2301      	movs	r3, #1
 80077a4:	1076      	asrs	r6, r6, #1
 80077a6:	3708      	adds	r7, #8
 80077a8:	e777      	b.n	800769a <_dtoa_r+0x3ca>
 80077aa:	2502      	movs	r5, #2
 80077ac:	e779      	b.n	80076a2 <_dtoa_r+0x3d2>
 80077ae:	9f00      	ldr	r7, [sp, #0]
 80077b0:	9e03      	ldr	r6, [sp, #12]
 80077b2:	e794      	b.n	80076de <_dtoa_r+0x40e>
 80077b4:	9901      	ldr	r1, [sp, #4]
 80077b6:	4b4c      	ldr	r3, [pc, #304]	; (80078e8 <_dtoa_r+0x618>)
 80077b8:	4431      	add	r1, r6
 80077ba:	910d      	str	r1, [sp, #52]	; 0x34
 80077bc:	9908      	ldr	r1, [sp, #32]
 80077be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80077c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80077c6:	2900      	cmp	r1, #0
 80077c8:	d043      	beq.n	8007852 <_dtoa_r+0x582>
 80077ca:	494d      	ldr	r1, [pc, #308]	; (8007900 <_dtoa_r+0x630>)
 80077cc:	2000      	movs	r0, #0
 80077ce:	f7f9 f85d 	bl	800088c <__aeabi_ddiv>
 80077d2:	4652      	mov	r2, sl
 80077d4:	465b      	mov	r3, fp
 80077d6:	f7f8 fd77 	bl	80002c8 <__aeabi_dsub>
 80077da:	9d01      	ldr	r5, [sp, #4]
 80077dc:	4682      	mov	sl, r0
 80077de:	468b      	mov	fp, r1
 80077e0:	4649      	mov	r1, r9
 80077e2:	4640      	mov	r0, r8
 80077e4:	f7f9 f9d8 	bl	8000b98 <__aeabi_d2iz>
 80077e8:	4606      	mov	r6, r0
 80077ea:	f7f8 febb 	bl	8000564 <__aeabi_i2d>
 80077ee:	4602      	mov	r2, r0
 80077f0:	460b      	mov	r3, r1
 80077f2:	4640      	mov	r0, r8
 80077f4:	4649      	mov	r1, r9
 80077f6:	f7f8 fd67 	bl	80002c8 <__aeabi_dsub>
 80077fa:	3630      	adds	r6, #48	; 0x30
 80077fc:	f805 6b01 	strb.w	r6, [r5], #1
 8007800:	4652      	mov	r2, sl
 8007802:	465b      	mov	r3, fp
 8007804:	4680      	mov	r8, r0
 8007806:	4689      	mov	r9, r1
 8007808:	f7f9 f988 	bl	8000b1c <__aeabi_dcmplt>
 800780c:	2800      	cmp	r0, #0
 800780e:	d163      	bne.n	80078d8 <_dtoa_r+0x608>
 8007810:	4642      	mov	r2, r8
 8007812:	464b      	mov	r3, r9
 8007814:	4936      	ldr	r1, [pc, #216]	; (80078f0 <_dtoa_r+0x620>)
 8007816:	2000      	movs	r0, #0
 8007818:	f7f8 fd56 	bl	80002c8 <__aeabi_dsub>
 800781c:	4652      	mov	r2, sl
 800781e:	465b      	mov	r3, fp
 8007820:	f7f9 f97c 	bl	8000b1c <__aeabi_dcmplt>
 8007824:	2800      	cmp	r0, #0
 8007826:	f040 80b5 	bne.w	8007994 <_dtoa_r+0x6c4>
 800782a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800782c:	429d      	cmp	r5, r3
 800782e:	d081      	beq.n	8007734 <_dtoa_r+0x464>
 8007830:	4b30      	ldr	r3, [pc, #192]	; (80078f4 <_dtoa_r+0x624>)
 8007832:	2200      	movs	r2, #0
 8007834:	4650      	mov	r0, sl
 8007836:	4659      	mov	r1, fp
 8007838:	f7f8 fefe 	bl	8000638 <__aeabi_dmul>
 800783c:	4b2d      	ldr	r3, [pc, #180]	; (80078f4 <_dtoa_r+0x624>)
 800783e:	4682      	mov	sl, r0
 8007840:	468b      	mov	fp, r1
 8007842:	4640      	mov	r0, r8
 8007844:	4649      	mov	r1, r9
 8007846:	2200      	movs	r2, #0
 8007848:	f7f8 fef6 	bl	8000638 <__aeabi_dmul>
 800784c:	4680      	mov	r8, r0
 800784e:	4689      	mov	r9, r1
 8007850:	e7c6      	b.n	80077e0 <_dtoa_r+0x510>
 8007852:	4650      	mov	r0, sl
 8007854:	4659      	mov	r1, fp
 8007856:	f7f8 feef 	bl	8000638 <__aeabi_dmul>
 800785a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800785c:	9d01      	ldr	r5, [sp, #4]
 800785e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007860:	4682      	mov	sl, r0
 8007862:	468b      	mov	fp, r1
 8007864:	4649      	mov	r1, r9
 8007866:	4640      	mov	r0, r8
 8007868:	f7f9 f996 	bl	8000b98 <__aeabi_d2iz>
 800786c:	4606      	mov	r6, r0
 800786e:	f7f8 fe79 	bl	8000564 <__aeabi_i2d>
 8007872:	3630      	adds	r6, #48	; 0x30
 8007874:	4602      	mov	r2, r0
 8007876:	460b      	mov	r3, r1
 8007878:	4640      	mov	r0, r8
 800787a:	4649      	mov	r1, r9
 800787c:	f7f8 fd24 	bl	80002c8 <__aeabi_dsub>
 8007880:	f805 6b01 	strb.w	r6, [r5], #1
 8007884:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007886:	429d      	cmp	r5, r3
 8007888:	4680      	mov	r8, r0
 800788a:	4689      	mov	r9, r1
 800788c:	f04f 0200 	mov.w	r2, #0
 8007890:	d124      	bne.n	80078dc <_dtoa_r+0x60c>
 8007892:	4b1b      	ldr	r3, [pc, #108]	; (8007900 <_dtoa_r+0x630>)
 8007894:	4650      	mov	r0, sl
 8007896:	4659      	mov	r1, fp
 8007898:	f7f8 fd18 	bl	80002cc <__adddf3>
 800789c:	4602      	mov	r2, r0
 800789e:	460b      	mov	r3, r1
 80078a0:	4640      	mov	r0, r8
 80078a2:	4649      	mov	r1, r9
 80078a4:	f7f9 f958 	bl	8000b58 <__aeabi_dcmpgt>
 80078a8:	2800      	cmp	r0, #0
 80078aa:	d173      	bne.n	8007994 <_dtoa_r+0x6c4>
 80078ac:	4652      	mov	r2, sl
 80078ae:	465b      	mov	r3, fp
 80078b0:	4913      	ldr	r1, [pc, #76]	; (8007900 <_dtoa_r+0x630>)
 80078b2:	2000      	movs	r0, #0
 80078b4:	f7f8 fd08 	bl	80002c8 <__aeabi_dsub>
 80078b8:	4602      	mov	r2, r0
 80078ba:	460b      	mov	r3, r1
 80078bc:	4640      	mov	r0, r8
 80078be:	4649      	mov	r1, r9
 80078c0:	f7f9 f92c 	bl	8000b1c <__aeabi_dcmplt>
 80078c4:	2800      	cmp	r0, #0
 80078c6:	f43f af35 	beq.w	8007734 <_dtoa_r+0x464>
 80078ca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80078cc:	1e6b      	subs	r3, r5, #1
 80078ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80078d0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80078d4:	2b30      	cmp	r3, #48	; 0x30
 80078d6:	d0f8      	beq.n	80078ca <_dtoa_r+0x5fa>
 80078d8:	9700      	str	r7, [sp, #0]
 80078da:	e049      	b.n	8007970 <_dtoa_r+0x6a0>
 80078dc:	4b05      	ldr	r3, [pc, #20]	; (80078f4 <_dtoa_r+0x624>)
 80078de:	f7f8 feab 	bl	8000638 <__aeabi_dmul>
 80078e2:	4680      	mov	r8, r0
 80078e4:	4689      	mov	r9, r1
 80078e6:	e7bd      	b.n	8007864 <_dtoa_r+0x594>
 80078e8:	0800a5b8 	.word	0x0800a5b8
 80078ec:	0800a590 	.word	0x0800a590
 80078f0:	3ff00000 	.word	0x3ff00000
 80078f4:	40240000 	.word	0x40240000
 80078f8:	401c0000 	.word	0x401c0000
 80078fc:	40140000 	.word	0x40140000
 8007900:	3fe00000 	.word	0x3fe00000
 8007904:	9d01      	ldr	r5, [sp, #4]
 8007906:	4656      	mov	r6, sl
 8007908:	465f      	mov	r7, fp
 800790a:	4642      	mov	r2, r8
 800790c:	464b      	mov	r3, r9
 800790e:	4630      	mov	r0, r6
 8007910:	4639      	mov	r1, r7
 8007912:	f7f8 ffbb 	bl	800088c <__aeabi_ddiv>
 8007916:	f7f9 f93f 	bl	8000b98 <__aeabi_d2iz>
 800791a:	4682      	mov	sl, r0
 800791c:	f7f8 fe22 	bl	8000564 <__aeabi_i2d>
 8007920:	4642      	mov	r2, r8
 8007922:	464b      	mov	r3, r9
 8007924:	f7f8 fe88 	bl	8000638 <__aeabi_dmul>
 8007928:	4602      	mov	r2, r0
 800792a:	460b      	mov	r3, r1
 800792c:	4630      	mov	r0, r6
 800792e:	4639      	mov	r1, r7
 8007930:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007934:	f7f8 fcc8 	bl	80002c8 <__aeabi_dsub>
 8007938:	f805 6b01 	strb.w	r6, [r5], #1
 800793c:	9e01      	ldr	r6, [sp, #4]
 800793e:	9f03      	ldr	r7, [sp, #12]
 8007940:	1bae      	subs	r6, r5, r6
 8007942:	42b7      	cmp	r7, r6
 8007944:	4602      	mov	r2, r0
 8007946:	460b      	mov	r3, r1
 8007948:	d135      	bne.n	80079b6 <_dtoa_r+0x6e6>
 800794a:	f7f8 fcbf 	bl	80002cc <__adddf3>
 800794e:	4642      	mov	r2, r8
 8007950:	464b      	mov	r3, r9
 8007952:	4606      	mov	r6, r0
 8007954:	460f      	mov	r7, r1
 8007956:	f7f9 f8ff 	bl	8000b58 <__aeabi_dcmpgt>
 800795a:	b9d0      	cbnz	r0, 8007992 <_dtoa_r+0x6c2>
 800795c:	4642      	mov	r2, r8
 800795e:	464b      	mov	r3, r9
 8007960:	4630      	mov	r0, r6
 8007962:	4639      	mov	r1, r7
 8007964:	f7f9 f8d0 	bl	8000b08 <__aeabi_dcmpeq>
 8007968:	b110      	cbz	r0, 8007970 <_dtoa_r+0x6a0>
 800796a:	f01a 0f01 	tst.w	sl, #1
 800796e:	d110      	bne.n	8007992 <_dtoa_r+0x6c2>
 8007970:	4620      	mov	r0, r4
 8007972:	ee18 1a10 	vmov	r1, s16
 8007976:	f000 fe87 	bl	8008688 <_Bfree>
 800797a:	2300      	movs	r3, #0
 800797c:	9800      	ldr	r0, [sp, #0]
 800797e:	702b      	strb	r3, [r5, #0]
 8007980:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007982:	3001      	adds	r0, #1
 8007984:	6018      	str	r0, [r3, #0]
 8007986:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007988:	2b00      	cmp	r3, #0
 800798a:	f43f acf1 	beq.w	8007370 <_dtoa_r+0xa0>
 800798e:	601d      	str	r5, [r3, #0]
 8007990:	e4ee      	b.n	8007370 <_dtoa_r+0xa0>
 8007992:	9f00      	ldr	r7, [sp, #0]
 8007994:	462b      	mov	r3, r5
 8007996:	461d      	mov	r5, r3
 8007998:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800799c:	2a39      	cmp	r2, #57	; 0x39
 800799e:	d106      	bne.n	80079ae <_dtoa_r+0x6de>
 80079a0:	9a01      	ldr	r2, [sp, #4]
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d1f7      	bne.n	8007996 <_dtoa_r+0x6c6>
 80079a6:	9901      	ldr	r1, [sp, #4]
 80079a8:	2230      	movs	r2, #48	; 0x30
 80079aa:	3701      	adds	r7, #1
 80079ac:	700a      	strb	r2, [r1, #0]
 80079ae:	781a      	ldrb	r2, [r3, #0]
 80079b0:	3201      	adds	r2, #1
 80079b2:	701a      	strb	r2, [r3, #0]
 80079b4:	e790      	b.n	80078d8 <_dtoa_r+0x608>
 80079b6:	4ba6      	ldr	r3, [pc, #664]	; (8007c50 <_dtoa_r+0x980>)
 80079b8:	2200      	movs	r2, #0
 80079ba:	f7f8 fe3d 	bl	8000638 <__aeabi_dmul>
 80079be:	2200      	movs	r2, #0
 80079c0:	2300      	movs	r3, #0
 80079c2:	4606      	mov	r6, r0
 80079c4:	460f      	mov	r7, r1
 80079c6:	f7f9 f89f 	bl	8000b08 <__aeabi_dcmpeq>
 80079ca:	2800      	cmp	r0, #0
 80079cc:	d09d      	beq.n	800790a <_dtoa_r+0x63a>
 80079ce:	e7cf      	b.n	8007970 <_dtoa_r+0x6a0>
 80079d0:	9a08      	ldr	r2, [sp, #32]
 80079d2:	2a00      	cmp	r2, #0
 80079d4:	f000 80d7 	beq.w	8007b86 <_dtoa_r+0x8b6>
 80079d8:	9a06      	ldr	r2, [sp, #24]
 80079da:	2a01      	cmp	r2, #1
 80079dc:	f300 80ba 	bgt.w	8007b54 <_dtoa_r+0x884>
 80079e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80079e2:	2a00      	cmp	r2, #0
 80079e4:	f000 80b2 	beq.w	8007b4c <_dtoa_r+0x87c>
 80079e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80079ec:	9e07      	ldr	r6, [sp, #28]
 80079ee:	9d04      	ldr	r5, [sp, #16]
 80079f0:	9a04      	ldr	r2, [sp, #16]
 80079f2:	441a      	add	r2, r3
 80079f4:	9204      	str	r2, [sp, #16]
 80079f6:	9a05      	ldr	r2, [sp, #20]
 80079f8:	2101      	movs	r1, #1
 80079fa:	441a      	add	r2, r3
 80079fc:	4620      	mov	r0, r4
 80079fe:	9205      	str	r2, [sp, #20]
 8007a00:	f000 ff44 	bl	800888c <__i2b>
 8007a04:	4607      	mov	r7, r0
 8007a06:	2d00      	cmp	r5, #0
 8007a08:	dd0c      	ble.n	8007a24 <_dtoa_r+0x754>
 8007a0a:	9b05      	ldr	r3, [sp, #20]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	dd09      	ble.n	8007a24 <_dtoa_r+0x754>
 8007a10:	42ab      	cmp	r3, r5
 8007a12:	9a04      	ldr	r2, [sp, #16]
 8007a14:	bfa8      	it	ge
 8007a16:	462b      	movge	r3, r5
 8007a18:	1ad2      	subs	r2, r2, r3
 8007a1a:	9204      	str	r2, [sp, #16]
 8007a1c:	9a05      	ldr	r2, [sp, #20]
 8007a1e:	1aed      	subs	r5, r5, r3
 8007a20:	1ad3      	subs	r3, r2, r3
 8007a22:	9305      	str	r3, [sp, #20]
 8007a24:	9b07      	ldr	r3, [sp, #28]
 8007a26:	b31b      	cbz	r3, 8007a70 <_dtoa_r+0x7a0>
 8007a28:	9b08      	ldr	r3, [sp, #32]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	f000 80af 	beq.w	8007b8e <_dtoa_r+0x8be>
 8007a30:	2e00      	cmp	r6, #0
 8007a32:	dd13      	ble.n	8007a5c <_dtoa_r+0x78c>
 8007a34:	4639      	mov	r1, r7
 8007a36:	4632      	mov	r2, r6
 8007a38:	4620      	mov	r0, r4
 8007a3a:	f000 ffe7 	bl	8008a0c <__pow5mult>
 8007a3e:	ee18 2a10 	vmov	r2, s16
 8007a42:	4601      	mov	r1, r0
 8007a44:	4607      	mov	r7, r0
 8007a46:	4620      	mov	r0, r4
 8007a48:	f000 ff36 	bl	80088b8 <__multiply>
 8007a4c:	ee18 1a10 	vmov	r1, s16
 8007a50:	4680      	mov	r8, r0
 8007a52:	4620      	mov	r0, r4
 8007a54:	f000 fe18 	bl	8008688 <_Bfree>
 8007a58:	ee08 8a10 	vmov	s16, r8
 8007a5c:	9b07      	ldr	r3, [sp, #28]
 8007a5e:	1b9a      	subs	r2, r3, r6
 8007a60:	d006      	beq.n	8007a70 <_dtoa_r+0x7a0>
 8007a62:	ee18 1a10 	vmov	r1, s16
 8007a66:	4620      	mov	r0, r4
 8007a68:	f000 ffd0 	bl	8008a0c <__pow5mult>
 8007a6c:	ee08 0a10 	vmov	s16, r0
 8007a70:	2101      	movs	r1, #1
 8007a72:	4620      	mov	r0, r4
 8007a74:	f000 ff0a 	bl	800888c <__i2b>
 8007a78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	4606      	mov	r6, r0
 8007a7e:	f340 8088 	ble.w	8007b92 <_dtoa_r+0x8c2>
 8007a82:	461a      	mov	r2, r3
 8007a84:	4601      	mov	r1, r0
 8007a86:	4620      	mov	r0, r4
 8007a88:	f000 ffc0 	bl	8008a0c <__pow5mult>
 8007a8c:	9b06      	ldr	r3, [sp, #24]
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	4606      	mov	r6, r0
 8007a92:	f340 8081 	ble.w	8007b98 <_dtoa_r+0x8c8>
 8007a96:	f04f 0800 	mov.w	r8, #0
 8007a9a:	6933      	ldr	r3, [r6, #16]
 8007a9c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007aa0:	6918      	ldr	r0, [r3, #16]
 8007aa2:	f000 fea3 	bl	80087ec <__hi0bits>
 8007aa6:	f1c0 0020 	rsb	r0, r0, #32
 8007aaa:	9b05      	ldr	r3, [sp, #20]
 8007aac:	4418      	add	r0, r3
 8007aae:	f010 001f 	ands.w	r0, r0, #31
 8007ab2:	f000 8092 	beq.w	8007bda <_dtoa_r+0x90a>
 8007ab6:	f1c0 0320 	rsb	r3, r0, #32
 8007aba:	2b04      	cmp	r3, #4
 8007abc:	f340 808a 	ble.w	8007bd4 <_dtoa_r+0x904>
 8007ac0:	f1c0 001c 	rsb	r0, r0, #28
 8007ac4:	9b04      	ldr	r3, [sp, #16]
 8007ac6:	4403      	add	r3, r0
 8007ac8:	9304      	str	r3, [sp, #16]
 8007aca:	9b05      	ldr	r3, [sp, #20]
 8007acc:	4403      	add	r3, r0
 8007ace:	4405      	add	r5, r0
 8007ad0:	9305      	str	r3, [sp, #20]
 8007ad2:	9b04      	ldr	r3, [sp, #16]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	dd07      	ble.n	8007ae8 <_dtoa_r+0x818>
 8007ad8:	ee18 1a10 	vmov	r1, s16
 8007adc:	461a      	mov	r2, r3
 8007ade:	4620      	mov	r0, r4
 8007ae0:	f000 ffee 	bl	8008ac0 <__lshift>
 8007ae4:	ee08 0a10 	vmov	s16, r0
 8007ae8:	9b05      	ldr	r3, [sp, #20]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	dd05      	ble.n	8007afa <_dtoa_r+0x82a>
 8007aee:	4631      	mov	r1, r6
 8007af0:	461a      	mov	r2, r3
 8007af2:	4620      	mov	r0, r4
 8007af4:	f000 ffe4 	bl	8008ac0 <__lshift>
 8007af8:	4606      	mov	r6, r0
 8007afa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d06e      	beq.n	8007bde <_dtoa_r+0x90e>
 8007b00:	ee18 0a10 	vmov	r0, s16
 8007b04:	4631      	mov	r1, r6
 8007b06:	f001 f84b 	bl	8008ba0 <__mcmp>
 8007b0a:	2800      	cmp	r0, #0
 8007b0c:	da67      	bge.n	8007bde <_dtoa_r+0x90e>
 8007b0e:	9b00      	ldr	r3, [sp, #0]
 8007b10:	3b01      	subs	r3, #1
 8007b12:	ee18 1a10 	vmov	r1, s16
 8007b16:	9300      	str	r3, [sp, #0]
 8007b18:	220a      	movs	r2, #10
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	4620      	mov	r0, r4
 8007b1e:	f000 fdd5 	bl	80086cc <__multadd>
 8007b22:	9b08      	ldr	r3, [sp, #32]
 8007b24:	ee08 0a10 	vmov	s16, r0
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	f000 81b1 	beq.w	8007e90 <_dtoa_r+0xbc0>
 8007b2e:	2300      	movs	r3, #0
 8007b30:	4639      	mov	r1, r7
 8007b32:	220a      	movs	r2, #10
 8007b34:	4620      	mov	r0, r4
 8007b36:	f000 fdc9 	bl	80086cc <__multadd>
 8007b3a:	9b02      	ldr	r3, [sp, #8]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	4607      	mov	r7, r0
 8007b40:	f300 808e 	bgt.w	8007c60 <_dtoa_r+0x990>
 8007b44:	9b06      	ldr	r3, [sp, #24]
 8007b46:	2b02      	cmp	r3, #2
 8007b48:	dc51      	bgt.n	8007bee <_dtoa_r+0x91e>
 8007b4a:	e089      	b.n	8007c60 <_dtoa_r+0x990>
 8007b4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007b4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007b52:	e74b      	b.n	80079ec <_dtoa_r+0x71c>
 8007b54:	9b03      	ldr	r3, [sp, #12]
 8007b56:	1e5e      	subs	r6, r3, #1
 8007b58:	9b07      	ldr	r3, [sp, #28]
 8007b5a:	42b3      	cmp	r3, r6
 8007b5c:	bfbf      	itttt	lt
 8007b5e:	9b07      	ldrlt	r3, [sp, #28]
 8007b60:	9607      	strlt	r6, [sp, #28]
 8007b62:	1af2      	sublt	r2, r6, r3
 8007b64:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007b66:	bfb6      	itet	lt
 8007b68:	189b      	addlt	r3, r3, r2
 8007b6a:	1b9e      	subge	r6, r3, r6
 8007b6c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007b6e:	9b03      	ldr	r3, [sp, #12]
 8007b70:	bfb8      	it	lt
 8007b72:	2600      	movlt	r6, #0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	bfb7      	itett	lt
 8007b78:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007b7c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007b80:	1a9d      	sublt	r5, r3, r2
 8007b82:	2300      	movlt	r3, #0
 8007b84:	e734      	b.n	80079f0 <_dtoa_r+0x720>
 8007b86:	9e07      	ldr	r6, [sp, #28]
 8007b88:	9d04      	ldr	r5, [sp, #16]
 8007b8a:	9f08      	ldr	r7, [sp, #32]
 8007b8c:	e73b      	b.n	8007a06 <_dtoa_r+0x736>
 8007b8e:	9a07      	ldr	r2, [sp, #28]
 8007b90:	e767      	b.n	8007a62 <_dtoa_r+0x792>
 8007b92:	9b06      	ldr	r3, [sp, #24]
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	dc18      	bgt.n	8007bca <_dtoa_r+0x8fa>
 8007b98:	f1ba 0f00 	cmp.w	sl, #0
 8007b9c:	d115      	bne.n	8007bca <_dtoa_r+0x8fa>
 8007b9e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ba2:	b993      	cbnz	r3, 8007bca <_dtoa_r+0x8fa>
 8007ba4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007ba8:	0d1b      	lsrs	r3, r3, #20
 8007baa:	051b      	lsls	r3, r3, #20
 8007bac:	b183      	cbz	r3, 8007bd0 <_dtoa_r+0x900>
 8007bae:	9b04      	ldr	r3, [sp, #16]
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	9304      	str	r3, [sp, #16]
 8007bb4:	9b05      	ldr	r3, [sp, #20]
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	9305      	str	r3, [sp, #20]
 8007bba:	f04f 0801 	mov.w	r8, #1
 8007bbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	f47f af6a 	bne.w	8007a9a <_dtoa_r+0x7ca>
 8007bc6:	2001      	movs	r0, #1
 8007bc8:	e76f      	b.n	8007aaa <_dtoa_r+0x7da>
 8007bca:	f04f 0800 	mov.w	r8, #0
 8007bce:	e7f6      	b.n	8007bbe <_dtoa_r+0x8ee>
 8007bd0:	4698      	mov	r8, r3
 8007bd2:	e7f4      	b.n	8007bbe <_dtoa_r+0x8ee>
 8007bd4:	f43f af7d 	beq.w	8007ad2 <_dtoa_r+0x802>
 8007bd8:	4618      	mov	r0, r3
 8007bda:	301c      	adds	r0, #28
 8007bdc:	e772      	b.n	8007ac4 <_dtoa_r+0x7f4>
 8007bde:	9b03      	ldr	r3, [sp, #12]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	dc37      	bgt.n	8007c54 <_dtoa_r+0x984>
 8007be4:	9b06      	ldr	r3, [sp, #24]
 8007be6:	2b02      	cmp	r3, #2
 8007be8:	dd34      	ble.n	8007c54 <_dtoa_r+0x984>
 8007bea:	9b03      	ldr	r3, [sp, #12]
 8007bec:	9302      	str	r3, [sp, #8]
 8007bee:	9b02      	ldr	r3, [sp, #8]
 8007bf0:	b96b      	cbnz	r3, 8007c0e <_dtoa_r+0x93e>
 8007bf2:	4631      	mov	r1, r6
 8007bf4:	2205      	movs	r2, #5
 8007bf6:	4620      	mov	r0, r4
 8007bf8:	f000 fd68 	bl	80086cc <__multadd>
 8007bfc:	4601      	mov	r1, r0
 8007bfe:	4606      	mov	r6, r0
 8007c00:	ee18 0a10 	vmov	r0, s16
 8007c04:	f000 ffcc 	bl	8008ba0 <__mcmp>
 8007c08:	2800      	cmp	r0, #0
 8007c0a:	f73f adbb 	bgt.w	8007784 <_dtoa_r+0x4b4>
 8007c0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c10:	9d01      	ldr	r5, [sp, #4]
 8007c12:	43db      	mvns	r3, r3
 8007c14:	9300      	str	r3, [sp, #0]
 8007c16:	f04f 0800 	mov.w	r8, #0
 8007c1a:	4631      	mov	r1, r6
 8007c1c:	4620      	mov	r0, r4
 8007c1e:	f000 fd33 	bl	8008688 <_Bfree>
 8007c22:	2f00      	cmp	r7, #0
 8007c24:	f43f aea4 	beq.w	8007970 <_dtoa_r+0x6a0>
 8007c28:	f1b8 0f00 	cmp.w	r8, #0
 8007c2c:	d005      	beq.n	8007c3a <_dtoa_r+0x96a>
 8007c2e:	45b8      	cmp	r8, r7
 8007c30:	d003      	beq.n	8007c3a <_dtoa_r+0x96a>
 8007c32:	4641      	mov	r1, r8
 8007c34:	4620      	mov	r0, r4
 8007c36:	f000 fd27 	bl	8008688 <_Bfree>
 8007c3a:	4639      	mov	r1, r7
 8007c3c:	4620      	mov	r0, r4
 8007c3e:	f000 fd23 	bl	8008688 <_Bfree>
 8007c42:	e695      	b.n	8007970 <_dtoa_r+0x6a0>
 8007c44:	2600      	movs	r6, #0
 8007c46:	4637      	mov	r7, r6
 8007c48:	e7e1      	b.n	8007c0e <_dtoa_r+0x93e>
 8007c4a:	9700      	str	r7, [sp, #0]
 8007c4c:	4637      	mov	r7, r6
 8007c4e:	e599      	b.n	8007784 <_dtoa_r+0x4b4>
 8007c50:	40240000 	.word	0x40240000
 8007c54:	9b08      	ldr	r3, [sp, #32]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	f000 80ca 	beq.w	8007df0 <_dtoa_r+0xb20>
 8007c5c:	9b03      	ldr	r3, [sp, #12]
 8007c5e:	9302      	str	r3, [sp, #8]
 8007c60:	2d00      	cmp	r5, #0
 8007c62:	dd05      	ble.n	8007c70 <_dtoa_r+0x9a0>
 8007c64:	4639      	mov	r1, r7
 8007c66:	462a      	mov	r2, r5
 8007c68:	4620      	mov	r0, r4
 8007c6a:	f000 ff29 	bl	8008ac0 <__lshift>
 8007c6e:	4607      	mov	r7, r0
 8007c70:	f1b8 0f00 	cmp.w	r8, #0
 8007c74:	d05b      	beq.n	8007d2e <_dtoa_r+0xa5e>
 8007c76:	6879      	ldr	r1, [r7, #4]
 8007c78:	4620      	mov	r0, r4
 8007c7a:	f000 fcc5 	bl	8008608 <_Balloc>
 8007c7e:	4605      	mov	r5, r0
 8007c80:	b928      	cbnz	r0, 8007c8e <_dtoa_r+0x9be>
 8007c82:	4b87      	ldr	r3, [pc, #540]	; (8007ea0 <_dtoa_r+0xbd0>)
 8007c84:	4602      	mov	r2, r0
 8007c86:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007c8a:	f7ff bb3b 	b.w	8007304 <_dtoa_r+0x34>
 8007c8e:	693a      	ldr	r2, [r7, #16]
 8007c90:	3202      	adds	r2, #2
 8007c92:	0092      	lsls	r2, r2, #2
 8007c94:	f107 010c 	add.w	r1, r7, #12
 8007c98:	300c      	adds	r0, #12
 8007c9a:	f000 fca7 	bl	80085ec <memcpy>
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	4629      	mov	r1, r5
 8007ca2:	4620      	mov	r0, r4
 8007ca4:	f000 ff0c 	bl	8008ac0 <__lshift>
 8007ca8:	9b01      	ldr	r3, [sp, #4]
 8007caa:	f103 0901 	add.w	r9, r3, #1
 8007cae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007cb2:	4413      	add	r3, r2
 8007cb4:	9305      	str	r3, [sp, #20]
 8007cb6:	f00a 0301 	and.w	r3, sl, #1
 8007cba:	46b8      	mov	r8, r7
 8007cbc:	9304      	str	r3, [sp, #16]
 8007cbe:	4607      	mov	r7, r0
 8007cc0:	4631      	mov	r1, r6
 8007cc2:	ee18 0a10 	vmov	r0, s16
 8007cc6:	f7ff fa75 	bl	80071b4 <quorem>
 8007cca:	4641      	mov	r1, r8
 8007ccc:	9002      	str	r0, [sp, #8]
 8007cce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007cd2:	ee18 0a10 	vmov	r0, s16
 8007cd6:	f000 ff63 	bl	8008ba0 <__mcmp>
 8007cda:	463a      	mov	r2, r7
 8007cdc:	9003      	str	r0, [sp, #12]
 8007cde:	4631      	mov	r1, r6
 8007ce0:	4620      	mov	r0, r4
 8007ce2:	f000 ff79 	bl	8008bd8 <__mdiff>
 8007ce6:	68c2      	ldr	r2, [r0, #12]
 8007ce8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8007cec:	4605      	mov	r5, r0
 8007cee:	bb02      	cbnz	r2, 8007d32 <_dtoa_r+0xa62>
 8007cf0:	4601      	mov	r1, r0
 8007cf2:	ee18 0a10 	vmov	r0, s16
 8007cf6:	f000 ff53 	bl	8008ba0 <__mcmp>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	4629      	mov	r1, r5
 8007cfe:	4620      	mov	r0, r4
 8007d00:	9207      	str	r2, [sp, #28]
 8007d02:	f000 fcc1 	bl	8008688 <_Bfree>
 8007d06:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007d0a:	ea43 0102 	orr.w	r1, r3, r2
 8007d0e:	9b04      	ldr	r3, [sp, #16]
 8007d10:	430b      	orrs	r3, r1
 8007d12:	464d      	mov	r5, r9
 8007d14:	d10f      	bne.n	8007d36 <_dtoa_r+0xa66>
 8007d16:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007d1a:	d02a      	beq.n	8007d72 <_dtoa_r+0xaa2>
 8007d1c:	9b03      	ldr	r3, [sp, #12]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	dd02      	ble.n	8007d28 <_dtoa_r+0xa58>
 8007d22:	9b02      	ldr	r3, [sp, #8]
 8007d24:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007d28:	f88b a000 	strb.w	sl, [fp]
 8007d2c:	e775      	b.n	8007c1a <_dtoa_r+0x94a>
 8007d2e:	4638      	mov	r0, r7
 8007d30:	e7ba      	b.n	8007ca8 <_dtoa_r+0x9d8>
 8007d32:	2201      	movs	r2, #1
 8007d34:	e7e2      	b.n	8007cfc <_dtoa_r+0xa2c>
 8007d36:	9b03      	ldr	r3, [sp, #12]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	db04      	blt.n	8007d46 <_dtoa_r+0xa76>
 8007d3c:	9906      	ldr	r1, [sp, #24]
 8007d3e:	430b      	orrs	r3, r1
 8007d40:	9904      	ldr	r1, [sp, #16]
 8007d42:	430b      	orrs	r3, r1
 8007d44:	d122      	bne.n	8007d8c <_dtoa_r+0xabc>
 8007d46:	2a00      	cmp	r2, #0
 8007d48:	ddee      	ble.n	8007d28 <_dtoa_r+0xa58>
 8007d4a:	ee18 1a10 	vmov	r1, s16
 8007d4e:	2201      	movs	r2, #1
 8007d50:	4620      	mov	r0, r4
 8007d52:	f000 feb5 	bl	8008ac0 <__lshift>
 8007d56:	4631      	mov	r1, r6
 8007d58:	ee08 0a10 	vmov	s16, r0
 8007d5c:	f000 ff20 	bl	8008ba0 <__mcmp>
 8007d60:	2800      	cmp	r0, #0
 8007d62:	dc03      	bgt.n	8007d6c <_dtoa_r+0xa9c>
 8007d64:	d1e0      	bne.n	8007d28 <_dtoa_r+0xa58>
 8007d66:	f01a 0f01 	tst.w	sl, #1
 8007d6a:	d0dd      	beq.n	8007d28 <_dtoa_r+0xa58>
 8007d6c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007d70:	d1d7      	bne.n	8007d22 <_dtoa_r+0xa52>
 8007d72:	2339      	movs	r3, #57	; 0x39
 8007d74:	f88b 3000 	strb.w	r3, [fp]
 8007d78:	462b      	mov	r3, r5
 8007d7a:	461d      	mov	r5, r3
 8007d7c:	3b01      	subs	r3, #1
 8007d7e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007d82:	2a39      	cmp	r2, #57	; 0x39
 8007d84:	d071      	beq.n	8007e6a <_dtoa_r+0xb9a>
 8007d86:	3201      	adds	r2, #1
 8007d88:	701a      	strb	r2, [r3, #0]
 8007d8a:	e746      	b.n	8007c1a <_dtoa_r+0x94a>
 8007d8c:	2a00      	cmp	r2, #0
 8007d8e:	dd07      	ble.n	8007da0 <_dtoa_r+0xad0>
 8007d90:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007d94:	d0ed      	beq.n	8007d72 <_dtoa_r+0xaa2>
 8007d96:	f10a 0301 	add.w	r3, sl, #1
 8007d9a:	f88b 3000 	strb.w	r3, [fp]
 8007d9e:	e73c      	b.n	8007c1a <_dtoa_r+0x94a>
 8007da0:	9b05      	ldr	r3, [sp, #20]
 8007da2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007da6:	4599      	cmp	r9, r3
 8007da8:	d047      	beq.n	8007e3a <_dtoa_r+0xb6a>
 8007daa:	ee18 1a10 	vmov	r1, s16
 8007dae:	2300      	movs	r3, #0
 8007db0:	220a      	movs	r2, #10
 8007db2:	4620      	mov	r0, r4
 8007db4:	f000 fc8a 	bl	80086cc <__multadd>
 8007db8:	45b8      	cmp	r8, r7
 8007dba:	ee08 0a10 	vmov	s16, r0
 8007dbe:	f04f 0300 	mov.w	r3, #0
 8007dc2:	f04f 020a 	mov.w	r2, #10
 8007dc6:	4641      	mov	r1, r8
 8007dc8:	4620      	mov	r0, r4
 8007dca:	d106      	bne.n	8007dda <_dtoa_r+0xb0a>
 8007dcc:	f000 fc7e 	bl	80086cc <__multadd>
 8007dd0:	4680      	mov	r8, r0
 8007dd2:	4607      	mov	r7, r0
 8007dd4:	f109 0901 	add.w	r9, r9, #1
 8007dd8:	e772      	b.n	8007cc0 <_dtoa_r+0x9f0>
 8007dda:	f000 fc77 	bl	80086cc <__multadd>
 8007dde:	4639      	mov	r1, r7
 8007de0:	4680      	mov	r8, r0
 8007de2:	2300      	movs	r3, #0
 8007de4:	220a      	movs	r2, #10
 8007de6:	4620      	mov	r0, r4
 8007de8:	f000 fc70 	bl	80086cc <__multadd>
 8007dec:	4607      	mov	r7, r0
 8007dee:	e7f1      	b.n	8007dd4 <_dtoa_r+0xb04>
 8007df0:	9b03      	ldr	r3, [sp, #12]
 8007df2:	9302      	str	r3, [sp, #8]
 8007df4:	9d01      	ldr	r5, [sp, #4]
 8007df6:	ee18 0a10 	vmov	r0, s16
 8007dfa:	4631      	mov	r1, r6
 8007dfc:	f7ff f9da 	bl	80071b4 <quorem>
 8007e00:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007e04:	9b01      	ldr	r3, [sp, #4]
 8007e06:	f805 ab01 	strb.w	sl, [r5], #1
 8007e0a:	1aea      	subs	r2, r5, r3
 8007e0c:	9b02      	ldr	r3, [sp, #8]
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	dd09      	ble.n	8007e26 <_dtoa_r+0xb56>
 8007e12:	ee18 1a10 	vmov	r1, s16
 8007e16:	2300      	movs	r3, #0
 8007e18:	220a      	movs	r2, #10
 8007e1a:	4620      	mov	r0, r4
 8007e1c:	f000 fc56 	bl	80086cc <__multadd>
 8007e20:	ee08 0a10 	vmov	s16, r0
 8007e24:	e7e7      	b.n	8007df6 <_dtoa_r+0xb26>
 8007e26:	9b02      	ldr	r3, [sp, #8]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	bfc8      	it	gt
 8007e2c:	461d      	movgt	r5, r3
 8007e2e:	9b01      	ldr	r3, [sp, #4]
 8007e30:	bfd8      	it	le
 8007e32:	2501      	movle	r5, #1
 8007e34:	441d      	add	r5, r3
 8007e36:	f04f 0800 	mov.w	r8, #0
 8007e3a:	ee18 1a10 	vmov	r1, s16
 8007e3e:	2201      	movs	r2, #1
 8007e40:	4620      	mov	r0, r4
 8007e42:	f000 fe3d 	bl	8008ac0 <__lshift>
 8007e46:	4631      	mov	r1, r6
 8007e48:	ee08 0a10 	vmov	s16, r0
 8007e4c:	f000 fea8 	bl	8008ba0 <__mcmp>
 8007e50:	2800      	cmp	r0, #0
 8007e52:	dc91      	bgt.n	8007d78 <_dtoa_r+0xaa8>
 8007e54:	d102      	bne.n	8007e5c <_dtoa_r+0xb8c>
 8007e56:	f01a 0f01 	tst.w	sl, #1
 8007e5a:	d18d      	bne.n	8007d78 <_dtoa_r+0xaa8>
 8007e5c:	462b      	mov	r3, r5
 8007e5e:	461d      	mov	r5, r3
 8007e60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e64:	2a30      	cmp	r2, #48	; 0x30
 8007e66:	d0fa      	beq.n	8007e5e <_dtoa_r+0xb8e>
 8007e68:	e6d7      	b.n	8007c1a <_dtoa_r+0x94a>
 8007e6a:	9a01      	ldr	r2, [sp, #4]
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d184      	bne.n	8007d7a <_dtoa_r+0xaaa>
 8007e70:	9b00      	ldr	r3, [sp, #0]
 8007e72:	3301      	adds	r3, #1
 8007e74:	9300      	str	r3, [sp, #0]
 8007e76:	2331      	movs	r3, #49	; 0x31
 8007e78:	7013      	strb	r3, [r2, #0]
 8007e7a:	e6ce      	b.n	8007c1a <_dtoa_r+0x94a>
 8007e7c:	4b09      	ldr	r3, [pc, #36]	; (8007ea4 <_dtoa_r+0xbd4>)
 8007e7e:	f7ff ba95 	b.w	80073ac <_dtoa_r+0xdc>
 8007e82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	f47f aa6e 	bne.w	8007366 <_dtoa_r+0x96>
 8007e8a:	4b07      	ldr	r3, [pc, #28]	; (8007ea8 <_dtoa_r+0xbd8>)
 8007e8c:	f7ff ba8e 	b.w	80073ac <_dtoa_r+0xdc>
 8007e90:	9b02      	ldr	r3, [sp, #8]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	dcae      	bgt.n	8007df4 <_dtoa_r+0xb24>
 8007e96:	9b06      	ldr	r3, [sp, #24]
 8007e98:	2b02      	cmp	r3, #2
 8007e9a:	f73f aea8 	bgt.w	8007bee <_dtoa_r+0x91e>
 8007e9e:	e7a9      	b.n	8007df4 <_dtoa_r+0xb24>
 8007ea0:	0800a4a5 	.word	0x0800a4a5
 8007ea4:	0800a214 	.word	0x0800a214
 8007ea8:	0800a43d 	.word	0x0800a43d

08007eac <fiprintf>:
 8007eac:	b40e      	push	{r1, r2, r3}
 8007eae:	b503      	push	{r0, r1, lr}
 8007eb0:	4601      	mov	r1, r0
 8007eb2:	ab03      	add	r3, sp, #12
 8007eb4:	4805      	ldr	r0, [pc, #20]	; (8007ecc <fiprintf+0x20>)
 8007eb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007eba:	6800      	ldr	r0, [r0, #0]
 8007ebc:	9301      	str	r3, [sp, #4]
 8007ebe:	f001 fae1 	bl	8009484 <_vfiprintf_r>
 8007ec2:	b002      	add	sp, #8
 8007ec4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ec8:	b003      	add	sp, #12
 8007eca:	4770      	bx	lr
 8007ecc:	20000010 	.word	0x20000010

08007ed0 <rshift>:
 8007ed0:	6903      	ldr	r3, [r0, #16]
 8007ed2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007ed6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007eda:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007ede:	f100 0414 	add.w	r4, r0, #20
 8007ee2:	dd45      	ble.n	8007f70 <rshift+0xa0>
 8007ee4:	f011 011f 	ands.w	r1, r1, #31
 8007ee8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007eec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007ef0:	d10c      	bne.n	8007f0c <rshift+0x3c>
 8007ef2:	f100 0710 	add.w	r7, r0, #16
 8007ef6:	4629      	mov	r1, r5
 8007ef8:	42b1      	cmp	r1, r6
 8007efa:	d334      	bcc.n	8007f66 <rshift+0x96>
 8007efc:	1a9b      	subs	r3, r3, r2
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	1eea      	subs	r2, r5, #3
 8007f02:	4296      	cmp	r6, r2
 8007f04:	bf38      	it	cc
 8007f06:	2300      	movcc	r3, #0
 8007f08:	4423      	add	r3, r4
 8007f0a:	e015      	b.n	8007f38 <rshift+0x68>
 8007f0c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007f10:	f1c1 0820 	rsb	r8, r1, #32
 8007f14:	40cf      	lsrs	r7, r1
 8007f16:	f105 0e04 	add.w	lr, r5, #4
 8007f1a:	46a1      	mov	r9, r4
 8007f1c:	4576      	cmp	r6, lr
 8007f1e:	46f4      	mov	ip, lr
 8007f20:	d815      	bhi.n	8007f4e <rshift+0x7e>
 8007f22:	1a9a      	subs	r2, r3, r2
 8007f24:	0092      	lsls	r2, r2, #2
 8007f26:	3a04      	subs	r2, #4
 8007f28:	3501      	adds	r5, #1
 8007f2a:	42ae      	cmp	r6, r5
 8007f2c:	bf38      	it	cc
 8007f2e:	2200      	movcc	r2, #0
 8007f30:	18a3      	adds	r3, r4, r2
 8007f32:	50a7      	str	r7, [r4, r2]
 8007f34:	b107      	cbz	r7, 8007f38 <rshift+0x68>
 8007f36:	3304      	adds	r3, #4
 8007f38:	1b1a      	subs	r2, r3, r4
 8007f3a:	42a3      	cmp	r3, r4
 8007f3c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007f40:	bf08      	it	eq
 8007f42:	2300      	moveq	r3, #0
 8007f44:	6102      	str	r2, [r0, #16]
 8007f46:	bf08      	it	eq
 8007f48:	6143      	streq	r3, [r0, #20]
 8007f4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f4e:	f8dc c000 	ldr.w	ip, [ip]
 8007f52:	fa0c fc08 	lsl.w	ip, ip, r8
 8007f56:	ea4c 0707 	orr.w	r7, ip, r7
 8007f5a:	f849 7b04 	str.w	r7, [r9], #4
 8007f5e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007f62:	40cf      	lsrs	r7, r1
 8007f64:	e7da      	b.n	8007f1c <rshift+0x4c>
 8007f66:	f851 cb04 	ldr.w	ip, [r1], #4
 8007f6a:	f847 cf04 	str.w	ip, [r7, #4]!
 8007f6e:	e7c3      	b.n	8007ef8 <rshift+0x28>
 8007f70:	4623      	mov	r3, r4
 8007f72:	e7e1      	b.n	8007f38 <rshift+0x68>

08007f74 <__hexdig_fun>:
 8007f74:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007f78:	2b09      	cmp	r3, #9
 8007f7a:	d802      	bhi.n	8007f82 <__hexdig_fun+0xe>
 8007f7c:	3820      	subs	r0, #32
 8007f7e:	b2c0      	uxtb	r0, r0
 8007f80:	4770      	bx	lr
 8007f82:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007f86:	2b05      	cmp	r3, #5
 8007f88:	d801      	bhi.n	8007f8e <__hexdig_fun+0x1a>
 8007f8a:	3847      	subs	r0, #71	; 0x47
 8007f8c:	e7f7      	b.n	8007f7e <__hexdig_fun+0xa>
 8007f8e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007f92:	2b05      	cmp	r3, #5
 8007f94:	d801      	bhi.n	8007f9a <__hexdig_fun+0x26>
 8007f96:	3827      	subs	r0, #39	; 0x27
 8007f98:	e7f1      	b.n	8007f7e <__hexdig_fun+0xa>
 8007f9a:	2000      	movs	r0, #0
 8007f9c:	4770      	bx	lr
	...

08007fa0 <__gethex>:
 8007fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fa4:	ed2d 8b02 	vpush	{d8}
 8007fa8:	b089      	sub	sp, #36	; 0x24
 8007faa:	ee08 0a10 	vmov	s16, r0
 8007fae:	9304      	str	r3, [sp, #16]
 8007fb0:	4bb4      	ldr	r3, [pc, #720]	; (8008284 <__gethex+0x2e4>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	9301      	str	r3, [sp, #4]
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	468b      	mov	fp, r1
 8007fba:	4690      	mov	r8, r2
 8007fbc:	f7f8 f928 	bl	8000210 <strlen>
 8007fc0:	9b01      	ldr	r3, [sp, #4]
 8007fc2:	f8db 2000 	ldr.w	r2, [fp]
 8007fc6:	4403      	add	r3, r0
 8007fc8:	4682      	mov	sl, r0
 8007fca:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007fce:	9305      	str	r3, [sp, #20]
 8007fd0:	1c93      	adds	r3, r2, #2
 8007fd2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007fd6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007fda:	32fe      	adds	r2, #254	; 0xfe
 8007fdc:	18d1      	adds	r1, r2, r3
 8007fde:	461f      	mov	r7, r3
 8007fe0:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007fe4:	9100      	str	r1, [sp, #0]
 8007fe6:	2830      	cmp	r0, #48	; 0x30
 8007fe8:	d0f8      	beq.n	8007fdc <__gethex+0x3c>
 8007fea:	f7ff ffc3 	bl	8007f74 <__hexdig_fun>
 8007fee:	4604      	mov	r4, r0
 8007ff0:	2800      	cmp	r0, #0
 8007ff2:	d13a      	bne.n	800806a <__gethex+0xca>
 8007ff4:	9901      	ldr	r1, [sp, #4]
 8007ff6:	4652      	mov	r2, sl
 8007ff8:	4638      	mov	r0, r7
 8007ffa:	f001 fb8d 	bl	8009718 <strncmp>
 8007ffe:	4605      	mov	r5, r0
 8008000:	2800      	cmp	r0, #0
 8008002:	d168      	bne.n	80080d6 <__gethex+0x136>
 8008004:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008008:	eb07 060a 	add.w	r6, r7, sl
 800800c:	f7ff ffb2 	bl	8007f74 <__hexdig_fun>
 8008010:	2800      	cmp	r0, #0
 8008012:	d062      	beq.n	80080da <__gethex+0x13a>
 8008014:	4633      	mov	r3, r6
 8008016:	7818      	ldrb	r0, [r3, #0]
 8008018:	2830      	cmp	r0, #48	; 0x30
 800801a:	461f      	mov	r7, r3
 800801c:	f103 0301 	add.w	r3, r3, #1
 8008020:	d0f9      	beq.n	8008016 <__gethex+0x76>
 8008022:	f7ff ffa7 	bl	8007f74 <__hexdig_fun>
 8008026:	2301      	movs	r3, #1
 8008028:	fab0 f480 	clz	r4, r0
 800802c:	0964      	lsrs	r4, r4, #5
 800802e:	4635      	mov	r5, r6
 8008030:	9300      	str	r3, [sp, #0]
 8008032:	463a      	mov	r2, r7
 8008034:	4616      	mov	r6, r2
 8008036:	3201      	adds	r2, #1
 8008038:	7830      	ldrb	r0, [r6, #0]
 800803a:	f7ff ff9b 	bl	8007f74 <__hexdig_fun>
 800803e:	2800      	cmp	r0, #0
 8008040:	d1f8      	bne.n	8008034 <__gethex+0x94>
 8008042:	9901      	ldr	r1, [sp, #4]
 8008044:	4652      	mov	r2, sl
 8008046:	4630      	mov	r0, r6
 8008048:	f001 fb66 	bl	8009718 <strncmp>
 800804c:	b980      	cbnz	r0, 8008070 <__gethex+0xd0>
 800804e:	b94d      	cbnz	r5, 8008064 <__gethex+0xc4>
 8008050:	eb06 050a 	add.w	r5, r6, sl
 8008054:	462a      	mov	r2, r5
 8008056:	4616      	mov	r6, r2
 8008058:	3201      	adds	r2, #1
 800805a:	7830      	ldrb	r0, [r6, #0]
 800805c:	f7ff ff8a 	bl	8007f74 <__hexdig_fun>
 8008060:	2800      	cmp	r0, #0
 8008062:	d1f8      	bne.n	8008056 <__gethex+0xb6>
 8008064:	1bad      	subs	r5, r5, r6
 8008066:	00ad      	lsls	r5, r5, #2
 8008068:	e004      	b.n	8008074 <__gethex+0xd4>
 800806a:	2400      	movs	r4, #0
 800806c:	4625      	mov	r5, r4
 800806e:	e7e0      	b.n	8008032 <__gethex+0x92>
 8008070:	2d00      	cmp	r5, #0
 8008072:	d1f7      	bne.n	8008064 <__gethex+0xc4>
 8008074:	7833      	ldrb	r3, [r6, #0]
 8008076:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800807a:	2b50      	cmp	r3, #80	; 0x50
 800807c:	d13b      	bne.n	80080f6 <__gethex+0x156>
 800807e:	7873      	ldrb	r3, [r6, #1]
 8008080:	2b2b      	cmp	r3, #43	; 0x2b
 8008082:	d02c      	beq.n	80080de <__gethex+0x13e>
 8008084:	2b2d      	cmp	r3, #45	; 0x2d
 8008086:	d02e      	beq.n	80080e6 <__gethex+0x146>
 8008088:	1c71      	adds	r1, r6, #1
 800808a:	f04f 0900 	mov.w	r9, #0
 800808e:	7808      	ldrb	r0, [r1, #0]
 8008090:	f7ff ff70 	bl	8007f74 <__hexdig_fun>
 8008094:	1e43      	subs	r3, r0, #1
 8008096:	b2db      	uxtb	r3, r3
 8008098:	2b18      	cmp	r3, #24
 800809a:	d82c      	bhi.n	80080f6 <__gethex+0x156>
 800809c:	f1a0 0210 	sub.w	r2, r0, #16
 80080a0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80080a4:	f7ff ff66 	bl	8007f74 <__hexdig_fun>
 80080a8:	1e43      	subs	r3, r0, #1
 80080aa:	b2db      	uxtb	r3, r3
 80080ac:	2b18      	cmp	r3, #24
 80080ae:	d91d      	bls.n	80080ec <__gethex+0x14c>
 80080b0:	f1b9 0f00 	cmp.w	r9, #0
 80080b4:	d000      	beq.n	80080b8 <__gethex+0x118>
 80080b6:	4252      	negs	r2, r2
 80080b8:	4415      	add	r5, r2
 80080ba:	f8cb 1000 	str.w	r1, [fp]
 80080be:	b1e4      	cbz	r4, 80080fa <__gethex+0x15a>
 80080c0:	9b00      	ldr	r3, [sp, #0]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	bf14      	ite	ne
 80080c6:	2700      	movne	r7, #0
 80080c8:	2706      	moveq	r7, #6
 80080ca:	4638      	mov	r0, r7
 80080cc:	b009      	add	sp, #36	; 0x24
 80080ce:	ecbd 8b02 	vpop	{d8}
 80080d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080d6:	463e      	mov	r6, r7
 80080d8:	4625      	mov	r5, r4
 80080da:	2401      	movs	r4, #1
 80080dc:	e7ca      	b.n	8008074 <__gethex+0xd4>
 80080de:	f04f 0900 	mov.w	r9, #0
 80080e2:	1cb1      	adds	r1, r6, #2
 80080e4:	e7d3      	b.n	800808e <__gethex+0xee>
 80080e6:	f04f 0901 	mov.w	r9, #1
 80080ea:	e7fa      	b.n	80080e2 <__gethex+0x142>
 80080ec:	230a      	movs	r3, #10
 80080ee:	fb03 0202 	mla	r2, r3, r2, r0
 80080f2:	3a10      	subs	r2, #16
 80080f4:	e7d4      	b.n	80080a0 <__gethex+0x100>
 80080f6:	4631      	mov	r1, r6
 80080f8:	e7df      	b.n	80080ba <__gethex+0x11a>
 80080fa:	1bf3      	subs	r3, r6, r7
 80080fc:	3b01      	subs	r3, #1
 80080fe:	4621      	mov	r1, r4
 8008100:	2b07      	cmp	r3, #7
 8008102:	dc0b      	bgt.n	800811c <__gethex+0x17c>
 8008104:	ee18 0a10 	vmov	r0, s16
 8008108:	f000 fa7e 	bl	8008608 <_Balloc>
 800810c:	4604      	mov	r4, r0
 800810e:	b940      	cbnz	r0, 8008122 <__gethex+0x182>
 8008110:	4b5d      	ldr	r3, [pc, #372]	; (8008288 <__gethex+0x2e8>)
 8008112:	4602      	mov	r2, r0
 8008114:	21de      	movs	r1, #222	; 0xde
 8008116:	485d      	ldr	r0, [pc, #372]	; (800828c <__gethex+0x2ec>)
 8008118:	f7ff f82e 	bl	8007178 <__assert_func>
 800811c:	3101      	adds	r1, #1
 800811e:	105b      	asrs	r3, r3, #1
 8008120:	e7ee      	b.n	8008100 <__gethex+0x160>
 8008122:	f100 0914 	add.w	r9, r0, #20
 8008126:	f04f 0b00 	mov.w	fp, #0
 800812a:	f1ca 0301 	rsb	r3, sl, #1
 800812e:	f8cd 9008 	str.w	r9, [sp, #8]
 8008132:	f8cd b000 	str.w	fp, [sp]
 8008136:	9306      	str	r3, [sp, #24]
 8008138:	42b7      	cmp	r7, r6
 800813a:	d340      	bcc.n	80081be <__gethex+0x21e>
 800813c:	9802      	ldr	r0, [sp, #8]
 800813e:	9b00      	ldr	r3, [sp, #0]
 8008140:	f840 3b04 	str.w	r3, [r0], #4
 8008144:	eba0 0009 	sub.w	r0, r0, r9
 8008148:	1080      	asrs	r0, r0, #2
 800814a:	0146      	lsls	r6, r0, #5
 800814c:	6120      	str	r0, [r4, #16]
 800814e:	4618      	mov	r0, r3
 8008150:	f000 fb4c 	bl	80087ec <__hi0bits>
 8008154:	1a30      	subs	r0, r6, r0
 8008156:	f8d8 6000 	ldr.w	r6, [r8]
 800815a:	42b0      	cmp	r0, r6
 800815c:	dd63      	ble.n	8008226 <__gethex+0x286>
 800815e:	1b87      	subs	r7, r0, r6
 8008160:	4639      	mov	r1, r7
 8008162:	4620      	mov	r0, r4
 8008164:	f000 fef0 	bl	8008f48 <__any_on>
 8008168:	4682      	mov	sl, r0
 800816a:	b1a8      	cbz	r0, 8008198 <__gethex+0x1f8>
 800816c:	1e7b      	subs	r3, r7, #1
 800816e:	1159      	asrs	r1, r3, #5
 8008170:	f003 021f 	and.w	r2, r3, #31
 8008174:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008178:	f04f 0a01 	mov.w	sl, #1
 800817c:	fa0a f202 	lsl.w	r2, sl, r2
 8008180:	420a      	tst	r2, r1
 8008182:	d009      	beq.n	8008198 <__gethex+0x1f8>
 8008184:	4553      	cmp	r3, sl
 8008186:	dd05      	ble.n	8008194 <__gethex+0x1f4>
 8008188:	1eb9      	subs	r1, r7, #2
 800818a:	4620      	mov	r0, r4
 800818c:	f000 fedc 	bl	8008f48 <__any_on>
 8008190:	2800      	cmp	r0, #0
 8008192:	d145      	bne.n	8008220 <__gethex+0x280>
 8008194:	f04f 0a02 	mov.w	sl, #2
 8008198:	4639      	mov	r1, r7
 800819a:	4620      	mov	r0, r4
 800819c:	f7ff fe98 	bl	8007ed0 <rshift>
 80081a0:	443d      	add	r5, r7
 80081a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80081a6:	42ab      	cmp	r3, r5
 80081a8:	da4c      	bge.n	8008244 <__gethex+0x2a4>
 80081aa:	ee18 0a10 	vmov	r0, s16
 80081ae:	4621      	mov	r1, r4
 80081b0:	f000 fa6a 	bl	8008688 <_Bfree>
 80081b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80081b6:	2300      	movs	r3, #0
 80081b8:	6013      	str	r3, [r2, #0]
 80081ba:	27a3      	movs	r7, #163	; 0xa3
 80081bc:	e785      	b.n	80080ca <__gethex+0x12a>
 80081be:	1e73      	subs	r3, r6, #1
 80081c0:	9a05      	ldr	r2, [sp, #20]
 80081c2:	9303      	str	r3, [sp, #12]
 80081c4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d019      	beq.n	8008200 <__gethex+0x260>
 80081cc:	f1bb 0f20 	cmp.w	fp, #32
 80081d0:	d107      	bne.n	80081e2 <__gethex+0x242>
 80081d2:	9b02      	ldr	r3, [sp, #8]
 80081d4:	9a00      	ldr	r2, [sp, #0]
 80081d6:	f843 2b04 	str.w	r2, [r3], #4
 80081da:	9302      	str	r3, [sp, #8]
 80081dc:	2300      	movs	r3, #0
 80081de:	9300      	str	r3, [sp, #0]
 80081e0:	469b      	mov	fp, r3
 80081e2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80081e6:	f7ff fec5 	bl	8007f74 <__hexdig_fun>
 80081ea:	9b00      	ldr	r3, [sp, #0]
 80081ec:	f000 000f 	and.w	r0, r0, #15
 80081f0:	fa00 f00b 	lsl.w	r0, r0, fp
 80081f4:	4303      	orrs	r3, r0
 80081f6:	9300      	str	r3, [sp, #0]
 80081f8:	f10b 0b04 	add.w	fp, fp, #4
 80081fc:	9b03      	ldr	r3, [sp, #12]
 80081fe:	e00d      	b.n	800821c <__gethex+0x27c>
 8008200:	9b03      	ldr	r3, [sp, #12]
 8008202:	9a06      	ldr	r2, [sp, #24]
 8008204:	4413      	add	r3, r2
 8008206:	42bb      	cmp	r3, r7
 8008208:	d3e0      	bcc.n	80081cc <__gethex+0x22c>
 800820a:	4618      	mov	r0, r3
 800820c:	9901      	ldr	r1, [sp, #4]
 800820e:	9307      	str	r3, [sp, #28]
 8008210:	4652      	mov	r2, sl
 8008212:	f001 fa81 	bl	8009718 <strncmp>
 8008216:	9b07      	ldr	r3, [sp, #28]
 8008218:	2800      	cmp	r0, #0
 800821a:	d1d7      	bne.n	80081cc <__gethex+0x22c>
 800821c:	461e      	mov	r6, r3
 800821e:	e78b      	b.n	8008138 <__gethex+0x198>
 8008220:	f04f 0a03 	mov.w	sl, #3
 8008224:	e7b8      	b.n	8008198 <__gethex+0x1f8>
 8008226:	da0a      	bge.n	800823e <__gethex+0x29e>
 8008228:	1a37      	subs	r7, r6, r0
 800822a:	4621      	mov	r1, r4
 800822c:	ee18 0a10 	vmov	r0, s16
 8008230:	463a      	mov	r2, r7
 8008232:	f000 fc45 	bl	8008ac0 <__lshift>
 8008236:	1bed      	subs	r5, r5, r7
 8008238:	4604      	mov	r4, r0
 800823a:	f100 0914 	add.w	r9, r0, #20
 800823e:	f04f 0a00 	mov.w	sl, #0
 8008242:	e7ae      	b.n	80081a2 <__gethex+0x202>
 8008244:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008248:	42a8      	cmp	r0, r5
 800824a:	dd72      	ble.n	8008332 <__gethex+0x392>
 800824c:	1b45      	subs	r5, r0, r5
 800824e:	42ae      	cmp	r6, r5
 8008250:	dc36      	bgt.n	80082c0 <__gethex+0x320>
 8008252:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008256:	2b02      	cmp	r3, #2
 8008258:	d02a      	beq.n	80082b0 <__gethex+0x310>
 800825a:	2b03      	cmp	r3, #3
 800825c:	d02c      	beq.n	80082b8 <__gethex+0x318>
 800825e:	2b01      	cmp	r3, #1
 8008260:	d11c      	bne.n	800829c <__gethex+0x2fc>
 8008262:	42ae      	cmp	r6, r5
 8008264:	d11a      	bne.n	800829c <__gethex+0x2fc>
 8008266:	2e01      	cmp	r6, #1
 8008268:	d112      	bne.n	8008290 <__gethex+0x2f0>
 800826a:	9a04      	ldr	r2, [sp, #16]
 800826c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008270:	6013      	str	r3, [r2, #0]
 8008272:	2301      	movs	r3, #1
 8008274:	6123      	str	r3, [r4, #16]
 8008276:	f8c9 3000 	str.w	r3, [r9]
 800827a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800827c:	2762      	movs	r7, #98	; 0x62
 800827e:	601c      	str	r4, [r3, #0]
 8008280:	e723      	b.n	80080ca <__gethex+0x12a>
 8008282:	bf00      	nop
 8008284:	0800a51c 	.word	0x0800a51c
 8008288:	0800a4a5 	.word	0x0800a4a5
 800828c:	0800a4b6 	.word	0x0800a4b6
 8008290:	1e71      	subs	r1, r6, #1
 8008292:	4620      	mov	r0, r4
 8008294:	f000 fe58 	bl	8008f48 <__any_on>
 8008298:	2800      	cmp	r0, #0
 800829a:	d1e6      	bne.n	800826a <__gethex+0x2ca>
 800829c:	ee18 0a10 	vmov	r0, s16
 80082a0:	4621      	mov	r1, r4
 80082a2:	f000 f9f1 	bl	8008688 <_Bfree>
 80082a6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80082a8:	2300      	movs	r3, #0
 80082aa:	6013      	str	r3, [r2, #0]
 80082ac:	2750      	movs	r7, #80	; 0x50
 80082ae:	e70c      	b.n	80080ca <__gethex+0x12a>
 80082b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d1f2      	bne.n	800829c <__gethex+0x2fc>
 80082b6:	e7d8      	b.n	800826a <__gethex+0x2ca>
 80082b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d1d5      	bne.n	800826a <__gethex+0x2ca>
 80082be:	e7ed      	b.n	800829c <__gethex+0x2fc>
 80082c0:	1e6f      	subs	r7, r5, #1
 80082c2:	f1ba 0f00 	cmp.w	sl, #0
 80082c6:	d131      	bne.n	800832c <__gethex+0x38c>
 80082c8:	b127      	cbz	r7, 80082d4 <__gethex+0x334>
 80082ca:	4639      	mov	r1, r7
 80082cc:	4620      	mov	r0, r4
 80082ce:	f000 fe3b 	bl	8008f48 <__any_on>
 80082d2:	4682      	mov	sl, r0
 80082d4:	117b      	asrs	r3, r7, #5
 80082d6:	2101      	movs	r1, #1
 80082d8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80082dc:	f007 071f 	and.w	r7, r7, #31
 80082e0:	fa01 f707 	lsl.w	r7, r1, r7
 80082e4:	421f      	tst	r7, r3
 80082e6:	4629      	mov	r1, r5
 80082e8:	4620      	mov	r0, r4
 80082ea:	bf18      	it	ne
 80082ec:	f04a 0a02 	orrne.w	sl, sl, #2
 80082f0:	1b76      	subs	r6, r6, r5
 80082f2:	f7ff fded 	bl	8007ed0 <rshift>
 80082f6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80082fa:	2702      	movs	r7, #2
 80082fc:	f1ba 0f00 	cmp.w	sl, #0
 8008300:	d048      	beq.n	8008394 <__gethex+0x3f4>
 8008302:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008306:	2b02      	cmp	r3, #2
 8008308:	d015      	beq.n	8008336 <__gethex+0x396>
 800830a:	2b03      	cmp	r3, #3
 800830c:	d017      	beq.n	800833e <__gethex+0x39e>
 800830e:	2b01      	cmp	r3, #1
 8008310:	d109      	bne.n	8008326 <__gethex+0x386>
 8008312:	f01a 0f02 	tst.w	sl, #2
 8008316:	d006      	beq.n	8008326 <__gethex+0x386>
 8008318:	f8d9 0000 	ldr.w	r0, [r9]
 800831c:	ea4a 0a00 	orr.w	sl, sl, r0
 8008320:	f01a 0f01 	tst.w	sl, #1
 8008324:	d10e      	bne.n	8008344 <__gethex+0x3a4>
 8008326:	f047 0710 	orr.w	r7, r7, #16
 800832a:	e033      	b.n	8008394 <__gethex+0x3f4>
 800832c:	f04f 0a01 	mov.w	sl, #1
 8008330:	e7d0      	b.n	80082d4 <__gethex+0x334>
 8008332:	2701      	movs	r7, #1
 8008334:	e7e2      	b.n	80082fc <__gethex+0x35c>
 8008336:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008338:	f1c3 0301 	rsb	r3, r3, #1
 800833c:	9315      	str	r3, [sp, #84]	; 0x54
 800833e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008340:	2b00      	cmp	r3, #0
 8008342:	d0f0      	beq.n	8008326 <__gethex+0x386>
 8008344:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008348:	f104 0314 	add.w	r3, r4, #20
 800834c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008350:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008354:	f04f 0c00 	mov.w	ip, #0
 8008358:	4618      	mov	r0, r3
 800835a:	f853 2b04 	ldr.w	r2, [r3], #4
 800835e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8008362:	d01c      	beq.n	800839e <__gethex+0x3fe>
 8008364:	3201      	adds	r2, #1
 8008366:	6002      	str	r2, [r0, #0]
 8008368:	2f02      	cmp	r7, #2
 800836a:	f104 0314 	add.w	r3, r4, #20
 800836e:	d13f      	bne.n	80083f0 <__gethex+0x450>
 8008370:	f8d8 2000 	ldr.w	r2, [r8]
 8008374:	3a01      	subs	r2, #1
 8008376:	42b2      	cmp	r2, r6
 8008378:	d10a      	bne.n	8008390 <__gethex+0x3f0>
 800837a:	1171      	asrs	r1, r6, #5
 800837c:	2201      	movs	r2, #1
 800837e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008382:	f006 061f 	and.w	r6, r6, #31
 8008386:	fa02 f606 	lsl.w	r6, r2, r6
 800838a:	421e      	tst	r6, r3
 800838c:	bf18      	it	ne
 800838e:	4617      	movne	r7, r2
 8008390:	f047 0720 	orr.w	r7, r7, #32
 8008394:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008396:	601c      	str	r4, [r3, #0]
 8008398:	9b04      	ldr	r3, [sp, #16]
 800839a:	601d      	str	r5, [r3, #0]
 800839c:	e695      	b.n	80080ca <__gethex+0x12a>
 800839e:	4299      	cmp	r1, r3
 80083a0:	f843 cc04 	str.w	ip, [r3, #-4]
 80083a4:	d8d8      	bhi.n	8008358 <__gethex+0x3b8>
 80083a6:	68a3      	ldr	r3, [r4, #8]
 80083a8:	459b      	cmp	fp, r3
 80083aa:	db19      	blt.n	80083e0 <__gethex+0x440>
 80083ac:	6861      	ldr	r1, [r4, #4]
 80083ae:	ee18 0a10 	vmov	r0, s16
 80083b2:	3101      	adds	r1, #1
 80083b4:	f000 f928 	bl	8008608 <_Balloc>
 80083b8:	4681      	mov	r9, r0
 80083ba:	b918      	cbnz	r0, 80083c4 <__gethex+0x424>
 80083bc:	4b1a      	ldr	r3, [pc, #104]	; (8008428 <__gethex+0x488>)
 80083be:	4602      	mov	r2, r0
 80083c0:	2184      	movs	r1, #132	; 0x84
 80083c2:	e6a8      	b.n	8008116 <__gethex+0x176>
 80083c4:	6922      	ldr	r2, [r4, #16]
 80083c6:	3202      	adds	r2, #2
 80083c8:	f104 010c 	add.w	r1, r4, #12
 80083cc:	0092      	lsls	r2, r2, #2
 80083ce:	300c      	adds	r0, #12
 80083d0:	f000 f90c 	bl	80085ec <memcpy>
 80083d4:	4621      	mov	r1, r4
 80083d6:	ee18 0a10 	vmov	r0, s16
 80083da:	f000 f955 	bl	8008688 <_Bfree>
 80083de:	464c      	mov	r4, r9
 80083e0:	6923      	ldr	r3, [r4, #16]
 80083e2:	1c5a      	adds	r2, r3, #1
 80083e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80083e8:	6122      	str	r2, [r4, #16]
 80083ea:	2201      	movs	r2, #1
 80083ec:	615a      	str	r2, [r3, #20]
 80083ee:	e7bb      	b.n	8008368 <__gethex+0x3c8>
 80083f0:	6922      	ldr	r2, [r4, #16]
 80083f2:	455a      	cmp	r2, fp
 80083f4:	dd0b      	ble.n	800840e <__gethex+0x46e>
 80083f6:	2101      	movs	r1, #1
 80083f8:	4620      	mov	r0, r4
 80083fa:	f7ff fd69 	bl	8007ed0 <rshift>
 80083fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008402:	3501      	adds	r5, #1
 8008404:	42ab      	cmp	r3, r5
 8008406:	f6ff aed0 	blt.w	80081aa <__gethex+0x20a>
 800840a:	2701      	movs	r7, #1
 800840c:	e7c0      	b.n	8008390 <__gethex+0x3f0>
 800840e:	f016 061f 	ands.w	r6, r6, #31
 8008412:	d0fa      	beq.n	800840a <__gethex+0x46a>
 8008414:	4453      	add	r3, sl
 8008416:	f1c6 0620 	rsb	r6, r6, #32
 800841a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800841e:	f000 f9e5 	bl	80087ec <__hi0bits>
 8008422:	42b0      	cmp	r0, r6
 8008424:	dbe7      	blt.n	80083f6 <__gethex+0x456>
 8008426:	e7f0      	b.n	800840a <__gethex+0x46a>
 8008428:	0800a4a5 	.word	0x0800a4a5

0800842c <L_shift>:
 800842c:	f1c2 0208 	rsb	r2, r2, #8
 8008430:	0092      	lsls	r2, r2, #2
 8008432:	b570      	push	{r4, r5, r6, lr}
 8008434:	f1c2 0620 	rsb	r6, r2, #32
 8008438:	6843      	ldr	r3, [r0, #4]
 800843a:	6804      	ldr	r4, [r0, #0]
 800843c:	fa03 f506 	lsl.w	r5, r3, r6
 8008440:	432c      	orrs	r4, r5
 8008442:	40d3      	lsrs	r3, r2
 8008444:	6004      	str	r4, [r0, #0]
 8008446:	f840 3f04 	str.w	r3, [r0, #4]!
 800844a:	4288      	cmp	r0, r1
 800844c:	d3f4      	bcc.n	8008438 <L_shift+0xc>
 800844e:	bd70      	pop	{r4, r5, r6, pc}

08008450 <__match>:
 8008450:	b530      	push	{r4, r5, lr}
 8008452:	6803      	ldr	r3, [r0, #0]
 8008454:	3301      	adds	r3, #1
 8008456:	f811 4b01 	ldrb.w	r4, [r1], #1
 800845a:	b914      	cbnz	r4, 8008462 <__match+0x12>
 800845c:	6003      	str	r3, [r0, #0]
 800845e:	2001      	movs	r0, #1
 8008460:	bd30      	pop	{r4, r5, pc}
 8008462:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008466:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800846a:	2d19      	cmp	r5, #25
 800846c:	bf98      	it	ls
 800846e:	3220      	addls	r2, #32
 8008470:	42a2      	cmp	r2, r4
 8008472:	d0f0      	beq.n	8008456 <__match+0x6>
 8008474:	2000      	movs	r0, #0
 8008476:	e7f3      	b.n	8008460 <__match+0x10>

08008478 <__hexnan>:
 8008478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800847c:	680b      	ldr	r3, [r1, #0]
 800847e:	115e      	asrs	r6, r3, #5
 8008480:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008484:	f013 031f 	ands.w	r3, r3, #31
 8008488:	b087      	sub	sp, #28
 800848a:	bf18      	it	ne
 800848c:	3604      	addne	r6, #4
 800848e:	2500      	movs	r5, #0
 8008490:	1f37      	subs	r7, r6, #4
 8008492:	4690      	mov	r8, r2
 8008494:	6802      	ldr	r2, [r0, #0]
 8008496:	9301      	str	r3, [sp, #4]
 8008498:	4682      	mov	sl, r0
 800849a:	f846 5c04 	str.w	r5, [r6, #-4]
 800849e:	46b9      	mov	r9, r7
 80084a0:	463c      	mov	r4, r7
 80084a2:	9502      	str	r5, [sp, #8]
 80084a4:	46ab      	mov	fp, r5
 80084a6:	7851      	ldrb	r1, [r2, #1]
 80084a8:	1c53      	adds	r3, r2, #1
 80084aa:	9303      	str	r3, [sp, #12]
 80084ac:	b341      	cbz	r1, 8008500 <__hexnan+0x88>
 80084ae:	4608      	mov	r0, r1
 80084b0:	9205      	str	r2, [sp, #20]
 80084b2:	9104      	str	r1, [sp, #16]
 80084b4:	f7ff fd5e 	bl	8007f74 <__hexdig_fun>
 80084b8:	2800      	cmp	r0, #0
 80084ba:	d14f      	bne.n	800855c <__hexnan+0xe4>
 80084bc:	9904      	ldr	r1, [sp, #16]
 80084be:	9a05      	ldr	r2, [sp, #20]
 80084c0:	2920      	cmp	r1, #32
 80084c2:	d818      	bhi.n	80084f6 <__hexnan+0x7e>
 80084c4:	9b02      	ldr	r3, [sp, #8]
 80084c6:	459b      	cmp	fp, r3
 80084c8:	dd13      	ble.n	80084f2 <__hexnan+0x7a>
 80084ca:	454c      	cmp	r4, r9
 80084cc:	d206      	bcs.n	80084dc <__hexnan+0x64>
 80084ce:	2d07      	cmp	r5, #7
 80084d0:	dc04      	bgt.n	80084dc <__hexnan+0x64>
 80084d2:	462a      	mov	r2, r5
 80084d4:	4649      	mov	r1, r9
 80084d6:	4620      	mov	r0, r4
 80084d8:	f7ff ffa8 	bl	800842c <L_shift>
 80084dc:	4544      	cmp	r4, r8
 80084de:	d950      	bls.n	8008582 <__hexnan+0x10a>
 80084e0:	2300      	movs	r3, #0
 80084e2:	f1a4 0904 	sub.w	r9, r4, #4
 80084e6:	f844 3c04 	str.w	r3, [r4, #-4]
 80084ea:	f8cd b008 	str.w	fp, [sp, #8]
 80084ee:	464c      	mov	r4, r9
 80084f0:	461d      	mov	r5, r3
 80084f2:	9a03      	ldr	r2, [sp, #12]
 80084f4:	e7d7      	b.n	80084a6 <__hexnan+0x2e>
 80084f6:	2929      	cmp	r1, #41	; 0x29
 80084f8:	d156      	bne.n	80085a8 <__hexnan+0x130>
 80084fa:	3202      	adds	r2, #2
 80084fc:	f8ca 2000 	str.w	r2, [sl]
 8008500:	f1bb 0f00 	cmp.w	fp, #0
 8008504:	d050      	beq.n	80085a8 <__hexnan+0x130>
 8008506:	454c      	cmp	r4, r9
 8008508:	d206      	bcs.n	8008518 <__hexnan+0xa0>
 800850a:	2d07      	cmp	r5, #7
 800850c:	dc04      	bgt.n	8008518 <__hexnan+0xa0>
 800850e:	462a      	mov	r2, r5
 8008510:	4649      	mov	r1, r9
 8008512:	4620      	mov	r0, r4
 8008514:	f7ff ff8a 	bl	800842c <L_shift>
 8008518:	4544      	cmp	r4, r8
 800851a:	d934      	bls.n	8008586 <__hexnan+0x10e>
 800851c:	f1a8 0204 	sub.w	r2, r8, #4
 8008520:	4623      	mov	r3, r4
 8008522:	f853 1b04 	ldr.w	r1, [r3], #4
 8008526:	f842 1f04 	str.w	r1, [r2, #4]!
 800852a:	429f      	cmp	r7, r3
 800852c:	d2f9      	bcs.n	8008522 <__hexnan+0xaa>
 800852e:	1b3b      	subs	r3, r7, r4
 8008530:	f023 0303 	bic.w	r3, r3, #3
 8008534:	3304      	adds	r3, #4
 8008536:	3401      	adds	r4, #1
 8008538:	3e03      	subs	r6, #3
 800853a:	42b4      	cmp	r4, r6
 800853c:	bf88      	it	hi
 800853e:	2304      	movhi	r3, #4
 8008540:	4443      	add	r3, r8
 8008542:	2200      	movs	r2, #0
 8008544:	f843 2b04 	str.w	r2, [r3], #4
 8008548:	429f      	cmp	r7, r3
 800854a:	d2fb      	bcs.n	8008544 <__hexnan+0xcc>
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	b91b      	cbnz	r3, 8008558 <__hexnan+0xe0>
 8008550:	4547      	cmp	r7, r8
 8008552:	d127      	bne.n	80085a4 <__hexnan+0x12c>
 8008554:	2301      	movs	r3, #1
 8008556:	603b      	str	r3, [r7, #0]
 8008558:	2005      	movs	r0, #5
 800855a:	e026      	b.n	80085aa <__hexnan+0x132>
 800855c:	3501      	adds	r5, #1
 800855e:	2d08      	cmp	r5, #8
 8008560:	f10b 0b01 	add.w	fp, fp, #1
 8008564:	dd06      	ble.n	8008574 <__hexnan+0xfc>
 8008566:	4544      	cmp	r4, r8
 8008568:	d9c3      	bls.n	80084f2 <__hexnan+0x7a>
 800856a:	2300      	movs	r3, #0
 800856c:	f844 3c04 	str.w	r3, [r4, #-4]
 8008570:	2501      	movs	r5, #1
 8008572:	3c04      	subs	r4, #4
 8008574:	6822      	ldr	r2, [r4, #0]
 8008576:	f000 000f 	and.w	r0, r0, #15
 800857a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800857e:	6022      	str	r2, [r4, #0]
 8008580:	e7b7      	b.n	80084f2 <__hexnan+0x7a>
 8008582:	2508      	movs	r5, #8
 8008584:	e7b5      	b.n	80084f2 <__hexnan+0x7a>
 8008586:	9b01      	ldr	r3, [sp, #4]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d0df      	beq.n	800854c <__hexnan+0xd4>
 800858c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008590:	f1c3 0320 	rsb	r3, r3, #32
 8008594:	fa22 f303 	lsr.w	r3, r2, r3
 8008598:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800859c:	401a      	ands	r2, r3
 800859e:	f846 2c04 	str.w	r2, [r6, #-4]
 80085a2:	e7d3      	b.n	800854c <__hexnan+0xd4>
 80085a4:	3f04      	subs	r7, #4
 80085a6:	e7d1      	b.n	800854c <__hexnan+0xd4>
 80085a8:	2004      	movs	r0, #4
 80085aa:	b007      	add	sp, #28
 80085ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080085b0 <_localeconv_r>:
 80085b0:	4800      	ldr	r0, [pc, #0]	; (80085b4 <_localeconv_r+0x4>)
 80085b2:	4770      	bx	lr
 80085b4:	20000168 	.word	0x20000168

080085b8 <malloc>:
 80085b8:	4b02      	ldr	r3, [pc, #8]	; (80085c4 <malloc+0xc>)
 80085ba:	4601      	mov	r1, r0
 80085bc:	6818      	ldr	r0, [r3, #0]
 80085be:	f000 bd67 	b.w	8009090 <_malloc_r>
 80085c2:	bf00      	nop
 80085c4:	20000010 	.word	0x20000010

080085c8 <__ascii_mbtowc>:
 80085c8:	b082      	sub	sp, #8
 80085ca:	b901      	cbnz	r1, 80085ce <__ascii_mbtowc+0x6>
 80085cc:	a901      	add	r1, sp, #4
 80085ce:	b142      	cbz	r2, 80085e2 <__ascii_mbtowc+0x1a>
 80085d0:	b14b      	cbz	r3, 80085e6 <__ascii_mbtowc+0x1e>
 80085d2:	7813      	ldrb	r3, [r2, #0]
 80085d4:	600b      	str	r3, [r1, #0]
 80085d6:	7812      	ldrb	r2, [r2, #0]
 80085d8:	1e10      	subs	r0, r2, #0
 80085da:	bf18      	it	ne
 80085dc:	2001      	movne	r0, #1
 80085de:	b002      	add	sp, #8
 80085e0:	4770      	bx	lr
 80085e2:	4610      	mov	r0, r2
 80085e4:	e7fb      	b.n	80085de <__ascii_mbtowc+0x16>
 80085e6:	f06f 0001 	mvn.w	r0, #1
 80085ea:	e7f8      	b.n	80085de <__ascii_mbtowc+0x16>

080085ec <memcpy>:
 80085ec:	440a      	add	r2, r1
 80085ee:	4291      	cmp	r1, r2
 80085f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80085f4:	d100      	bne.n	80085f8 <memcpy+0xc>
 80085f6:	4770      	bx	lr
 80085f8:	b510      	push	{r4, lr}
 80085fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008602:	4291      	cmp	r1, r2
 8008604:	d1f9      	bne.n	80085fa <memcpy+0xe>
 8008606:	bd10      	pop	{r4, pc}

08008608 <_Balloc>:
 8008608:	b570      	push	{r4, r5, r6, lr}
 800860a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800860c:	4604      	mov	r4, r0
 800860e:	460d      	mov	r5, r1
 8008610:	b976      	cbnz	r6, 8008630 <_Balloc+0x28>
 8008612:	2010      	movs	r0, #16
 8008614:	f7ff ffd0 	bl	80085b8 <malloc>
 8008618:	4602      	mov	r2, r0
 800861a:	6260      	str	r0, [r4, #36]	; 0x24
 800861c:	b920      	cbnz	r0, 8008628 <_Balloc+0x20>
 800861e:	4b18      	ldr	r3, [pc, #96]	; (8008680 <_Balloc+0x78>)
 8008620:	4818      	ldr	r0, [pc, #96]	; (8008684 <_Balloc+0x7c>)
 8008622:	2166      	movs	r1, #102	; 0x66
 8008624:	f7fe fda8 	bl	8007178 <__assert_func>
 8008628:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800862c:	6006      	str	r6, [r0, #0]
 800862e:	60c6      	str	r6, [r0, #12]
 8008630:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008632:	68f3      	ldr	r3, [r6, #12]
 8008634:	b183      	cbz	r3, 8008658 <_Balloc+0x50>
 8008636:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008638:	68db      	ldr	r3, [r3, #12]
 800863a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800863e:	b9b8      	cbnz	r0, 8008670 <_Balloc+0x68>
 8008640:	2101      	movs	r1, #1
 8008642:	fa01 f605 	lsl.w	r6, r1, r5
 8008646:	1d72      	adds	r2, r6, #5
 8008648:	0092      	lsls	r2, r2, #2
 800864a:	4620      	mov	r0, r4
 800864c:	f000 fc9d 	bl	8008f8a <_calloc_r>
 8008650:	b160      	cbz	r0, 800866c <_Balloc+0x64>
 8008652:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008656:	e00e      	b.n	8008676 <_Balloc+0x6e>
 8008658:	2221      	movs	r2, #33	; 0x21
 800865a:	2104      	movs	r1, #4
 800865c:	4620      	mov	r0, r4
 800865e:	f000 fc94 	bl	8008f8a <_calloc_r>
 8008662:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008664:	60f0      	str	r0, [r6, #12]
 8008666:	68db      	ldr	r3, [r3, #12]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d1e4      	bne.n	8008636 <_Balloc+0x2e>
 800866c:	2000      	movs	r0, #0
 800866e:	bd70      	pop	{r4, r5, r6, pc}
 8008670:	6802      	ldr	r2, [r0, #0]
 8008672:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008676:	2300      	movs	r3, #0
 8008678:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800867c:	e7f7      	b.n	800866e <_Balloc+0x66>
 800867e:	bf00      	nop
 8008680:	0800a23d 	.word	0x0800a23d
 8008684:	0800a530 	.word	0x0800a530

08008688 <_Bfree>:
 8008688:	b570      	push	{r4, r5, r6, lr}
 800868a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800868c:	4605      	mov	r5, r0
 800868e:	460c      	mov	r4, r1
 8008690:	b976      	cbnz	r6, 80086b0 <_Bfree+0x28>
 8008692:	2010      	movs	r0, #16
 8008694:	f7ff ff90 	bl	80085b8 <malloc>
 8008698:	4602      	mov	r2, r0
 800869a:	6268      	str	r0, [r5, #36]	; 0x24
 800869c:	b920      	cbnz	r0, 80086a8 <_Bfree+0x20>
 800869e:	4b09      	ldr	r3, [pc, #36]	; (80086c4 <_Bfree+0x3c>)
 80086a0:	4809      	ldr	r0, [pc, #36]	; (80086c8 <_Bfree+0x40>)
 80086a2:	218a      	movs	r1, #138	; 0x8a
 80086a4:	f7fe fd68 	bl	8007178 <__assert_func>
 80086a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086ac:	6006      	str	r6, [r0, #0]
 80086ae:	60c6      	str	r6, [r0, #12]
 80086b0:	b13c      	cbz	r4, 80086c2 <_Bfree+0x3a>
 80086b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80086b4:	6862      	ldr	r2, [r4, #4]
 80086b6:	68db      	ldr	r3, [r3, #12]
 80086b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80086bc:	6021      	str	r1, [r4, #0]
 80086be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80086c2:	bd70      	pop	{r4, r5, r6, pc}
 80086c4:	0800a23d 	.word	0x0800a23d
 80086c8:	0800a530 	.word	0x0800a530

080086cc <__multadd>:
 80086cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086d0:	690d      	ldr	r5, [r1, #16]
 80086d2:	4607      	mov	r7, r0
 80086d4:	460c      	mov	r4, r1
 80086d6:	461e      	mov	r6, r3
 80086d8:	f101 0c14 	add.w	ip, r1, #20
 80086dc:	2000      	movs	r0, #0
 80086de:	f8dc 3000 	ldr.w	r3, [ip]
 80086e2:	b299      	uxth	r1, r3
 80086e4:	fb02 6101 	mla	r1, r2, r1, r6
 80086e8:	0c1e      	lsrs	r6, r3, #16
 80086ea:	0c0b      	lsrs	r3, r1, #16
 80086ec:	fb02 3306 	mla	r3, r2, r6, r3
 80086f0:	b289      	uxth	r1, r1
 80086f2:	3001      	adds	r0, #1
 80086f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80086f8:	4285      	cmp	r5, r0
 80086fa:	f84c 1b04 	str.w	r1, [ip], #4
 80086fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008702:	dcec      	bgt.n	80086de <__multadd+0x12>
 8008704:	b30e      	cbz	r6, 800874a <__multadd+0x7e>
 8008706:	68a3      	ldr	r3, [r4, #8]
 8008708:	42ab      	cmp	r3, r5
 800870a:	dc19      	bgt.n	8008740 <__multadd+0x74>
 800870c:	6861      	ldr	r1, [r4, #4]
 800870e:	4638      	mov	r0, r7
 8008710:	3101      	adds	r1, #1
 8008712:	f7ff ff79 	bl	8008608 <_Balloc>
 8008716:	4680      	mov	r8, r0
 8008718:	b928      	cbnz	r0, 8008726 <__multadd+0x5a>
 800871a:	4602      	mov	r2, r0
 800871c:	4b0c      	ldr	r3, [pc, #48]	; (8008750 <__multadd+0x84>)
 800871e:	480d      	ldr	r0, [pc, #52]	; (8008754 <__multadd+0x88>)
 8008720:	21b5      	movs	r1, #181	; 0xb5
 8008722:	f7fe fd29 	bl	8007178 <__assert_func>
 8008726:	6922      	ldr	r2, [r4, #16]
 8008728:	3202      	adds	r2, #2
 800872a:	f104 010c 	add.w	r1, r4, #12
 800872e:	0092      	lsls	r2, r2, #2
 8008730:	300c      	adds	r0, #12
 8008732:	f7ff ff5b 	bl	80085ec <memcpy>
 8008736:	4621      	mov	r1, r4
 8008738:	4638      	mov	r0, r7
 800873a:	f7ff ffa5 	bl	8008688 <_Bfree>
 800873e:	4644      	mov	r4, r8
 8008740:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008744:	3501      	adds	r5, #1
 8008746:	615e      	str	r6, [r3, #20]
 8008748:	6125      	str	r5, [r4, #16]
 800874a:	4620      	mov	r0, r4
 800874c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008750:	0800a4a5 	.word	0x0800a4a5
 8008754:	0800a530 	.word	0x0800a530

08008758 <__s2b>:
 8008758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800875c:	460c      	mov	r4, r1
 800875e:	4615      	mov	r5, r2
 8008760:	461f      	mov	r7, r3
 8008762:	2209      	movs	r2, #9
 8008764:	3308      	adds	r3, #8
 8008766:	4606      	mov	r6, r0
 8008768:	fb93 f3f2 	sdiv	r3, r3, r2
 800876c:	2100      	movs	r1, #0
 800876e:	2201      	movs	r2, #1
 8008770:	429a      	cmp	r2, r3
 8008772:	db09      	blt.n	8008788 <__s2b+0x30>
 8008774:	4630      	mov	r0, r6
 8008776:	f7ff ff47 	bl	8008608 <_Balloc>
 800877a:	b940      	cbnz	r0, 800878e <__s2b+0x36>
 800877c:	4602      	mov	r2, r0
 800877e:	4b19      	ldr	r3, [pc, #100]	; (80087e4 <__s2b+0x8c>)
 8008780:	4819      	ldr	r0, [pc, #100]	; (80087e8 <__s2b+0x90>)
 8008782:	21ce      	movs	r1, #206	; 0xce
 8008784:	f7fe fcf8 	bl	8007178 <__assert_func>
 8008788:	0052      	lsls	r2, r2, #1
 800878a:	3101      	adds	r1, #1
 800878c:	e7f0      	b.n	8008770 <__s2b+0x18>
 800878e:	9b08      	ldr	r3, [sp, #32]
 8008790:	6143      	str	r3, [r0, #20]
 8008792:	2d09      	cmp	r5, #9
 8008794:	f04f 0301 	mov.w	r3, #1
 8008798:	6103      	str	r3, [r0, #16]
 800879a:	dd16      	ble.n	80087ca <__s2b+0x72>
 800879c:	f104 0909 	add.w	r9, r4, #9
 80087a0:	46c8      	mov	r8, r9
 80087a2:	442c      	add	r4, r5
 80087a4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80087a8:	4601      	mov	r1, r0
 80087aa:	3b30      	subs	r3, #48	; 0x30
 80087ac:	220a      	movs	r2, #10
 80087ae:	4630      	mov	r0, r6
 80087b0:	f7ff ff8c 	bl	80086cc <__multadd>
 80087b4:	45a0      	cmp	r8, r4
 80087b6:	d1f5      	bne.n	80087a4 <__s2b+0x4c>
 80087b8:	f1a5 0408 	sub.w	r4, r5, #8
 80087bc:	444c      	add	r4, r9
 80087be:	1b2d      	subs	r5, r5, r4
 80087c0:	1963      	adds	r3, r4, r5
 80087c2:	42bb      	cmp	r3, r7
 80087c4:	db04      	blt.n	80087d0 <__s2b+0x78>
 80087c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087ca:	340a      	adds	r4, #10
 80087cc:	2509      	movs	r5, #9
 80087ce:	e7f6      	b.n	80087be <__s2b+0x66>
 80087d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80087d4:	4601      	mov	r1, r0
 80087d6:	3b30      	subs	r3, #48	; 0x30
 80087d8:	220a      	movs	r2, #10
 80087da:	4630      	mov	r0, r6
 80087dc:	f7ff ff76 	bl	80086cc <__multadd>
 80087e0:	e7ee      	b.n	80087c0 <__s2b+0x68>
 80087e2:	bf00      	nop
 80087e4:	0800a4a5 	.word	0x0800a4a5
 80087e8:	0800a530 	.word	0x0800a530

080087ec <__hi0bits>:
 80087ec:	0c03      	lsrs	r3, r0, #16
 80087ee:	041b      	lsls	r3, r3, #16
 80087f0:	b9d3      	cbnz	r3, 8008828 <__hi0bits+0x3c>
 80087f2:	0400      	lsls	r0, r0, #16
 80087f4:	2310      	movs	r3, #16
 80087f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80087fa:	bf04      	itt	eq
 80087fc:	0200      	lsleq	r0, r0, #8
 80087fe:	3308      	addeq	r3, #8
 8008800:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008804:	bf04      	itt	eq
 8008806:	0100      	lsleq	r0, r0, #4
 8008808:	3304      	addeq	r3, #4
 800880a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800880e:	bf04      	itt	eq
 8008810:	0080      	lsleq	r0, r0, #2
 8008812:	3302      	addeq	r3, #2
 8008814:	2800      	cmp	r0, #0
 8008816:	db05      	blt.n	8008824 <__hi0bits+0x38>
 8008818:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800881c:	f103 0301 	add.w	r3, r3, #1
 8008820:	bf08      	it	eq
 8008822:	2320      	moveq	r3, #32
 8008824:	4618      	mov	r0, r3
 8008826:	4770      	bx	lr
 8008828:	2300      	movs	r3, #0
 800882a:	e7e4      	b.n	80087f6 <__hi0bits+0xa>

0800882c <__lo0bits>:
 800882c:	6803      	ldr	r3, [r0, #0]
 800882e:	f013 0207 	ands.w	r2, r3, #7
 8008832:	4601      	mov	r1, r0
 8008834:	d00b      	beq.n	800884e <__lo0bits+0x22>
 8008836:	07da      	lsls	r2, r3, #31
 8008838:	d423      	bmi.n	8008882 <__lo0bits+0x56>
 800883a:	0798      	lsls	r0, r3, #30
 800883c:	bf49      	itett	mi
 800883e:	085b      	lsrmi	r3, r3, #1
 8008840:	089b      	lsrpl	r3, r3, #2
 8008842:	2001      	movmi	r0, #1
 8008844:	600b      	strmi	r3, [r1, #0]
 8008846:	bf5c      	itt	pl
 8008848:	600b      	strpl	r3, [r1, #0]
 800884a:	2002      	movpl	r0, #2
 800884c:	4770      	bx	lr
 800884e:	b298      	uxth	r0, r3
 8008850:	b9a8      	cbnz	r0, 800887e <__lo0bits+0x52>
 8008852:	0c1b      	lsrs	r3, r3, #16
 8008854:	2010      	movs	r0, #16
 8008856:	b2da      	uxtb	r2, r3
 8008858:	b90a      	cbnz	r2, 800885e <__lo0bits+0x32>
 800885a:	3008      	adds	r0, #8
 800885c:	0a1b      	lsrs	r3, r3, #8
 800885e:	071a      	lsls	r2, r3, #28
 8008860:	bf04      	itt	eq
 8008862:	091b      	lsreq	r3, r3, #4
 8008864:	3004      	addeq	r0, #4
 8008866:	079a      	lsls	r2, r3, #30
 8008868:	bf04      	itt	eq
 800886a:	089b      	lsreq	r3, r3, #2
 800886c:	3002      	addeq	r0, #2
 800886e:	07da      	lsls	r2, r3, #31
 8008870:	d403      	bmi.n	800887a <__lo0bits+0x4e>
 8008872:	085b      	lsrs	r3, r3, #1
 8008874:	f100 0001 	add.w	r0, r0, #1
 8008878:	d005      	beq.n	8008886 <__lo0bits+0x5a>
 800887a:	600b      	str	r3, [r1, #0]
 800887c:	4770      	bx	lr
 800887e:	4610      	mov	r0, r2
 8008880:	e7e9      	b.n	8008856 <__lo0bits+0x2a>
 8008882:	2000      	movs	r0, #0
 8008884:	4770      	bx	lr
 8008886:	2020      	movs	r0, #32
 8008888:	4770      	bx	lr
	...

0800888c <__i2b>:
 800888c:	b510      	push	{r4, lr}
 800888e:	460c      	mov	r4, r1
 8008890:	2101      	movs	r1, #1
 8008892:	f7ff feb9 	bl	8008608 <_Balloc>
 8008896:	4602      	mov	r2, r0
 8008898:	b928      	cbnz	r0, 80088a6 <__i2b+0x1a>
 800889a:	4b05      	ldr	r3, [pc, #20]	; (80088b0 <__i2b+0x24>)
 800889c:	4805      	ldr	r0, [pc, #20]	; (80088b4 <__i2b+0x28>)
 800889e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80088a2:	f7fe fc69 	bl	8007178 <__assert_func>
 80088a6:	2301      	movs	r3, #1
 80088a8:	6144      	str	r4, [r0, #20]
 80088aa:	6103      	str	r3, [r0, #16]
 80088ac:	bd10      	pop	{r4, pc}
 80088ae:	bf00      	nop
 80088b0:	0800a4a5 	.word	0x0800a4a5
 80088b4:	0800a530 	.word	0x0800a530

080088b8 <__multiply>:
 80088b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088bc:	4691      	mov	r9, r2
 80088be:	690a      	ldr	r2, [r1, #16]
 80088c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80088c4:	429a      	cmp	r2, r3
 80088c6:	bfb8      	it	lt
 80088c8:	460b      	movlt	r3, r1
 80088ca:	460c      	mov	r4, r1
 80088cc:	bfbc      	itt	lt
 80088ce:	464c      	movlt	r4, r9
 80088d0:	4699      	movlt	r9, r3
 80088d2:	6927      	ldr	r7, [r4, #16]
 80088d4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80088d8:	68a3      	ldr	r3, [r4, #8]
 80088da:	6861      	ldr	r1, [r4, #4]
 80088dc:	eb07 060a 	add.w	r6, r7, sl
 80088e0:	42b3      	cmp	r3, r6
 80088e2:	b085      	sub	sp, #20
 80088e4:	bfb8      	it	lt
 80088e6:	3101      	addlt	r1, #1
 80088e8:	f7ff fe8e 	bl	8008608 <_Balloc>
 80088ec:	b930      	cbnz	r0, 80088fc <__multiply+0x44>
 80088ee:	4602      	mov	r2, r0
 80088f0:	4b44      	ldr	r3, [pc, #272]	; (8008a04 <__multiply+0x14c>)
 80088f2:	4845      	ldr	r0, [pc, #276]	; (8008a08 <__multiply+0x150>)
 80088f4:	f240 115d 	movw	r1, #349	; 0x15d
 80088f8:	f7fe fc3e 	bl	8007178 <__assert_func>
 80088fc:	f100 0514 	add.w	r5, r0, #20
 8008900:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008904:	462b      	mov	r3, r5
 8008906:	2200      	movs	r2, #0
 8008908:	4543      	cmp	r3, r8
 800890a:	d321      	bcc.n	8008950 <__multiply+0x98>
 800890c:	f104 0314 	add.w	r3, r4, #20
 8008910:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008914:	f109 0314 	add.w	r3, r9, #20
 8008918:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800891c:	9202      	str	r2, [sp, #8]
 800891e:	1b3a      	subs	r2, r7, r4
 8008920:	3a15      	subs	r2, #21
 8008922:	f022 0203 	bic.w	r2, r2, #3
 8008926:	3204      	adds	r2, #4
 8008928:	f104 0115 	add.w	r1, r4, #21
 800892c:	428f      	cmp	r7, r1
 800892e:	bf38      	it	cc
 8008930:	2204      	movcc	r2, #4
 8008932:	9201      	str	r2, [sp, #4]
 8008934:	9a02      	ldr	r2, [sp, #8]
 8008936:	9303      	str	r3, [sp, #12]
 8008938:	429a      	cmp	r2, r3
 800893a:	d80c      	bhi.n	8008956 <__multiply+0x9e>
 800893c:	2e00      	cmp	r6, #0
 800893e:	dd03      	ble.n	8008948 <__multiply+0x90>
 8008940:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008944:	2b00      	cmp	r3, #0
 8008946:	d05a      	beq.n	80089fe <__multiply+0x146>
 8008948:	6106      	str	r6, [r0, #16]
 800894a:	b005      	add	sp, #20
 800894c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008950:	f843 2b04 	str.w	r2, [r3], #4
 8008954:	e7d8      	b.n	8008908 <__multiply+0x50>
 8008956:	f8b3 a000 	ldrh.w	sl, [r3]
 800895a:	f1ba 0f00 	cmp.w	sl, #0
 800895e:	d024      	beq.n	80089aa <__multiply+0xf2>
 8008960:	f104 0e14 	add.w	lr, r4, #20
 8008964:	46a9      	mov	r9, r5
 8008966:	f04f 0c00 	mov.w	ip, #0
 800896a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800896e:	f8d9 1000 	ldr.w	r1, [r9]
 8008972:	fa1f fb82 	uxth.w	fp, r2
 8008976:	b289      	uxth	r1, r1
 8008978:	fb0a 110b 	mla	r1, sl, fp, r1
 800897c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008980:	f8d9 2000 	ldr.w	r2, [r9]
 8008984:	4461      	add	r1, ip
 8008986:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800898a:	fb0a c20b 	mla	r2, sl, fp, ip
 800898e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008992:	b289      	uxth	r1, r1
 8008994:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008998:	4577      	cmp	r7, lr
 800899a:	f849 1b04 	str.w	r1, [r9], #4
 800899e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80089a2:	d8e2      	bhi.n	800896a <__multiply+0xb2>
 80089a4:	9a01      	ldr	r2, [sp, #4]
 80089a6:	f845 c002 	str.w	ip, [r5, r2]
 80089aa:	9a03      	ldr	r2, [sp, #12]
 80089ac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80089b0:	3304      	adds	r3, #4
 80089b2:	f1b9 0f00 	cmp.w	r9, #0
 80089b6:	d020      	beq.n	80089fa <__multiply+0x142>
 80089b8:	6829      	ldr	r1, [r5, #0]
 80089ba:	f104 0c14 	add.w	ip, r4, #20
 80089be:	46ae      	mov	lr, r5
 80089c0:	f04f 0a00 	mov.w	sl, #0
 80089c4:	f8bc b000 	ldrh.w	fp, [ip]
 80089c8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80089cc:	fb09 220b 	mla	r2, r9, fp, r2
 80089d0:	4492      	add	sl, r2
 80089d2:	b289      	uxth	r1, r1
 80089d4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80089d8:	f84e 1b04 	str.w	r1, [lr], #4
 80089dc:	f85c 2b04 	ldr.w	r2, [ip], #4
 80089e0:	f8be 1000 	ldrh.w	r1, [lr]
 80089e4:	0c12      	lsrs	r2, r2, #16
 80089e6:	fb09 1102 	mla	r1, r9, r2, r1
 80089ea:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80089ee:	4567      	cmp	r7, ip
 80089f0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80089f4:	d8e6      	bhi.n	80089c4 <__multiply+0x10c>
 80089f6:	9a01      	ldr	r2, [sp, #4]
 80089f8:	50a9      	str	r1, [r5, r2]
 80089fa:	3504      	adds	r5, #4
 80089fc:	e79a      	b.n	8008934 <__multiply+0x7c>
 80089fe:	3e01      	subs	r6, #1
 8008a00:	e79c      	b.n	800893c <__multiply+0x84>
 8008a02:	bf00      	nop
 8008a04:	0800a4a5 	.word	0x0800a4a5
 8008a08:	0800a530 	.word	0x0800a530

08008a0c <__pow5mult>:
 8008a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a10:	4615      	mov	r5, r2
 8008a12:	f012 0203 	ands.w	r2, r2, #3
 8008a16:	4606      	mov	r6, r0
 8008a18:	460f      	mov	r7, r1
 8008a1a:	d007      	beq.n	8008a2c <__pow5mult+0x20>
 8008a1c:	4c25      	ldr	r4, [pc, #148]	; (8008ab4 <__pow5mult+0xa8>)
 8008a1e:	3a01      	subs	r2, #1
 8008a20:	2300      	movs	r3, #0
 8008a22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008a26:	f7ff fe51 	bl	80086cc <__multadd>
 8008a2a:	4607      	mov	r7, r0
 8008a2c:	10ad      	asrs	r5, r5, #2
 8008a2e:	d03d      	beq.n	8008aac <__pow5mult+0xa0>
 8008a30:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008a32:	b97c      	cbnz	r4, 8008a54 <__pow5mult+0x48>
 8008a34:	2010      	movs	r0, #16
 8008a36:	f7ff fdbf 	bl	80085b8 <malloc>
 8008a3a:	4602      	mov	r2, r0
 8008a3c:	6270      	str	r0, [r6, #36]	; 0x24
 8008a3e:	b928      	cbnz	r0, 8008a4c <__pow5mult+0x40>
 8008a40:	4b1d      	ldr	r3, [pc, #116]	; (8008ab8 <__pow5mult+0xac>)
 8008a42:	481e      	ldr	r0, [pc, #120]	; (8008abc <__pow5mult+0xb0>)
 8008a44:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008a48:	f7fe fb96 	bl	8007178 <__assert_func>
 8008a4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008a50:	6004      	str	r4, [r0, #0]
 8008a52:	60c4      	str	r4, [r0, #12]
 8008a54:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008a58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008a5c:	b94c      	cbnz	r4, 8008a72 <__pow5mult+0x66>
 8008a5e:	f240 2171 	movw	r1, #625	; 0x271
 8008a62:	4630      	mov	r0, r6
 8008a64:	f7ff ff12 	bl	800888c <__i2b>
 8008a68:	2300      	movs	r3, #0
 8008a6a:	f8c8 0008 	str.w	r0, [r8, #8]
 8008a6e:	4604      	mov	r4, r0
 8008a70:	6003      	str	r3, [r0, #0]
 8008a72:	f04f 0900 	mov.w	r9, #0
 8008a76:	07eb      	lsls	r3, r5, #31
 8008a78:	d50a      	bpl.n	8008a90 <__pow5mult+0x84>
 8008a7a:	4639      	mov	r1, r7
 8008a7c:	4622      	mov	r2, r4
 8008a7e:	4630      	mov	r0, r6
 8008a80:	f7ff ff1a 	bl	80088b8 <__multiply>
 8008a84:	4639      	mov	r1, r7
 8008a86:	4680      	mov	r8, r0
 8008a88:	4630      	mov	r0, r6
 8008a8a:	f7ff fdfd 	bl	8008688 <_Bfree>
 8008a8e:	4647      	mov	r7, r8
 8008a90:	106d      	asrs	r5, r5, #1
 8008a92:	d00b      	beq.n	8008aac <__pow5mult+0xa0>
 8008a94:	6820      	ldr	r0, [r4, #0]
 8008a96:	b938      	cbnz	r0, 8008aa8 <__pow5mult+0x9c>
 8008a98:	4622      	mov	r2, r4
 8008a9a:	4621      	mov	r1, r4
 8008a9c:	4630      	mov	r0, r6
 8008a9e:	f7ff ff0b 	bl	80088b8 <__multiply>
 8008aa2:	6020      	str	r0, [r4, #0]
 8008aa4:	f8c0 9000 	str.w	r9, [r0]
 8008aa8:	4604      	mov	r4, r0
 8008aaa:	e7e4      	b.n	8008a76 <__pow5mult+0x6a>
 8008aac:	4638      	mov	r0, r7
 8008aae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ab2:	bf00      	nop
 8008ab4:	0800a680 	.word	0x0800a680
 8008ab8:	0800a23d 	.word	0x0800a23d
 8008abc:	0800a530 	.word	0x0800a530

08008ac0 <__lshift>:
 8008ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ac4:	460c      	mov	r4, r1
 8008ac6:	6849      	ldr	r1, [r1, #4]
 8008ac8:	6923      	ldr	r3, [r4, #16]
 8008aca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008ace:	68a3      	ldr	r3, [r4, #8]
 8008ad0:	4607      	mov	r7, r0
 8008ad2:	4691      	mov	r9, r2
 8008ad4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008ad8:	f108 0601 	add.w	r6, r8, #1
 8008adc:	42b3      	cmp	r3, r6
 8008ade:	db0b      	blt.n	8008af8 <__lshift+0x38>
 8008ae0:	4638      	mov	r0, r7
 8008ae2:	f7ff fd91 	bl	8008608 <_Balloc>
 8008ae6:	4605      	mov	r5, r0
 8008ae8:	b948      	cbnz	r0, 8008afe <__lshift+0x3e>
 8008aea:	4602      	mov	r2, r0
 8008aec:	4b2a      	ldr	r3, [pc, #168]	; (8008b98 <__lshift+0xd8>)
 8008aee:	482b      	ldr	r0, [pc, #172]	; (8008b9c <__lshift+0xdc>)
 8008af0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008af4:	f7fe fb40 	bl	8007178 <__assert_func>
 8008af8:	3101      	adds	r1, #1
 8008afa:	005b      	lsls	r3, r3, #1
 8008afc:	e7ee      	b.n	8008adc <__lshift+0x1c>
 8008afe:	2300      	movs	r3, #0
 8008b00:	f100 0114 	add.w	r1, r0, #20
 8008b04:	f100 0210 	add.w	r2, r0, #16
 8008b08:	4618      	mov	r0, r3
 8008b0a:	4553      	cmp	r3, sl
 8008b0c:	db37      	blt.n	8008b7e <__lshift+0xbe>
 8008b0e:	6920      	ldr	r0, [r4, #16]
 8008b10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008b14:	f104 0314 	add.w	r3, r4, #20
 8008b18:	f019 091f 	ands.w	r9, r9, #31
 8008b1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008b20:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008b24:	d02f      	beq.n	8008b86 <__lshift+0xc6>
 8008b26:	f1c9 0e20 	rsb	lr, r9, #32
 8008b2a:	468a      	mov	sl, r1
 8008b2c:	f04f 0c00 	mov.w	ip, #0
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	fa02 f209 	lsl.w	r2, r2, r9
 8008b36:	ea42 020c 	orr.w	r2, r2, ip
 8008b3a:	f84a 2b04 	str.w	r2, [sl], #4
 8008b3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b42:	4298      	cmp	r0, r3
 8008b44:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008b48:	d8f2      	bhi.n	8008b30 <__lshift+0x70>
 8008b4a:	1b03      	subs	r3, r0, r4
 8008b4c:	3b15      	subs	r3, #21
 8008b4e:	f023 0303 	bic.w	r3, r3, #3
 8008b52:	3304      	adds	r3, #4
 8008b54:	f104 0215 	add.w	r2, r4, #21
 8008b58:	4290      	cmp	r0, r2
 8008b5a:	bf38      	it	cc
 8008b5c:	2304      	movcc	r3, #4
 8008b5e:	f841 c003 	str.w	ip, [r1, r3]
 8008b62:	f1bc 0f00 	cmp.w	ip, #0
 8008b66:	d001      	beq.n	8008b6c <__lshift+0xac>
 8008b68:	f108 0602 	add.w	r6, r8, #2
 8008b6c:	3e01      	subs	r6, #1
 8008b6e:	4638      	mov	r0, r7
 8008b70:	612e      	str	r6, [r5, #16]
 8008b72:	4621      	mov	r1, r4
 8008b74:	f7ff fd88 	bl	8008688 <_Bfree>
 8008b78:	4628      	mov	r0, r5
 8008b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b7e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008b82:	3301      	adds	r3, #1
 8008b84:	e7c1      	b.n	8008b0a <__lshift+0x4a>
 8008b86:	3904      	subs	r1, #4
 8008b88:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b8c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008b90:	4298      	cmp	r0, r3
 8008b92:	d8f9      	bhi.n	8008b88 <__lshift+0xc8>
 8008b94:	e7ea      	b.n	8008b6c <__lshift+0xac>
 8008b96:	bf00      	nop
 8008b98:	0800a4a5 	.word	0x0800a4a5
 8008b9c:	0800a530 	.word	0x0800a530

08008ba0 <__mcmp>:
 8008ba0:	b530      	push	{r4, r5, lr}
 8008ba2:	6902      	ldr	r2, [r0, #16]
 8008ba4:	690c      	ldr	r4, [r1, #16]
 8008ba6:	1b12      	subs	r2, r2, r4
 8008ba8:	d10e      	bne.n	8008bc8 <__mcmp+0x28>
 8008baa:	f100 0314 	add.w	r3, r0, #20
 8008bae:	3114      	adds	r1, #20
 8008bb0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008bb4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008bb8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008bbc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008bc0:	42a5      	cmp	r5, r4
 8008bc2:	d003      	beq.n	8008bcc <__mcmp+0x2c>
 8008bc4:	d305      	bcc.n	8008bd2 <__mcmp+0x32>
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	4610      	mov	r0, r2
 8008bca:	bd30      	pop	{r4, r5, pc}
 8008bcc:	4283      	cmp	r3, r0
 8008bce:	d3f3      	bcc.n	8008bb8 <__mcmp+0x18>
 8008bd0:	e7fa      	b.n	8008bc8 <__mcmp+0x28>
 8008bd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008bd6:	e7f7      	b.n	8008bc8 <__mcmp+0x28>

08008bd8 <__mdiff>:
 8008bd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bdc:	460c      	mov	r4, r1
 8008bde:	4606      	mov	r6, r0
 8008be0:	4611      	mov	r1, r2
 8008be2:	4620      	mov	r0, r4
 8008be4:	4690      	mov	r8, r2
 8008be6:	f7ff ffdb 	bl	8008ba0 <__mcmp>
 8008bea:	1e05      	subs	r5, r0, #0
 8008bec:	d110      	bne.n	8008c10 <__mdiff+0x38>
 8008bee:	4629      	mov	r1, r5
 8008bf0:	4630      	mov	r0, r6
 8008bf2:	f7ff fd09 	bl	8008608 <_Balloc>
 8008bf6:	b930      	cbnz	r0, 8008c06 <__mdiff+0x2e>
 8008bf8:	4b3a      	ldr	r3, [pc, #232]	; (8008ce4 <__mdiff+0x10c>)
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	f240 2132 	movw	r1, #562	; 0x232
 8008c00:	4839      	ldr	r0, [pc, #228]	; (8008ce8 <__mdiff+0x110>)
 8008c02:	f7fe fab9 	bl	8007178 <__assert_func>
 8008c06:	2301      	movs	r3, #1
 8008c08:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008c0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c10:	bfa4      	itt	ge
 8008c12:	4643      	movge	r3, r8
 8008c14:	46a0      	movge	r8, r4
 8008c16:	4630      	mov	r0, r6
 8008c18:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008c1c:	bfa6      	itte	ge
 8008c1e:	461c      	movge	r4, r3
 8008c20:	2500      	movge	r5, #0
 8008c22:	2501      	movlt	r5, #1
 8008c24:	f7ff fcf0 	bl	8008608 <_Balloc>
 8008c28:	b920      	cbnz	r0, 8008c34 <__mdiff+0x5c>
 8008c2a:	4b2e      	ldr	r3, [pc, #184]	; (8008ce4 <__mdiff+0x10c>)
 8008c2c:	4602      	mov	r2, r0
 8008c2e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008c32:	e7e5      	b.n	8008c00 <__mdiff+0x28>
 8008c34:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008c38:	6926      	ldr	r6, [r4, #16]
 8008c3a:	60c5      	str	r5, [r0, #12]
 8008c3c:	f104 0914 	add.w	r9, r4, #20
 8008c40:	f108 0514 	add.w	r5, r8, #20
 8008c44:	f100 0e14 	add.w	lr, r0, #20
 8008c48:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008c4c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008c50:	f108 0210 	add.w	r2, r8, #16
 8008c54:	46f2      	mov	sl, lr
 8008c56:	2100      	movs	r1, #0
 8008c58:	f859 3b04 	ldr.w	r3, [r9], #4
 8008c5c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008c60:	fa1f f883 	uxth.w	r8, r3
 8008c64:	fa11 f18b 	uxtah	r1, r1, fp
 8008c68:	0c1b      	lsrs	r3, r3, #16
 8008c6a:	eba1 0808 	sub.w	r8, r1, r8
 8008c6e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008c72:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008c76:	fa1f f888 	uxth.w	r8, r8
 8008c7a:	1419      	asrs	r1, r3, #16
 8008c7c:	454e      	cmp	r6, r9
 8008c7e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008c82:	f84a 3b04 	str.w	r3, [sl], #4
 8008c86:	d8e7      	bhi.n	8008c58 <__mdiff+0x80>
 8008c88:	1b33      	subs	r3, r6, r4
 8008c8a:	3b15      	subs	r3, #21
 8008c8c:	f023 0303 	bic.w	r3, r3, #3
 8008c90:	3304      	adds	r3, #4
 8008c92:	3415      	adds	r4, #21
 8008c94:	42a6      	cmp	r6, r4
 8008c96:	bf38      	it	cc
 8008c98:	2304      	movcc	r3, #4
 8008c9a:	441d      	add	r5, r3
 8008c9c:	4473      	add	r3, lr
 8008c9e:	469e      	mov	lr, r3
 8008ca0:	462e      	mov	r6, r5
 8008ca2:	4566      	cmp	r6, ip
 8008ca4:	d30e      	bcc.n	8008cc4 <__mdiff+0xec>
 8008ca6:	f10c 0203 	add.w	r2, ip, #3
 8008caa:	1b52      	subs	r2, r2, r5
 8008cac:	f022 0203 	bic.w	r2, r2, #3
 8008cb0:	3d03      	subs	r5, #3
 8008cb2:	45ac      	cmp	ip, r5
 8008cb4:	bf38      	it	cc
 8008cb6:	2200      	movcc	r2, #0
 8008cb8:	441a      	add	r2, r3
 8008cba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008cbe:	b17b      	cbz	r3, 8008ce0 <__mdiff+0x108>
 8008cc0:	6107      	str	r7, [r0, #16]
 8008cc2:	e7a3      	b.n	8008c0c <__mdiff+0x34>
 8008cc4:	f856 8b04 	ldr.w	r8, [r6], #4
 8008cc8:	fa11 f288 	uxtah	r2, r1, r8
 8008ccc:	1414      	asrs	r4, r2, #16
 8008cce:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008cd2:	b292      	uxth	r2, r2
 8008cd4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008cd8:	f84e 2b04 	str.w	r2, [lr], #4
 8008cdc:	1421      	asrs	r1, r4, #16
 8008cde:	e7e0      	b.n	8008ca2 <__mdiff+0xca>
 8008ce0:	3f01      	subs	r7, #1
 8008ce2:	e7ea      	b.n	8008cba <__mdiff+0xe2>
 8008ce4:	0800a4a5 	.word	0x0800a4a5
 8008ce8:	0800a530 	.word	0x0800a530

08008cec <__ulp>:
 8008cec:	b082      	sub	sp, #8
 8008cee:	ed8d 0b00 	vstr	d0, [sp]
 8008cf2:	9b01      	ldr	r3, [sp, #4]
 8008cf4:	4912      	ldr	r1, [pc, #72]	; (8008d40 <__ulp+0x54>)
 8008cf6:	4019      	ands	r1, r3
 8008cf8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008cfc:	2900      	cmp	r1, #0
 8008cfe:	dd05      	ble.n	8008d0c <__ulp+0x20>
 8008d00:	2200      	movs	r2, #0
 8008d02:	460b      	mov	r3, r1
 8008d04:	ec43 2b10 	vmov	d0, r2, r3
 8008d08:	b002      	add	sp, #8
 8008d0a:	4770      	bx	lr
 8008d0c:	4249      	negs	r1, r1
 8008d0e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8008d12:	ea4f 5021 	mov.w	r0, r1, asr #20
 8008d16:	f04f 0200 	mov.w	r2, #0
 8008d1a:	f04f 0300 	mov.w	r3, #0
 8008d1e:	da04      	bge.n	8008d2a <__ulp+0x3e>
 8008d20:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008d24:	fa41 f300 	asr.w	r3, r1, r0
 8008d28:	e7ec      	b.n	8008d04 <__ulp+0x18>
 8008d2a:	f1a0 0114 	sub.w	r1, r0, #20
 8008d2e:	291e      	cmp	r1, #30
 8008d30:	bfda      	itte	le
 8008d32:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008d36:	fa20 f101 	lsrle.w	r1, r0, r1
 8008d3a:	2101      	movgt	r1, #1
 8008d3c:	460a      	mov	r2, r1
 8008d3e:	e7e1      	b.n	8008d04 <__ulp+0x18>
 8008d40:	7ff00000 	.word	0x7ff00000

08008d44 <__b2d>:
 8008d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d46:	6905      	ldr	r5, [r0, #16]
 8008d48:	f100 0714 	add.w	r7, r0, #20
 8008d4c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008d50:	1f2e      	subs	r6, r5, #4
 8008d52:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008d56:	4620      	mov	r0, r4
 8008d58:	f7ff fd48 	bl	80087ec <__hi0bits>
 8008d5c:	f1c0 0320 	rsb	r3, r0, #32
 8008d60:	280a      	cmp	r0, #10
 8008d62:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008de0 <__b2d+0x9c>
 8008d66:	600b      	str	r3, [r1, #0]
 8008d68:	dc14      	bgt.n	8008d94 <__b2d+0x50>
 8008d6a:	f1c0 0e0b 	rsb	lr, r0, #11
 8008d6e:	fa24 f10e 	lsr.w	r1, r4, lr
 8008d72:	42b7      	cmp	r7, r6
 8008d74:	ea41 030c 	orr.w	r3, r1, ip
 8008d78:	bf34      	ite	cc
 8008d7a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008d7e:	2100      	movcs	r1, #0
 8008d80:	3015      	adds	r0, #21
 8008d82:	fa04 f000 	lsl.w	r0, r4, r0
 8008d86:	fa21 f10e 	lsr.w	r1, r1, lr
 8008d8a:	ea40 0201 	orr.w	r2, r0, r1
 8008d8e:	ec43 2b10 	vmov	d0, r2, r3
 8008d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d94:	42b7      	cmp	r7, r6
 8008d96:	bf3a      	itte	cc
 8008d98:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008d9c:	f1a5 0608 	subcc.w	r6, r5, #8
 8008da0:	2100      	movcs	r1, #0
 8008da2:	380b      	subs	r0, #11
 8008da4:	d017      	beq.n	8008dd6 <__b2d+0x92>
 8008da6:	f1c0 0c20 	rsb	ip, r0, #32
 8008daa:	fa04 f500 	lsl.w	r5, r4, r0
 8008dae:	42be      	cmp	r6, r7
 8008db0:	fa21 f40c 	lsr.w	r4, r1, ip
 8008db4:	ea45 0504 	orr.w	r5, r5, r4
 8008db8:	bf8c      	ite	hi
 8008dba:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008dbe:	2400      	movls	r4, #0
 8008dc0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008dc4:	fa01 f000 	lsl.w	r0, r1, r0
 8008dc8:	fa24 f40c 	lsr.w	r4, r4, ip
 8008dcc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008dd0:	ea40 0204 	orr.w	r2, r0, r4
 8008dd4:	e7db      	b.n	8008d8e <__b2d+0x4a>
 8008dd6:	ea44 030c 	orr.w	r3, r4, ip
 8008dda:	460a      	mov	r2, r1
 8008ddc:	e7d7      	b.n	8008d8e <__b2d+0x4a>
 8008dde:	bf00      	nop
 8008de0:	3ff00000 	.word	0x3ff00000

08008de4 <__d2b>:
 8008de4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008de8:	4689      	mov	r9, r1
 8008dea:	2101      	movs	r1, #1
 8008dec:	ec57 6b10 	vmov	r6, r7, d0
 8008df0:	4690      	mov	r8, r2
 8008df2:	f7ff fc09 	bl	8008608 <_Balloc>
 8008df6:	4604      	mov	r4, r0
 8008df8:	b930      	cbnz	r0, 8008e08 <__d2b+0x24>
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	4b25      	ldr	r3, [pc, #148]	; (8008e94 <__d2b+0xb0>)
 8008dfe:	4826      	ldr	r0, [pc, #152]	; (8008e98 <__d2b+0xb4>)
 8008e00:	f240 310a 	movw	r1, #778	; 0x30a
 8008e04:	f7fe f9b8 	bl	8007178 <__assert_func>
 8008e08:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008e0c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008e10:	bb35      	cbnz	r5, 8008e60 <__d2b+0x7c>
 8008e12:	2e00      	cmp	r6, #0
 8008e14:	9301      	str	r3, [sp, #4]
 8008e16:	d028      	beq.n	8008e6a <__d2b+0x86>
 8008e18:	4668      	mov	r0, sp
 8008e1a:	9600      	str	r6, [sp, #0]
 8008e1c:	f7ff fd06 	bl	800882c <__lo0bits>
 8008e20:	9900      	ldr	r1, [sp, #0]
 8008e22:	b300      	cbz	r0, 8008e66 <__d2b+0x82>
 8008e24:	9a01      	ldr	r2, [sp, #4]
 8008e26:	f1c0 0320 	rsb	r3, r0, #32
 8008e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8008e2e:	430b      	orrs	r3, r1
 8008e30:	40c2      	lsrs	r2, r0
 8008e32:	6163      	str	r3, [r4, #20]
 8008e34:	9201      	str	r2, [sp, #4]
 8008e36:	9b01      	ldr	r3, [sp, #4]
 8008e38:	61a3      	str	r3, [r4, #24]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	bf14      	ite	ne
 8008e3e:	2202      	movne	r2, #2
 8008e40:	2201      	moveq	r2, #1
 8008e42:	6122      	str	r2, [r4, #16]
 8008e44:	b1d5      	cbz	r5, 8008e7c <__d2b+0x98>
 8008e46:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008e4a:	4405      	add	r5, r0
 8008e4c:	f8c9 5000 	str.w	r5, [r9]
 8008e50:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008e54:	f8c8 0000 	str.w	r0, [r8]
 8008e58:	4620      	mov	r0, r4
 8008e5a:	b003      	add	sp, #12
 8008e5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e64:	e7d5      	b.n	8008e12 <__d2b+0x2e>
 8008e66:	6161      	str	r1, [r4, #20]
 8008e68:	e7e5      	b.n	8008e36 <__d2b+0x52>
 8008e6a:	a801      	add	r0, sp, #4
 8008e6c:	f7ff fcde 	bl	800882c <__lo0bits>
 8008e70:	9b01      	ldr	r3, [sp, #4]
 8008e72:	6163      	str	r3, [r4, #20]
 8008e74:	2201      	movs	r2, #1
 8008e76:	6122      	str	r2, [r4, #16]
 8008e78:	3020      	adds	r0, #32
 8008e7a:	e7e3      	b.n	8008e44 <__d2b+0x60>
 8008e7c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008e80:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008e84:	f8c9 0000 	str.w	r0, [r9]
 8008e88:	6918      	ldr	r0, [r3, #16]
 8008e8a:	f7ff fcaf 	bl	80087ec <__hi0bits>
 8008e8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008e92:	e7df      	b.n	8008e54 <__d2b+0x70>
 8008e94:	0800a4a5 	.word	0x0800a4a5
 8008e98:	0800a530 	.word	0x0800a530

08008e9c <__ratio>:
 8008e9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ea0:	4688      	mov	r8, r1
 8008ea2:	4669      	mov	r1, sp
 8008ea4:	4681      	mov	r9, r0
 8008ea6:	f7ff ff4d 	bl	8008d44 <__b2d>
 8008eaa:	a901      	add	r1, sp, #4
 8008eac:	4640      	mov	r0, r8
 8008eae:	ec55 4b10 	vmov	r4, r5, d0
 8008eb2:	f7ff ff47 	bl	8008d44 <__b2d>
 8008eb6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008eba:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008ebe:	eba3 0c02 	sub.w	ip, r3, r2
 8008ec2:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008ec6:	1a9b      	subs	r3, r3, r2
 8008ec8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008ecc:	ec51 0b10 	vmov	r0, r1, d0
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	bfd6      	itet	le
 8008ed4:	460a      	movle	r2, r1
 8008ed6:	462a      	movgt	r2, r5
 8008ed8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008edc:	468b      	mov	fp, r1
 8008ede:	462f      	mov	r7, r5
 8008ee0:	bfd4      	ite	le
 8008ee2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008ee6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008eea:	4620      	mov	r0, r4
 8008eec:	ee10 2a10 	vmov	r2, s0
 8008ef0:	465b      	mov	r3, fp
 8008ef2:	4639      	mov	r1, r7
 8008ef4:	f7f7 fcca 	bl	800088c <__aeabi_ddiv>
 8008ef8:	ec41 0b10 	vmov	d0, r0, r1
 8008efc:	b003      	add	sp, #12
 8008efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008f02 <__copybits>:
 8008f02:	3901      	subs	r1, #1
 8008f04:	b570      	push	{r4, r5, r6, lr}
 8008f06:	1149      	asrs	r1, r1, #5
 8008f08:	6914      	ldr	r4, [r2, #16]
 8008f0a:	3101      	adds	r1, #1
 8008f0c:	f102 0314 	add.w	r3, r2, #20
 8008f10:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008f14:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008f18:	1f05      	subs	r5, r0, #4
 8008f1a:	42a3      	cmp	r3, r4
 8008f1c:	d30c      	bcc.n	8008f38 <__copybits+0x36>
 8008f1e:	1aa3      	subs	r3, r4, r2
 8008f20:	3b11      	subs	r3, #17
 8008f22:	f023 0303 	bic.w	r3, r3, #3
 8008f26:	3211      	adds	r2, #17
 8008f28:	42a2      	cmp	r2, r4
 8008f2a:	bf88      	it	hi
 8008f2c:	2300      	movhi	r3, #0
 8008f2e:	4418      	add	r0, r3
 8008f30:	2300      	movs	r3, #0
 8008f32:	4288      	cmp	r0, r1
 8008f34:	d305      	bcc.n	8008f42 <__copybits+0x40>
 8008f36:	bd70      	pop	{r4, r5, r6, pc}
 8008f38:	f853 6b04 	ldr.w	r6, [r3], #4
 8008f3c:	f845 6f04 	str.w	r6, [r5, #4]!
 8008f40:	e7eb      	b.n	8008f1a <__copybits+0x18>
 8008f42:	f840 3b04 	str.w	r3, [r0], #4
 8008f46:	e7f4      	b.n	8008f32 <__copybits+0x30>

08008f48 <__any_on>:
 8008f48:	f100 0214 	add.w	r2, r0, #20
 8008f4c:	6900      	ldr	r0, [r0, #16]
 8008f4e:	114b      	asrs	r3, r1, #5
 8008f50:	4298      	cmp	r0, r3
 8008f52:	b510      	push	{r4, lr}
 8008f54:	db11      	blt.n	8008f7a <__any_on+0x32>
 8008f56:	dd0a      	ble.n	8008f6e <__any_on+0x26>
 8008f58:	f011 011f 	ands.w	r1, r1, #31
 8008f5c:	d007      	beq.n	8008f6e <__any_on+0x26>
 8008f5e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008f62:	fa24 f001 	lsr.w	r0, r4, r1
 8008f66:	fa00 f101 	lsl.w	r1, r0, r1
 8008f6a:	428c      	cmp	r4, r1
 8008f6c:	d10b      	bne.n	8008f86 <__any_on+0x3e>
 8008f6e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d803      	bhi.n	8008f7e <__any_on+0x36>
 8008f76:	2000      	movs	r0, #0
 8008f78:	bd10      	pop	{r4, pc}
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	e7f7      	b.n	8008f6e <__any_on+0x26>
 8008f7e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008f82:	2900      	cmp	r1, #0
 8008f84:	d0f5      	beq.n	8008f72 <__any_on+0x2a>
 8008f86:	2001      	movs	r0, #1
 8008f88:	e7f6      	b.n	8008f78 <__any_on+0x30>

08008f8a <_calloc_r>:
 8008f8a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f8c:	fba1 2402 	umull	r2, r4, r1, r2
 8008f90:	b94c      	cbnz	r4, 8008fa6 <_calloc_r+0x1c>
 8008f92:	4611      	mov	r1, r2
 8008f94:	9201      	str	r2, [sp, #4]
 8008f96:	f000 f87b 	bl	8009090 <_malloc_r>
 8008f9a:	9a01      	ldr	r2, [sp, #4]
 8008f9c:	4605      	mov	r5, r0
 8008f9e:	b930      	cbnz	r0, 8008fae <_calloc_r+0x24>
 8008fa0:	4628      	mov	r0, r5
 8008fa2:	b003      	add	sp, #12
 8008fa4:	bd30      	pop	{r4, r5, pc}
 8008fa6:	220c      	movs	r2, #12
 8008fa8:	6002      	str	r2, [r0, #0]
 8008faa:	2500      	movs	r5, #0
 8008fac:	e7f8      	b.n	8008fa0 <_calloc_r+0x16>
 8008fae:	4621      	mov	r1, r4
 8008fb0:	f7fc fb50 	bl	8005654 <memset>
 8008fb4:	e7f4      	b.n	8008fa0 <_calloc_r+0x16>
	...

08008fb8 <_free_r>:
 8008fb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008fba:	2900      	cmp	r1, #0
 8008fbc:	d044      	beq.n	8009048 <_free_r+0x90>
 8008fbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fc2:	9001      	str	r0, [sp, #4]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	f1a1 0404 	sub.w	r4, r1, #4
 8008fca:	bfb8      	it	lt
 8008fcc:	18e4      	addlt	r4, r4, r3
 8008fce:	f000 fec7 	bl	8009d60 <__malloc_lock>
 8008fd2:	4a1e      	ldr	r2, [pc, #120]	; (800904c <_free_r+0x94>)
 8008fd4:	9801      	ldr	r0, [sp, #4]
 8008fd6:	6813      	ldr	r3, [r2, #0]
 8008fd8:	b933      	cbnz	r3, 8008fe8 <_free_r+0x30>
 8008fda:	6063      	str	r3, [r4, #4]
 8008fdc:	6014      	str	r4, [r2, #0]
 8008fde:	b003      	add	sp, #12
 8008fe0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008fe4:	f000 bec2 	b.w	8009d6c <__malloc_unlock>
 8008fe8:	42a3      	cmp	r3, r4
 8008fea:	d908      	bls.n	8008ffe <_free_r+0x46>
 8008fec:	6825      	ldr	r5, [r4, #0]
 8008fee:	1961      	adds	r1, r4, r5
 8008ff0:	428b      	cmp	r3, r1
 8008ff2:	bf01      	itttt	eq
 8008ff4:	6819      	ldreq	r1, [r3, #0]
 8008ff6:	685b      	ldreq	r3, [r3, #4]
 8008ff8:	1949      	addeq	r1, r1, r5
 8008ffa:	6021      	streq	r1, [r4, #0]
 8008ffc:	e7ed      	b.n	8008fda <_free_r+0x22>
 8008ffe:	461a      	mov	r2, r3
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	b10b      	cbz	r3, 8009008 <_free_r+0x50>
 8009004:	42a3      	cmp	r3, r4
 8009006:	d9fa      	bls.n	8008ffe <_free_r+0x46>
 8009008:	6811      	ldr	r1, [r2, #0]
 800900a:	1855      	adds	r5, r2, r1
 800900c:	42a5      	cmp	r5, r4
 800900e:	d10b      	bne.n	8009028 <_free_r+0x70>
 8009010:	6824      	ldr	r4, [r4, #0]
 8009012:	4421      	add	r1, r4
 8009014:	1854      	adds	r4, r2, r1
 8009016:	42a3      	cmp	r3, r4
 8009018:	6011      	str	r1, [r2, #0]
 800901a:	d1e0      	bne.n	8008fde <_free_r+0x26>
 800901c:	681c      	ldr	r4, [r3, #0]
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	6053      	str	r3, [r2, #4]
 8009022:	4421      	add	r1, r4
 8009024:	6011      	str	r1, [r2, #0]
 8009026:	e7da      	b.n	8008fde <_free_r+0x26>
 8009028:	d902      	bls.n	8009030 <_free_r+0x78>
 800902a:	230c      	movs	r3, #12
 800902c:	6003      	str	r3, [r0, #0]
 800902e:	e7d6      	b.n	8008fde <_free_r+0x26>
 8009030:	6825      	ldr	r5, [r4, #0]
 8009032:	1961      	adds	r1, r4, r5
 8009034:	428b      	cmp	r3, r1
 8009036:	bf04      	itt	eq
 8009038:	6819      	ldreq	r1, [r3, #0]
 800903a:	685b      	ldreq	r3, [r3, #4]
 800903c:	6063      	str	r3, [r4, #4]
 800903e:	bf04      	itt	eq
 8009040:	1949      	addeq	r1, r1, r5
 8009042:	6021      	streq	r1, [r4, #0]
 8009044:	6054      	str	r4, [r2, #4]
 8009046:	e7ca      	b.n	8008fde <_free_r+0x26>
 8009048:	b003      	add	sp, #12
 800904a:	bd30      	pop	{r4, r5, pc}
 800904c:	20000414 	.word	0x20000414

08009050 <sbrk_aligned>:
 8009050:	b570      	push	{r4, r5, r6, lr}
 8009052:	4e0e      	ldr	r6, [pc, #56]	; (800908c <sbrk_aligned+0x3c>)
 8009054:	460c      	mov	r4, r1
 8009056:	6831      	ldr	r1, [r6, #0]
 8009058:	4605      	mov	r5, r0
 800905a:	b911      	cbnz	r1, 8009062 <sbrk_aligned+0x12>
 800905c:	f000 fb4c 	bl	80096f8 <_sbrk_r>
 8009060:	6030      	str	r0, [r6, #0]
 8009062:	4621      	mov	r1, r4
 8009064:	4628      	mov	r0, r5
 8009066:	f000 fb47 	bl	80096f8 <_sbrk_r>
 800906a:	1c43      	adds	r3, r0, #1
 800906c:	d00a      	beq.n	8009084 <sbrk_aligned+0x34>
 800906e:	1cc4      	adds	r4, r0, #3
 8009070:	f024 0403 	bic.w	r4, r4, #3
 8009074:	42a0      	cmp	r0, r4
 8009076:	d007      	beq.n	8009088 <sbrk_aligned+0x38>
 8009078:	1a21      	subs	r1, r4, r0
 800907a:	4628      	mov	r0, r5
 800907c:	f000 fb3c 	bl	80096f8 <_sbrk_r>
 8009080:	3001      	adds	r0, #1
 8009082:	d101      	bne.n	8009088 <sbrk_aligned+0x38>
 8009084:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009088:	4620      	mov	r0, r4
 800908a:	bd70      	pop	{r4, r5, r6, pc}
 800908c:	20000418 	.word	0x20000418

08009090 <_malloc_r>:
 8009090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009094:	1ccd      	adds	r5, r1, #3
 8009096:	f025 0503 	bic.w	r5, r5, #3
 800909a:	3508      	adds	r5, #8
 800909c:	2d0c      	cmp	r5, #12
 800909e:	bf38      	it	cc
 80090a0:	250c      	movcc	r5, #12
 80090a2:	2d00      	cmp	r5, #0
 80090a4:	4607      	mov	r7, r0
 80090a6:	db01      	blt.n	80090ac <_malloc_r+0x1c>
 80090a8:	42a9      	cmp	r1, r5
 80090aa:	d905      	bls.n	80090b8 <_malloc_r+0x28>
 80090ac:	230c      	movs	r3, #12
 80090ae:	603b      	str	r3, [r7, #0]
 80090b0:	2600      	movs	r6, #0
 80090b2:	4630      	mov	r0, r6
 80090b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090b8:	4e2e      	ldr	r6, [pc, #184]	; (8009174 <_malloc_r+0xe4>)
 80090ba:	f000 fe51 	bl	8009d60 <__malloc_lock>
 80090be:	6833      	ldr	r3, [r6, #0]
 80090c0:	461c      	mov	r4, r3
 80090c2:	bb34      	cbnz	r4, 8009112 <_malloc_r+0x82>
 80090c4:	4629      	mov	r1, r5
 80090c6:	4638      	mov	r0, r7
 80090c8:	f7ff ffc2 	bl	8009050 <sbrk_aligned>
 80090cc:	1c43      	adds	r3, r0, #1
 80090ce:	4604      	mov	r4, r0
 80090d0:	d14d      	bne.n	800916e <_malloc_r+0xde>
 80090d2:	6834      	ldr	r4, [r6, #0]
 80090d4:	4626      	mov	r6, r4
 80090d6:	2e00      	cmp	r6, #0
 80090d8:	d140      	bne.n	800915c <_malloc_r+0xcc>
 80090da:	6823      	ldr	r3, [r4, #0]
 80090dc:	4631      	mov	r1, r6
 80090de:	4638      	mov	r0, r7
 80090e0:	eb04 0803 	add.w	r8, r4, r3
 80090e4:	f000 fb08 	bl	80096f8 <_sbrk_r>
 80090e8:	4580      	cmp	r8, r0
 80090ea:	d13a      	bne.n	8009162 <_malloc_r+0xd2>
 80090ec:	6821      	ldr	r1, [r4, #0]
 80090ee:	3503      	adds	r5, #3
 80090f0:	1a6d      	subs	r5, r5, r1
 80090f2:	f025 0503 	bic.w	r5, r5, #3
 80090f6:	3508      	adds	r5, #8
 80090f8:	2d0c      	cmp	r5, #12
 80090fa:	bf38      	it	cc
 80090fc:	250c      	movcc	r5, #12
 80090fe:	4629      	mov	r1, r5
 8009100:	4638      	mov	r0, r7
 8009102:	f7ff ffa5 	bl	8009050 <sbrk_aligned>
 8009106:	3001      	adds	r0, #1
 8009108:	d02b      	beq.n	8009162 <_malloc_r+0xd2>
 800910a:	6823      	ldr	r3, [r4, #0]
 800910c:	442b      	add	r3, r5
 800910e:	6023      	str	r3, [r4, #0]
 8009110:	e00e      	b.n	8009130 <_malloc_r+0xa0>
 8009112:	6822      	ldr	r2, [r4, #0]
 8009114:	1b52      	subs	r2, r2, r5
 8009116:	d41e      	bmi.n	8009156 <_malloc_r+0xc6>
 8009118:	2a0b      	cmp	r2, #11
 800911a:	d916      	bls.n	800914a <_malloc_r+0xba>
 800911c:	1961      	adds	r1, r4, r5
 800911e:	42a3      	cmp	r3, r4
 8009120:	6025      	str	r5, [r4, #0]
 8009122:	bf18      	it	ne
 8009124:	6059      	strne	r1, [r3, #4]
 8009126:	6863      	ldr	r3, [r4, #4]
 8009128:	bf08      	it	eq
 800912a:	6031      	streq	r1, [r6, #0]
 800912c:	5162      	str	r2, [r4, r5]
 800912e:	604b      	str	r3, [r1, #4]
 8009130:	4638      	mov	r0, r7
 8009132:	f104 060b 	add.w	r6, r4, #11
 8009136:	f000 fe19 	bl	8009d6c <__malloc_unlock>
 800913a:	f026 0607 	bic.w	r6, r6, #7
 800913e:	1d23      	adds	r3, r4, #4
 8009140:	1af2      	subs	r2, r6, r3
 8009142:	d0b6      	beq.n	80090b2 <_malloc_r+0x22>
 8009144:	1b9b      	subs	r3, r3, r6
 8009146:	50a3      	str	r3, [r4, r2]
 8009148:	e7b3      	b.n	80090b2 <_malloc_r+0x22>
 800914a:	6862      	ldr	r2, [r4, #4]
 800914c:	42a3      	cmp	r3, r4
 800914e:	bf0c      	ite	eq
 8009150:	6032      	streq	r2, [r6, #0]
 8009152:	605a      	strne	r2, [r3, #4]
 8009154:	e7ec      	b.n	8009130 <_malloc_r+0xa0>
 8009156:	4623      	mov	r3, r4
 8009158:	6864      	ldr	r4, [r4, #4]
 800915a:	e7b2      	b.n	80090c2 <_malloc_r+0x32>
 800915c:	4634      	mov	r4, r6
 800915e:	6876      	ldr	r6, [r6, #4]
 8009160:	e7b9      	b.n	80090d6 <_malloc_r+0x46>
 8009162:	230c      	movs	r3, #12
 8009164:	603b      	str	r3, [r7, #0]
 8009166:	4638      	mov	r0, r7
 8009168:	f000 fe00 	bl	8009d6c <__malloc_unlock>
 800916c:	e7a1      	b.n	80090b2 <_malloc_r+0x22>
 800916e:	6025      	str	r5, [r4, #0]
 8009170:	e7de      	b.n	8009130 <_malloc_r+0xa0>
 8009172:	bf00      	nop
 8009174:	20000414 	.word	0x20000414

08009178 <__ssputs_r>:
 8009178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800917c:	688e      	ldr	r6, [r1, #8]
 800917e:	429e      	cmp	r6, r3
 8009180:	4682      	mov	sl, r0
 8009182:	460c      	mov	r4, r1
 8009184:	4690      	mov	r8, r2
 8009186:	461f      	mov	r7, r3
 8009188:	d838      	bhi.n	80091fc <__ssputs_r+0x84>
 800918a:	898a      	ldrh	r2, [r1, #12]
 800918c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009190:	d032      	beq.n	80091f8 <__ssputs_r+0x80>
 8009192:	6825      	ldr	r5, [r4, #0]
 8009194:	6909      	ldr	r1, [r1, #16]
 8009196:	eba5 0901 	sub.w	r9, r5, r1
 800919a:	6965      	ldr	r5, [r4, #20]
 800919c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80091a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80091a4:	3301      	adds	r3, #1
 80091a6:	444b      	add	r3, r9
 80091a8:	106d      	asrs	r5, r5, #1
 80091aa:	429d      	cmp	r5, r3
 80091ac:	bf38      	it	cc
 80091ae:	461d      	movcc	r5, r3
 80091b0:	0553      	lsls	r3, r2, #21
 80091b2:	d531      	bpl.n	8009218 <__ssputs_r+0xa0>
 80091b4:	4629      	mov	r1, r5
 80091b6:	f7ff ff6b 	bl	8009090 <_malloc_r>
 80091ba:	4606      	mov	r6, r0
 80091bc:	b950      	cbnz	r0, 80091d4 <__ssputs_r+0x5c>
 80091be:	230c      	movs	r3, #12
 80091c0:	f8ca 3000 	str.w	r3, [sl]
 80091c4:	89a3      	ldrh	r3, [r4, #12]
 80091c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091ca:	81a3      	strh	r3, [r4, #12]
 80091cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091d4:	6921      	ldr	r1, [r4, #16]
 80091d6:	464a      	mov	r2, r9
 80091d8:	f7ff fa08 	bl	80085ec <memcpy>
 80091dc:	89a3      	ldrh	r3, [r4, #12]
 80091de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80091e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091e6:	81a3      	strh	r3, [r4, #12]
 80091e8:	6126      	str	r6, [r4, #16]
 80091ea:	6165      	str	r5, [r4, #20]
 80091ec:	444e      	add	r6, r9
 80091ee:	eba5 0509 	sub.w	r5, r5, r9
 80091f2:	6026      	str	r6, [r4, #0]
 80091f4:	60a5      	str	r5, [r4, #8]
 80091f6:	463e      	mov	r6, r7
 80091f8:	42be      	cmp	r6, r7
 80091fa:	d900      	bls.n	80091fe <__ssputs_r+0x86>
 80091fc:	463e      	mov	r6, r7
 80091fe:	6820      	ldr	r0, [r4, #0]
 8009200:	4632      	mov	r2, r6
 8009202:	4641      	mov	r1, r8
 8009204:	f000 fd92 	bl	8009d2c <memmove>
 8009208:	68a3      	ldr	r3, [r4, #8]
 800920a:	1b9b      	subs	r3, r3, r6
 800920c:	60a3      	str	r3, [r4, #8]
 800920e:	6823      	ldr	r3, [r4, #0]
 8009210:	4433      	add	r3, r6
 8009212:	6023      	str	r3, [r4, #0]
 8009214:	2000      	movs	r0, #0
 8009216:	e7db      	b.n	80091d0 <__ssputs_r+0x58>
 8009218:	462a      	mov	r2, r5
 800921a:	f000 fdad 	bl	8009d78 <_realloc_r>
 800921e:	4606      	mov	r6, r0
 8009220:	2800      	cmp	r0, #0
 8009222:	d1e1      	bne.n	80091e8 <__ssputs_r+0x70>
 8009224:	6921      	ldr	r1, [r4, #16]
 8009226:	4650      	mov	r0, sl
 8009228:	f7ff fec6 	bl	8008fb8 <_free_r>
 800922c:	e7c7      	b.n	80091be <__ssputs_r+0x46>
	...

08009230 <_svfiprintf_r>:
 8009230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009234:	4698      	mov	r8, r3
 8009236:	898b      	ldrh	r3, [r1, #12]
 8009238:	061b      	lsls	r3, r3, #24
 800923a:	b09d      	sub	sp, #116	; 0x74
 800923c:	4607      	mov	r7, r0
 800923e:	460d      	mov	r5, r1
 8009240:	4614      	mov	r4, r2
 8009242:	d50e      	bpl.n	8009262 <_svfiprintf_r+0x32>
 8009244:	690b      	ldr	r3, [r1, #16]
 8009246:	b963      	cbnz	r3, 8009262 <_svfiprintf_r+0x32>
 8009248:	2140      	movs	r1, #64	; 0x40
 800924a:	f7ff ff21 	bl	8009090 <_malloc_r>
 800924e:	6028      	str	r0, [r5, #0]
 8009250:	6128      	str	r0, [r5, #16]
 8009252:	b920      	cbnz	r0, 800925e <_svfiprintf_r+0x2e>
 8009254:	230c      	movs	r3, #12
 8009256:	603b      	str	r3, [r7, #0]
 8009258:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800925c:	e0d1      	b.n	8009402 <_svfiprintf_r+0x1d2>
 800925e:	2340      	movs	r3, #64	; 0x40
 8009260:	616b      	str	r3, [r5, #20]
 8009262:	2300      	movs	r3, #0
 8009264:	9309      	str	r3, [sp, #36]	; 0x24
 8009266:	2320      	movs	r3, #32
 8009268:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800926c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009270:	2330      	movs	r3, #48	; 0x30
 8009272:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800941c <_svfiprintf_r+0x1ec>
 8009276:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800927a:	f04f 0901 	mov.w	r9, #1
 800927e:	4623      	mov	r3, r4
 8009280:	469a      	mov	sl, r3
 8009282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009286:	b10a      	cbz	r2, 800928c <_svfiprintf_r+0x5c>
 8009288:	2a25      	cmp	r2, #37	; 0x25
 800928a:	d1f9      	bne.n	8009280 <_svfiprintf_r+0x50>
 800928c:	ebba 0b04 	subs.w	fp, sl, r4
 8009290:	d00b      	beq.n	80092aa <_svfiprintf_r+0x7a>
 8009292:	465b      	mov	r3, fp
 8009294:	4622      	mov	r2, r4
 8009296:	4629      	mov	r1, r5
 8009298:	4638      	mov	r0, r7
 800929a:	f7ff ff6d 	bl	8009178 <__ssputs_r>
 800929e:	3001      	adds	r0, #1
 80092a0:	f000 80aa 	beq.w	80093f8 <_svfiprintf_r+0x1c8>
 80092a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092a6:	445a      	add	r2, fp
 80092a8:	9209      	str	r2, [sp, #36]	; 0x24
 80092aa:	f89a 3000 	ldrb.w	r3, [sl]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	f000 80a2 	beq.w	80093f8 <_svfiprintf_r+0x1c8>
 80092b4:	2300      	movs	r3, #0
 80092b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80092ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092be:	f10a 0a01 	add.w	sl, sl, #1
 80092c2:	9304      	str	r3, [sp, #16]
 80092c4:	9307      	str	r3, [sp, #28]
 80092c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092ca:	931a      	str	r3, [sp, #104]	; 0x68
 80092cc:	4654      	mov	r4, sl
 80092ce:	2205      	movs	r2, #5
 80092d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092d4:	4851      	ldr	r0, [pc, #324]	; (800941c <_svfiprintf_r+0x1ec>)
 80092d6:	f7f6 ffa3 	bl	8000220 <memchr>
 80092da:	9a04      	ldr	r2, [sp, #16]
 80092dc:	b9d8      	cbnz	r0, 8009316 <_svfiprintf_r+0xe6>
 80092de:	06d0      	lsls	r0, r2, #27
 80092e0:	bf44      	itt	mi
 80092e2:	2320      	movmi	r3, #32
 80092e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092e8:	0711      	lsls	r1, r2, #28
 80092ea:	bf44      	itt	mi
 80092ec:	232b      	movmi	r3, #43	; 0x2b
 80092ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092f2:	f89a 3000 	ldrb.w	r3, [sl]
 80092f6:	2b2a      	cmp	r3, #42	; 0x2a
 80092f8:	d015      	beq.n	8009326 <_svfiprintf_r+0xf6>
 80092fa:	9a07      	ldr	r2, [sp, #28]
 80092fc:	4654      	mov	r4, sl
 80092fe:	2000      	movs	r0, #0
 8009300:	f04f 0c0a 	mov.w	ip, #10
 8009304:	4621      	mov	r1, r4
 8009306:	f811 3b01 	ldrb.w	r3, [r1], #1
 800930a:	3b30      	subs	r3, #48	; 0x30
 800930c:	2b09      	cmp	r3, #9
 800930e:	d94e      	bls.n	80093ae <_svfiprintf_r+0x17e>
 8009310:	b1b0      	cbz	r0, 8009340 <_svfiprintf_r+0x110>
 8009312:	9207      	str	r2, [sp, #28]
 8009314:	e014      	b.n	8009340 <_svfiprintf_r+0x110>
 8009316:	eba0 0308 	sub.w	r3, r0, r8
 800931a:	fa09 f303 	lsl.w	r3, r9, r3
 800931e:	4313      	orrs	r3, r2
 8009320:	9304      	str	r3, [sp, #16]
 8009322:	46a2      	mov	sl, r4
 8009324:	e7d2      	b.n	80092cc <_svfiprintf_r+0x9c>
 8009326:	9b03      	ldr	r3, [sp, #12]
 8009328:	1d19      	adds	r1, r3, #4
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	9103      	str	r1, [sp, #12]
 800932e:	2b00      	cmp	r3, #0
 8009330:	bfbb      	ittet	lt
 8009332:	425b      	neglt	r3, r3
 8009334:	f042 0202 	orrlt.w	r2, r2, #2
 8009338:	9307      	strge	r3, [sp, #28]
 800933a:	9307      	strlt	r3, [sp, #28]
 800933c:	bfb8      	it	lt
 800933e:	9204      	strlt	r2, [sp, #16]
 8009340:	7823      	ldrb	r3, [r4, #0]
 8009342:	2b2e      	cmp	r3, #46	; 0x2e
 8009344:	d10c      	bne.n	8009360 <_svfiprintf_r+0x130>
 8009346:	7863      	ldrb	r3, [r4, #1]
 8009348:	2b2a      	cmp	r3, #42	; 0x2a
 800934a:	d135      	bne.n	80093b8 <_svfiprintf_r+0x188>
 800934c:	9b03      	ldr	r3, [sp, #12]
 800934e:	1d1a      	adds	r2, r3, #4
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	9203      	str	r2, [sp, #12]
 8009354:	2b00      	cmp	r3, #0
 8009356:	bfb8      	it	lt
 8009358:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800935c:	3402      	adds	r4, #2
 800935e:	9305      	str	r3, [sp, #20]
 8009360:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800942c <_svfiprintf_r+0x1fc>
 8009364:	7821      	ldrb	r1, [r4, #0]
 8009366:	2203      	movs	r2, #3
 8009368:	4650      	mov	r0, sl
 800936a:	f7f6 ff59 	bl	8000220 <memchr>
 800936e:	b140      	cbz	r0, 8009382 <_svfiprintf_r+0x152>
 8009370:	2340      	movs	r3, #64	; 0x40
 8009372:	eba0 000a 	sub.w	r0, r0, sl
 8009376:	fa03 f000 	lsl.w	r0, r3, r0
 800937a:	9b04      	ldr	r3, [sp, #16]
 800937c:	4303      	orrs	r3, r0
 800937e:	3401      	adds	r4, #1
 8009380:	9304      	str	r3, [sp, #16]
 8009382:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009386:	4826      	ldr	r0, [pc, #152]	; (8009420 <_svfiprintf_r+0x1f0>)
 8009388:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800938c:	2206      	movs	r2, #6
 800938e:	f7f6 ff47 	bl	8000220 <memchr>
 8009392:	2800      	cmp	r0, #0
 8009394:	d038      	beq.n	8009408 <_svfiprintf_r+0x1d8>
 8009396:	4b23      	ldr	r3, [pc, #140]	; (8009424 <_svfiprintf_r+0x1f4>)
 8009398:	bb1b      	cbnz	r3, 80093e2 <_svfiprintf_r+0x1b2>
 800939a:	9b03      	ldr	r3, [sp, #12]
 800939c:	3307      	adds	r3, #7
 800939e:	f023 0307 	bic.w	r3, r3, #7
 80093a2:	3308      	adds	r3, #8
 80093a4:	9303      	str	r3, [sp, #12]
 80093a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093a8:	4433      	add	r3, r6
 80093aa:	9309      	str	r3, [sp, #36]	; 0x24
 80093ac:	e767      	b.n	800927e <_svfiprintf_r+0x4e>
 80093ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80093b2:	460c      	mov	r4, r1
 80093b4:	2001      	movs	r0, #1
 80093b6:	e7a5      	b.n	8009304 <_svfiprintf_r+0xd4>
 80093b8:	2300      	movs	r3, #0
 80093ba:	3401      	adds	r4, #1
 80093bc:	9305      	str	r3, [sp, #20]
 80093be:	4619      	mov	r1, r3
 80093c0:	f04f 0c0a 	mov.w	ip, #10
 80093c4:	4620      	mov	r0, r4
 80093c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093ca:	3a30      	subs	r2, #48	; 0x30
 80093cc:	2a09      	cmp	r2, #9
 80093ce:	d903      	bls.n	80093d8 <_svfiprintf_r+0x1a8>
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d0c5      	beq.n	8009360 <_svfiprintf_r+0x130>
 80093d4:	9105      	str	r1, [sp, #20]
 80093d6:	e7c3      	b.n	8009360 <_svfiprintf_r+0x130>
 80093d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80093dc:	4604      	mov	r4, r0
 80093de:	2301      	movs	r3, #1
 80093e0:	e7f0      	b.n	80093c4 <_svfiprintf_r+0x194>
 80093e2:	ab03      	add	r3, sp, #12
 80093e4:	9300      	str	r3, [sp, #0]
 80093e6:	462a      	mov	r2, r5
 80093e8:	4b0f      	ldr	r3, [pc, #60]	; (8009428 <_svfiprintf_r+0x1f8>)
 80093ea:	a904      	add	r1, sp, #16
 80093ec:	4638      	mov	r0, r7
 80093ee:	f7fc f9d9 	bl	80057a4 <_printf_float>
 80093f2:	1c42      	adds	r2, r0, #1
 80093f4:	4606      	mov	r6, r0
 80093f6:	d1d6      	bne.n	80093a6 <_svfiprintf_r+0x176>
 80093f8:	89ab      	ldrh	r3, [r5, #12]
 80093fa:	065b      	lsls	r3, r3, #25
 80093fc:	f53f af2c 	bmi.w	8009258 <_svfiprintf_r+0x28>
 8009400:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009402:	b01d      	add	sp, #116	; 0x74
 8009404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009408:	ab03      	add	r3, sp, #12
 800940a:	9300      	str	r3, [sp, #0]
 800940c:	462a      	mov	r2, r5
 800940e:	4b06      	ldr	r3, [pc, #24]	; (8009428 <_svfiprintf_r+0x1f8>)
 8009410:	a904      	add	r1, sp, #16
 8009412:	4638      	mov	r0, r7
 8009414:	f7fc fc6a 	bl	8005cec <_printf_i>
 8009418:	e7eb      	b.n	80093f2 <_svfiprintf_r+0x1c2>
 800941a:	bf00      	nop
 800941c:	0800a68c 	.word	0x0800a68c
 8009420:	0800a696 	.word	0x0800a696
 8009424:	080057a5 	.word	0x080057a5
 8009428:	08009179 	.word	0x08009179
 800942c:	0800a692 	.word	0x0800a692

08009430 <__sfputc_r>:
 8009430:	6893      	ldr	r3, [r2, #8]
 8009432:	3b01      	subs	r3, #1
 8009434:	2b00      	cmp	r3, #0
 8009436:	b410      	push	{r4}
 8009438:	6093      	str	r3, [r2, #8]
 800943a:	da08      	bge.n	800944e <__sfputc_r+0x1e>
 800943c:	6994      	ldr	r4, [r2, #24]
 800943e:	42a3      	cmp	r3, r4
 8009440:	db01      	blt.n	8009446 <__sfputc_r+0x16>
 8009442:	290a      	cmp	r1, #10
 8009444:	d103      	bne.n	800944e <__sfputc_r+0x1e>
 8009446:	f85d 4b04 	ldr.w	r4, [sp], #4
 800944a:	f000 b979 	b.w	8009740 <__swbuf_r>
 800944e:	6813      	ldr	r3, [r2, #0]
 8009450:	1c58      	adds	r0, r3, #1
 8009452:	6010      	str	r0, [r2, #0]
 8009454:	7019      	strb	r1, [r3, #0]
 8009456:	4608      	mov	r0, r1
 8009458:	f85d 4b04 	ldr.w	r4, [sp], #4
 800945c:	4770      	bx	lr

0800945e <__sfputs_r>:
 800945e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009460:	4606      	mov	r6, r0
 8009462:	460f      	mov	r7, r1
 8009464:	4614      	mov	r4, r2
 8009466:	18d5      	adds	r5, r2, r3
 8009468:	42ac      	cmp	r4, r5
 800946a:	d101      	bne.n	8009470 <__sfputs_r+0x12>
 800946c:	2000      	movs	r0, #0
 800946e:	e007      	b.n	8009480 <__sfputs_r+0x22>
 8009470:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009474:	463a      	mov	r2, r7
 8009476:	4630      	mov	r0, r6
 8009478:	f7ff ffda 	bl	8009430 <__sfputc_r>
 800947c:	1c43      	adds	r3, r0, #1
 800947e:	d1f3      	bne.n	8009468 <__sfputs_r+0xa>
 8009480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009484 <_vfiprintf_r>:
 8009484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009488:	460d      	mov	r5, r1
 800948a:	b09d      	sub	sp, #116	; 0x74
 800948c:	4614      	mov	r4, r2
 800948e:	4698      	mov	r8, r3
 8009490:	4606      	mov	r6, r0
 8009492:	b118      	cbz	r0, 800949c <_vfiprintf_r+0x18>
 8009494:	6983      	ldr	r3, [r0, #24]
 8009496:	b90b      	cbnz	r3, 800949c <_vfiprintf_r+0x18>
 8009498:	f000 fb42 	bl	8009b20 <__sinit>
 800949c:	4b89      	ldr	r3, [pc, #548]	; (80096c4 <_vfiprintf_r+0x240>)
 800949e:	429d      	cmp	r5, r3
 80094a0:	d11b      	bne.n	80094da <_vfiprintf_r+0x56>
 80094a2:	6875      	ldr	r5, [r6, #4]
 80094a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094a6:	07d9      	lsls	r1, r3, #31
 80094a8:	d405      	bmi.n	80094b6 <_vfiprintf_r+0x32>
 80094aa:	89ab      	ldrh	r3, [r5, #12]
 80094ac:	059a      	lsls	r2, r3, #22
 80094ae:	d402      	bmi.n	80094b6 <_vfiprintf_r+0x32>
 80094b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094b2:	f000 fbd3 	bl	8009c5c <__retarget_lock_acquire_recursive>
 80094b6:	89ab      	ldrh	r3, [r5, #12]
 80094b8:	071b      	lsls	r3, r3, #28
 80094ba:	d501      	bpl.n	80094c0 <_vfiprintf_r+0x3c>
 80094bc:	692b      	ldr	r3, [r5, #16]
 80094be:	b9eb      	cbnz	r3, 80094fc <_vfiprintf_r+0x78>
 80094c0:	4629      	mov	r1, r5
 80094c2:	4630      	mov	r0, r6
 80094c4:	f000 f99c 	bl	8009800 <__swsetup_r>
 80094c8:	b1c0      	cbz	r0, 80094fc <_vfiprintf_r+0x78>
 80094ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094cc:	07dc      	lsls	r4, r3, #31
 80094ce:	d50e      	bpl.n	80094ee <_vfiprintf_r+0x6a>
 80094d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094d4:	b01d      	add	sp, #116	; 0x74
 80094d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094da:	4b7b      	ldr	r3, [pc, #492]	; (80096c8 <_vfiprintf_r+0x244>)
 80094dc:	429d      	cmp	r5, r3
 80094de:	d101      	bne.n	80094e4 <_vfiprintf_r+0x60>
 80094e0:	68b5      	ldr	r5, [r6, #8]
 80094e2:	e7df      	b.n	80094a4 <_vfiprintf_r+0x20>
 80094e4:	4b79      	ldr	r3, [pc, #484]	; (80096cc <_vfiprintf_r+0x248>)
 80094e6:	429d      	cmp	r5, r3
 80094e8:	bf08      	it	eq
 80094ea:	68f5      	ldreq	r5, [r6, #12]
 80094ec:	e7da      	b.n	80094a4 <_vfiprintf_r+0x20>
 80094ee:	89ab      	ldrh	r3, [r5, #12]
 80094f0:	0598      	lsls	r0, r3, #22
 80094f2:	d4ed      	bmi.n	80094d0 <_vfiprintf_r+0x4c>
 80094f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094f6:	f000 fbb2 	bl	8009c5e <__retarget_lock_release_recursive>
 80094fa:	e7e9      	b.n	80094d0 <_vfiprintf_r+0x4c>
 80094fc:	2300      	movs	r3, #0
 80094fe:	9309      	str	r3, [sp, #36]	; 0x24
 8009500:	2320      	movs	r3, #32
 8009502:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009506:	f8cd 800c 	str.w	r8, [sp, #12]
 800950a:	2330      	movs	r3, #48	; 0x30
 800950c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80096d0 <_vfiprintf_r+0x24c>
 8009510:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009514:	f04f 0901 	mov.w	r9, #1
 8009518:	4623      	mov	r3, r4
 800951a:	469a      	mov	sl, r3
 800951c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009520:	b10a      	cbz	r2, 8009526 <_vfiprintf_r+0xa2>
 8009522:	2a25      	cmp	r2, #37	; 0x25
 8009524:	d1f9      	bne.n	800951a <_vfiprintf_r+0x96>
 8009526:	ebba 0b04 	subs.w	fp, sl, r4
 800952a:	d00b      	beq.n	8009544 <_vfiprintf_r+0xc0>
 800952c:	465b      	mov	r3, fp
 800952e:	4622      	mov	r2, r4
 8009530:	4629      	mov	r1, r5
 8009532:	4630      	mov	r0, r6
 8009534:	f7ff ff93 	bl	800945e <__sfputs_r>
 8009538:	3001      	adds	r0, #1
 800953a:	f000 80aa 	beq.w	8009692 <_vfiprintf_r+0x20e>
 800953e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009540:	445a      	add	r2, fp
 8009542:	9209      	str	r2, [sp, #36]	; 0x24
 8009544:	f89a 3000 	ldrb.w	r3, [sl]
 8009548:	2b00      	cmp	r3, #0
 800954a:	f000 80a2 	beq.w	8009692 <_vfiprintf_r+0x20e>
 800954e:	2300      	movs	r3, #0
 8009550:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009554:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009558:	f10a 0a01 	add.w	sl, sl, #1
 800955c:	9304      	str	r3, [sp, #16]
 800955e:	9307      	str	r3, [sp, #28]
 8009560:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009564:	931a      	str	r3, [sp, #104]	; 0x68
 8009566:	4654      	mov	r4, sl
 8009568:	2205      	movs	r2, #5
 800956a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800956e:	4858      	ldr	r0, [pc, #352]	; (80096d0 <_vfiprintf_r+0x24c>)
 8009570:	f7f6 fe56 	bl	8000220 <memchr>
 8009574:	9a04      	ldr	r2, [sp, #16]
 8009576:	b9d8      	cbnz	r0, 80095b0 <_vfiprintf_r+0x12c>
 8009578:	06d1      	lsls	r1, r2, #27
 800957a:	bf44      	itt	mi
 800957c:	2320      	movmi	r3, #32
 800957e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009582:	0713      	lsls	r3, r2, #28
 8009584:	bf44      	itt	mi
 8009586:	232b      	movmi	r3, #43	; 0x2b
 8009588:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800958c:	f89a 3000 	ldrb.w	r3, [sl]
 8009590:	2b2a      	cmp	r3, #42	; 0x2a
 8009592:	d015      	beq.n	80095c0 <_vfiprintf_r+0x13c>
 8009594:	9a07      	ldr	r2, [sp, #28]
 8009596:	4654      	mov	r4, sl
 8009598:	2000      	movs	r0, #0
 800959a:	f04f 0c0a 	mov.w	ip, #10
 800959e:	4621      	mov	r1, r4
 80095a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095a4:	3b30      	subs	r3, #48	; 0x30
 80095a6:	2b09      	cmp	r3, #9
 80095a8:	d94e      	bls.n	8009648 <_vfiprintf_r+0x1c4>
 80095aa:	b1b0      	cbz	r0, 80095da <_vfiprintf_r+0x156>
 80095ac:	9207      	str	r2, [sp, #28]
 80095ae:	e014      	b.n	80095da <_vfiprintf_r+0x156>
 80095b0:	eba0 0308 	sub.w	r3, r0, r8
 80095b4:	fa09 f303 	lsl.w	r3, r9, r3
 80095b8:	4313      	orrs	r3, r2
 80095ba:	9304      	str	r3, [sp, #16]
 80095bc:	46a2      	mov	sl, r4
 80095be:	e7d2      	b.n	8009566 <_vfiprintf_r+0xe2>
 80095c0:	9b03      	ldr	r3, [sp, #12]
 80095c2:	1d19      	adds	r1, r3, #4
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	9103      	str	r1, [sp, #12]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	bfbb      	ittet	lt
 80095cc:	425b      	neglt	r3, r3
 80095ce:	f042 0202 	orrlt.w	r2, r2, #2
 80095d2:	9307      	strge	r3, [sp, #28]
 80095d4:	9307      	strlt	r3, [sp, #28]
 80095d6:	bfb8      	it	lt
 80095d8:	9204      	strlt	r2, [sp, #16]
 80095da:	7823      	ldrb	r3, [r4, #0]
 80095dc:	2b2e      	cmp	r3, #46	; 0x2e
 80095de:	d10c      	bne.n	80095fa <_vfiprintf_r+0x176>
 80095e0:	7863      	ldrb	r3, [r4, #1]
 80095e2:	2b2a      	cmp	r3, #42	; 0x2a
 80095e4:	d135      	bne.n	8009652 <_vfiprintf_r+0x1ce>
 80095e6:	9b03      	ldr	r3, [sp, #12]
 80095e8:	1d1a      	adds	r2, r3, #4
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	9203      	str	r2, [sp, #12]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	bfb8      	it	lt
 80095f2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80095f6:	3402      	adds	r4, #2
 80095f8:	9305      	str	r3, [sp, #20]
 80095fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80096e0 <_vfiprintf_r+0x25c>
 80095fe:	7821      	ldrb	r1, [r4, #0]
 8009600:	2203      	movs	r2, #3
 8009602:	4650      	mov	r0, sl
 8009604:	f7f6 fe0c 	bl	8000220 <memchr>
 8009608:	b140      	cbz	r0, 800961c <_vfiprintf_r+0x198>
 800960a:	2340      	movs	r3, #64	; 0x40
 800960c:	eba0 000a 	sub.w	r0, r0, sl
 8009610:	fa03 f000 	lsl.w	r0, r3, r0
 8009614:	9b04      	ldr	r3, [sp, #16]
 8009616:	4303      	orrs	r3, r0
 8009618:	3401      	adds	r4, #1
 800961a:	9304      	str	r3, [sp, #16]
 800961c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009620:	482c      	ldr	r0, [pc, #176]	; (80096d4 <_vfiprintf_r+0x250>)
 8009622:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009626:	2206      	movs	r2, #6
 8009628:	f7f6 fdfa 	bl	8000220 <memchr>
 800962c:	2800      	cmp	r0, #0
 800962e:	d03f      	beq.n	80096b0 <_vfiprintf_r+0x22c>
 8009630:	4b29      	ldr	r3, [pc, #164]	; (80096d8 <_vfiprintf_r+0x254>)
 8009632:	bb1b      	cbnz	r3, 800967c <_vfiprintf_r+0x1f8>
 8009634:	9b03      	ldr	r3, [sp, #12]
 8009636:	3307      	adds	r3, #7
 8009638:	f023 0307 	bic.w	r3, r3, #7
 800963c:	3308      	adds	r3, #8
 800963e:	9303      	str	r3, [sp, #12]
 8009640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009642:	443b      	add	r3, r7
 8009644:	9309      	str	r3, [sp, #36]	; 0x24
 8009646:	e767      	b.n	8009518 <_vfiprintf_r+0x94>
 8009648:	fb0c 3202 	mla	r2, ip, r2, r3
 800964c:	460c      	mov	r4, r1
 800964e:	2001      	movs	r0, #1
 8009650:	e7a5      	b.n	800959e <_vfiprintf_r+0x11a>
 8009652:	2300      	movs	r3, #0
 8009654:	3401      	adds	r4, #1
 8009656:	9305      	str	r3, [sp, #20]
 8009658:	4619      	mov	r1, r3
 800965a:	f04f 0c0a 	mov.w	ip, #10
 800965e:	4620      	mov	r0, r4
 8009660:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009664:	3a30      	subs	r2, #48	; 0x30
 8009666:	2a09      	cmp	r2, #9
 8009668:	d903      	bls.n	8009672 <_vfiprintf_r+0x1ee>
 800966a:	2b00      	cmp	r3, #0
 800966c:	d0c5      	beq.n	80095fa <_vfiprintf_r+0x176>
 800966e:	9105      	str	r1, [sp, #20]
 8009670:	e7c3      	b.n	80095fa <_vfiprintf_r+0x176>
 8009672:	fb0c 2101 	mla	r1, ip, r1, r2
 8009676:	4604      	mov	r4, r0
 8009678:	2301      	movs	r3, #1
 800967a:	e7f0      	b.n	800965e <_vfiprintf_r+0x1da>
 800967c:	ab03      	add	r3, sp, #12
 800967e:	9300      	str	r3, [sp, #0]
 8009680:	462a      	mov	r2, r5
 8009682:	4b16      	ldr	r3, [pc, #88]	; (80096dc <_vfiprintf_r+0x258>)
 8009684:	a904      	add	r1, sp, #16
 8009686:	4630      	mov	r0, r6
 8009688:	f7fc f88c 	bl	80057a4 <_printf_float>
 800968c:	4607      	mov	r7, r0
 800968e:	1c78      	adds	r0, r7, #1
 8009690:	d1d6      	bne.n	8009640 <_vfiprintf_r+0x1bc>
 8009692:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009694:	07d9      	lsls	r1, r3, #31
 8009696:	d405      	bmi.n	80096a4 <_vfiprintf_r+0x220>
 8009698:	89ab      	ldrh	r3, [r5, #12]
 800969a:	059a      	lsls	r2, r3, #22
 800969c:	d402      	bmi.n	80096a4 <_vfiprintf_r+0x220>
 800969e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096a0:	f000 fadd 	bl	8009c5e <__retarget_lock_release_recursive>
 80096a4:	89ab      	ldrh	r3, [r5, #12]
 80096a6:	065b      	lsls	r3, r3, #25
 80096a8:	f53f af12 	bmi.w	80094d0 <_vfiprintf_r+0x4c>
 80096ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096ae:	e711      	b.n	80094d4 <_vfiprintf_r+0x50>
 80096b0:	ab03      	add	r3, sp, #12
 80096b2:	9300      	str	r3, [sp, #0]
 80096b4:	462a      	mov	r2, r5
 80096b6:	4b09      	ldr	r3, [pc, #36]	; (80096dc <_vfiprintf_r+0x258>)
 80096b8:	a904      	add	r1, sp, #16
 80096ba:	4630      	mov	r0, r6
 80096bc:	f7fc fb16 	bl	8005cec <_printf_i>
 80096c0:	e7e4      	b.n	800968c <_vfiprintf_r+0x208>
 80096c2:	bf00      	nop
 80096c4:	0800a6c0 	.word	0x0800a6c0
 80096c8:	0800a6e0 	.word	0x0800a6e0
 80096cc:	0800a6a0 	.word	0x0800a6a0
 80096d0:	0800a68c 	.word	0x0800a68c
 80096d4:	0800a696 	.word	0x0800a696
 80096d8:	080057a5 	.word	0x080057a5
 80096dc:	0800945f 	.word	0x0800945f
 80096e0:	0800a692 	.word	0x0800a692
 80096e4:	00000000 	.word	0x00000000

080096e8 <nan>:
 80096e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80096f0 <nan+0x8>
 80096ec:	4770      	bx	lr
 80096ee:	bf00      	nop
 80096f0:	00000000 	.word	0x00000000
 80096f4:	7ff80000 	.word	0x7ff80000

080096f8 <_sbrk_r>:
 80096f8:	b538      	push	{r3, r4, r5, lr}
 80096fa:	4d06      	ldr	r5, [pc, #24]	; (8009714 <_sbrk_r+0x1c>)
 80096fc:	2300      	movs	r3, #0
 80096fe:	4604      	mov	r4, r0
 8009700:	4608      	mov	r0, r1
 8009702:	602b      	str	r3, [r5, #0]
 8009704:	f7f9 fbd2 	bl	8002eac <_sbrk>
 8009708:	1c43      	adds	r3, r0, #1
 800970a:	d102      	bne.n	8009712 <_sbrk_r+0x1a>
 800970c:	682b      	ldr	r3, [r5, #0]
 800970e:	b103      	cbz	r3, 8009712 <_sbrk_r+0x1a>
 8009710:	6023      	str	r3, [r4, #0]
 8009712:	bd38      	pop	{r3, r4, r5, pc}
 8009714:	20000420 	.word	0x20000420

08009718 <strncmp>:
 8009718:	b510      	push	{r4, lr}
 800971a:	b17a      	cbz	r2, 800973c <strncmp+0x24>
 800971c:	4603      	mov	r3, r0
 800971e:	3901      	subs	r1, #1
 8009720:	1884      	adds	r4, r0, r2
 8009722:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009726:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800972a:	4290      	cmp	r0, r2
 800972c:	d101      	bne.n	8009732 <strncmp+0x1a>
 800972e:	42a3      	cmp	r3, r4
 8009730:	d101      	bne.n	8009736 <strncmp+0x1e>
 8009732:	1a80      	subs	r0, r0, r2
 8009734:	bd10      	pop	{r4, pc}
 8009736:	2800      	cmp	r0, #0
 8009738:	d1f3      	bne.n	8009722 <strncmp+0xa>
 800973a:	e7fa      	b.n	8009732 <strncmp+0x1a>
 800973c:	4610      	mov	r0, r2
 800973e:	e7f9      	b.n	8009734 <strncmp+0x1c>

08009740 <__swbuf_r>:
 8009740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009742:	460e      	mov	r6, r1
 8009744:	4614      	mov	r4, r2
 8009746:	4605      	mov	r5, r0
 8009748:	b118      	cbz	r0, 8009752 <__swbuf_r+0x12>
 800974a:	6983      	ldr	r3, [r0, #24]
 800974c:	b90b      	cbnz	r3, 8009752 <__swbuf_r+0x12>
 800974e:	f000 f9e7 	bl	8009b20 <__sinit>
 8009752:	4b21      	ldr	r3, [pc, #132]	; (80097d8 <__swbuf_r+0x98>)
 8009754:	429c      	cmp	r4, r3
 8009756:	d12b      	bne.n	80097b0 <__swbuf_r+0x70>
 8009758:	686c      	ldr	r4, [r5, #4]
 800975a:	69a3      	ldr	r3, [r4, #24]
 800975c:	60a3      	str	r3, [r4, #8]
 800975e:	89a3      	ldrh	r3, [r4, #12]
 8009760:	071a      	lsls	r2, r3, #28
 8009762:	d52f      	bpl.n	80097c4 <__swbuf_r+0x84>
 8009764:	6923      	ldr	r3, [r4, #16]
 8009766:	b36b      	cbz	r3, 80097c4 <__swbuf_r+0x84>
 8009768:	6923      	ldr	r3, [r4, #16]
 800976a:	6820      	ldr	r0, [r4, #0]
 800976c:	1ac0      	subs	r0, r0, r3
 800976e:	6963      	ldr	r3, [r4, #20]
 8009770:	b2f6      	uxtb	r6, r6
 8009772:	4283      	cmp	r3, r0
 8009774:	4637      	mov	r7, r6
 8009776:	dc04      	bgt.n	8009782 <__swbuf_r+0x42>
 8009778:	4621      	mov	r1, r4
 800977a:	4628      	mov	r0, r5
 800977c:	f000 f93c 	bl	80099f8 <_fflush_r>
 8009780:	bb30      	cbnz	r0, 80097d0 <__swbuf_r+0x90>
 8009782:	68a3      	ldr	r3, [r4, #8]
 8009784:	3b01      	subs	r3, #1
 8009786:	60a3      	str	r3, [r4, #8]
 8009788:	6823      	ldr	r3, [r4, #0]
 800978a:	1c5a      	adds	r2, r3, #1
 800978c:	6022      	str	r2, [r4, #0]
 800978e:	701e      	strb	r6, [r3, #0]
 8009790:	6963      	ldr	r3, [r4, #20]
 8009792:	3001      	adds	r0, #1
 8009794:	4283      	cmp	r3, r0
 8009796:	d004      	beq.n	80097a2 <__swbuf_r+0x62>
 8009798:	89a3      	ldrh	r3, [r4, #12]
 800979a:	07db      	lsls	r3, r3, #31
 800979c:	d506      	bpl.n	80097ac <__swbuf_r+0x6c>
 800979e:	2e0a      	cmp	r6, #10
 80097a0:	d104      	bne.n	80097ac <__swbuf_r+0x6c>
 80097a2:	4621      	mov	r1, r4
 80097a4:	4628      	mov	r0, r5
 80097a6:	f000 f927 	bl	80099f8 <_fflush_r>
 80097aa:	b988      	cbnz	r0, 80097d0 <__swbuf_r+0x90>
 80097ac:	4638      	mov	r0, r7
 80097ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097b0:	4b0a      	ldr	r3, [pc, #40]	; (80097dc <__swbuf_r+0x9c>)
 80097b2:	429c      	cmp	r4, r3
 80097b4:	d101      	bne.n	80097ba <__swbuf_r+0x7a>
 80097b6:	68ac      	ldr	r4, [r5, #8]
 80097b8:	e7cf      	b.n	800975a <__swbuf_r+0x1a>
 80097ba:	4b09      	ldr	r3, [pc, #36]	; (80097e0 <__swbuf_r+0xa0>)
 80097bc:	429c      	cmp	r4, r3
 80097be:	bf08      	it	eq
 80097c0:	68ec      	ldreq	r4, [r5, #12]
 80097c2:	e7ca      	b.n	800975a <__swbuf_r+0x1a>
 80097c4:	4621      	mov	r1, r4
 80097c6:	4628      	mov	r0, r5
 80097c8:	f000 f81a 	bl	8009800 <__swsetup_r>
 80097cc:	2800      	cmp	r0, #0
 80097ce:	d0cb      	beq.n	8009768 <__swbuf_r+0x28>
 80097d0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80097d4:	e7ea      	b.n	80097ac <__swbuf_r+0x6c>
 80097d6:	bf00      	nop
 80097d8:	0800a6c0 	.word	0x0800a6c0
 80097dc:	0800a6e0 	.word	0x0800a6e0
 80097e0:	0800a6a0 	.word	0x0800a6a0

080097e4 <__ascii_wctomb>:
 80097e4:	b149      	cbz	r1, 80097fa <__ascii_wctomb+0x16>
 80097e6:	2aff      	cmp	r2, #255	; 0xff
 80097e8:	bf85      	ittet	hi
 80097ea:	238a      	movhi	r3, #138	; 0x8a
 80097ec:	6003      	strhi	r3, [r0, #0]
 80097ee:	700a      	strbls	r2, [r1, #0]
 80097f0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80097f4:	bf98      	it	ls
 80097f6:	2001      	movls	r0, #1
 80097f8:	4770      	bx	lr
 80097fa:	4608      	mov	r0, r1
 80097fc:	4770      	bx	lr
	...

08009800 <__swsetup_r>:
 8009800:	4b32      	ldr	r3, [pc, #200]	; (80098cc <__swsetup_r+0xcc>)
 8009802:	b570      	push	{r4, r5, r6, lr}
 8009804:	681d      	ldr	r5, [r3, #0]
 8009806:	4606      	mov	r6, r0
 8009808:	460c      	mov	r4, r1
 800980a:	b125      	cbz	r5, 8009816 <__swsetup_r+0x16>
 800980c:	69ab      	ldr	r3, [r5, #24]
 800980e:	b913      	cbnz	r3, 8009816 <__swsetup_r+0x16>
 8009810:	4628      	mov	r0, r5
 8009812:	f000 f985 	bl	8009b20 <__sinit>
 8009816:	4b2e      	ldr	r3, [pc, #184]	; (80098d0 <__swsetup_r+0xd0>)
 8009818:	429c      	cmp	r4, r3
 800981a:	d10f      	bne.n	800983c <__swsetup_r+0x3c>
 800981c:	686c      	ldr	r4, [r5, #4]
 800981e:	89a3      	ldrh	r3, [r4, #12]
 8009820:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009824:	0719      	lsls	r1, r3, #28
 8009826:	d42c      	bmi.n	8009882 <__swsetup_r+0x82>
 8009828:	06dd      	lsls	r5, r3, #27
 800982a:	d411      	bmi.n	8009850 <__swsetup_r+0x50>
 800982c:	2309      	movs	r3, #9
 800982e:	6033      	str	r3, [r6, #0]
 8009830:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009834:	81a3      	strh	r3, [r4, #12]
 8009836:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800983a:	e03e      	b.n	80098ba <__swsetup_r+0xba>
 800983c:	4b25      	ldr	r3, [pc, #148]	; (80098d4 <__swsetup_r+0xd4>)
 800983e:	429c      	cmp	r4, r3
 8009840:	d101      	bne.n	8009846 <__swsetup_r+0x46>
 8009842:	68ac      	ldr	r4, [r5, #8]
 8009844:	e7eb      	b.n	800981e <__swsetup_r+0x1e>
 8009846:	4b24      	ldr	r3, [pc, #144]	; (80098d8 <__swsetup_r+0xd8>)
 8009848:	429c      	cmp	r4, r3
 800984a:	bf08      	it	eq
 800984c:	68ec      	ldreq	r4, [r5, #12]
 800984e:	e7e6      	b.n	800981e <__swsetup_r+0x1e>
 8009850:	0758      	lsls	r0, r3, #29
 8009852:	d512      	bpl.n	800987a <__swsetup_r+0x7a>
 8009854:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009856:	b141      	cbz	r1, 800986a <__swsetup_r+0x6a>
 8009858:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800985c:	4299      	cmp	r1, r3
 800985e:	d002      	beq.n	8009866 <__swsetup_r+0x66>
 8009860:	4630      	mov	r0, r6
 8009862:	f7ff fba9 	bl	8008fb8 <_free_r>
 8009866:	2300      	movs	r3, #0
 8009868:	6363      	str	r3, [r4, #52]	; 0x34
 800986a:	89a3      	ldrh	r3, [r4, #12]
 800986c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009870:	81a3      	strh	r3, [r4, #12]
 8009872:	2300      	movs	r3, #0
 8009874:	6063      	str	r3, [r4, #4]
 8009876:	6923      	ldr	r3, [r4, #16]
 8009878:	6023      	str	r3, [r4, #0]
 800987a:	89a3      	ldrh	r3, [r4, #12]
 800987c:	f043 0308 	orr.w	r3, r3, #8
 8009880:	81a3      	strh	r3, [r4, #12]
 8009882:	6923      	ldr	r3, [r4, #16]
 8009884:	b94b      	cbnz	r3, 800989a <__swsetup_r+0x9a>
 8009886:	89a3      	ldrh	r3, [r4, #12]
 8009888:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800988c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009890:	d003      	beq.n	800989a <__swsetup_r+0x9a>
 8009892:	4621      	mov	r1, r4
 8009894:	4630      	mov	r0, r6
 8009896:	f000 fa09 	bl	8009cac <__smakebuf_r>
 800989a:	89a0      	ldrh	r0, [r4, #12]
 800989c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80098a0:	f010 0301 	ands.w	r3, r0, #1
 80098a4:	d00a      	beq.n	80098bc <__swsetup_r+0xbc>
 80098a6:	2300      	movs	r3, #0
 80098a8:	60a3      	str	r3, [r4, #8]
 80098aa:	6963      	ldr	r3, [r4, #20]
 80098ac:	425b      	negs	r3, r3
 80098ae:	61a3      	str	r3, [r4, #24]
 80098b0:	6923      	ldr	r3, [r4, #16]
 80098b2:	b943      	cbnz	r3, 80098c6 <__swsetup_r+0xc6>
 80098b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80098b8:	d1ba      	bne.n	8009830 <__swsetup_r+0x30>
 80098ba:	bd70      	pop	{r4, r5, r6, pc}
 80098bc:	0781      	lsls	r1, r0, #30
 80098be:	bf58      	it	pl
 80098c0:	6963      	ldrpl	r3, [r4, #20]
 80098c2:	60a3      	str	r3, [r4, #8]
 80098c4:	e7f4      	b.n	80098b0 <__swsetup_r+0xb0>
 80098c6:	2000      	movs	r0, #0
 80098c8:	e7f7      	b.n	80098ba <__swsetup_r+0xba>
 80098ca:	bf00      	nop
 80098cc:	20000010 	.word	0x20000010
 80098d0:	0800a6c0 	.word	0x0800a6c0
 80098d4:	0800a6e0 	.word	0x0800a6e0
 80098d8:	0800a6a0 	.word	0x0800a6a0

080098dc <abort>:
 80098dc:	b508      	push	{r3, lr}
 80098de:	2006      	movs	r0, #6
 80098e0:	f000 faa2 	bl	8009e28 <raise>
 80098e4:	2001      	movs	r0, #1
 80098e6:	f7f9 fa69 	bl	8002dbc <_exit>
	...

080098ec <__sflush_r>:
 80098ec:	898a      	ldrh	r2, [r1, #12]
 80098ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098f2:	4605      	mov	r5, r0
 80098f4:	0710      	lsls	r0, r2, #28
 80098f6:	460c      	mov	r4, r1
 80098f8:	d458      	bmi.n	80099ac <__sflush_r+0xc0>
 80098fa:	684b      	ldr	r3, [r1, #4]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	dc05      	bgt.n	800990c <__sflush_r+0x20>
 8009900:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009902:	2b00      	cmp	r3, #0
 8009904:	dc02      	bgt.n	800990c <__sflush_r+0x20>
 8009906:	2000      	movs	r0, #0
 8009908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800990c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800990e:	2e00      	cmp	r6, #0
 8009910:	d0f9      	beq.n	8009906 <__sflush_r+0x1a>
 8009912:	2300      	movs	r3, #0
 8009914:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009918:	682f      	ldr	r7, [r5, #0]
 800991a:	602b      	str	r3, [r5, #0]
 800991c:	d032      	beq.n	8009984 <__sflush_r+0x98>
 800991e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009920:	89a3      	ldrh	r3, [r4, #12]
 8009922:	075a      	lsls	r2, r3, #29
 8009924:	d505      	bpl.n	8009932 <__sflush_r+0x46>
 8009926:	6863      	ldr	r3, [r4, #4]
 8009928:	1ac0      	subs	r0, r0, r3
 800992a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800992c:	b10b      	cbz	r3, 8009932 <__sflush_r+0x46>
 800992e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009930:	1ac0      	subs	r0, r0, r3
 8009932:	2300      	movs	r3, #0
 8009934:	4602      	mov	r2, r0
 8009936:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009938:	6a21      	ldr	r1, [r4, #32]
 800993a:	4628      	mov	r0, r5
 800993c:	47b0      	blx	r6
 800993e:	1c43      	adds	r3, r0, #1
 8009940:	89a3      	ldrh	r3, [r4, #12]
 8009942:	d106      	bne.n	8009952 <__sflush_r+0x66>
 8009944:	6829      	ldr	r1, [r5, #0]
 8009946:	291d      	cmp	r1, #29
 8009948:	d82c      	bhi.n	80099a4 <__sflush_r+0xb8>
 800994a:	4a2a      	ldr	r2, [pc, #168]	; (80099f4 <__sflush_r+0x108>)
 800994c:	40ca      	lsrs	r2, r1
 800994e:	07d6      	lsls	r6, r2, #31
 8009950:	d528      	bpl.n	80099a4 <__sflush_r+0xb8>
 8009952:	2200      	movs	r2, #0
 8009954:	6062      	str	r2, [r4, #4]
 8009956:	04d9      	lsls	r1, r3, #19
 8009958:	6922      	ldr	r2, [r4, #16]
 800995a:	6022      	str	r2, [r4, #0]
 800995c:	d504      	bpl.n	8009968 <__sflush_r+0x7c>
 800995e:	1c42      	adds	r2, r0, #1
 8009960:	d101      	bne.n	8009966 <__sflush_r+0x7a>
 8009962:	682b      	ldr	r3, [r5, #0]
 8009964:	b903      	cbnz	r3, 8009968 <__sflush_r+0x7c>
 8009966:	6560      	str	r0, [r4, #84]	; 0x54
 8009968:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800996a:	602f      	str	r7, [r5, #0]
 800996c:	2900      	cmp	r1, #0
 800996e:	d0ca      	beq.n	8009906 <__sflush_r+0x1a>
 8009970:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009974:	4299      	cmp	r1, r3
 8009976:	d002      	beq.n	800997e <__sflush_r+0x92>
 8009978:	4628      	mov	r0, r5
 800997a:	f7ff fb1d 	bl	8008fb8 <_free_r>
 800997e:	2000      	movs	r0, #0
 8009980:	6360      	str	r0, [r4, #52]	; 0x34
 8009982:	e7c1      	b.n	8009908 <__sflush_r+0x1c>
 8009984:	6a21      	ldr	r1, [r4, #32]
 8009986:	2301      	movs	r3, #1
 8009988:	4628      	mov	r0, r5
 800998a:	47b0      	blx	r6
 800998c:	1c41      	adds	r1, r0, #1
 800998e:	d1c7      	bne.n	8009920 <__sflush_r+0x34>
 8009990:	682b      	ldr	r3, [r5, #0]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d0c4      	beq.n	8009920 <__sflush_r+0x34>
 8009996:	2b1d      	cmp	r3, #29
 8009998:	d001      	beq.n	800999e <__sflush_r+0xb2>
 800999a:	2b16      	cmp	r3, #22
 800999c:	d101      	bne.n	80099a2 <__sflush_r+0xb6>
 800999e:	602f      	str	r7, [r5, #0]
 80099a0:	e7b1      	b.n	8009906 <__sflush_r+0x1a>
 80099a2:	89a3      	ldrh	r3, [r4, #12]
 80099a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099a8:	81a3      	strh	r3, [r4, #12]
 80099aa:	e7ad      	b.n	8009908 <__sflush_r+0x1c>
 80099ac:	690f      	ldr	r7, [r1, #16]
 80099ae:	2f00      	cmp	r7, #0
 80099b0:	d0a9      	beq.n	8009906 <__sflush_r+0x1a>
 80099b2:	0793      	lsls	r3, r2, #30
 80099b4:	680e      	ldr	r6, [r1, #0]
 80099b6:	bf08      	it	eq
 80099b8:	694b      	ldreq	r3, [r1, #20]
 80099ba:	600f      	str	r7, [r1, #0]
 80099bc:	bf18      	it	ne
 80099be:	2300      	movne	r3, #0
 80099c0:	eba6 0807 	sub.w	r8, r6, r7
 80099c4:	608b      	str	r3, [r1, #8]
 80099c6:	f1b8 0f00 	cmp.w	r8, #0
 80099ca:	dd9c      	ble.n	8009906 <__sflush_r+0x1a>
 80099cc:	6a21      	ldr	r1, [r4, #32]
 80099ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80099d0:	4643      	mov	r3, r8
 80099d2:	463a      	mov	r2, r7
 80099d4:	4628      	mov	r0, r5
 80099d6:	47b0      	blx	r6
 80099d8:	2800      	cmp	r0, #0
 80099da:	dc06      	bgt.n	80099ea <__sflush_r+0xfe>
 80099dc:	89a3      	ldrh	r3, [r4, #12]
 80099de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099e2:	81a3      	strh	r3, [r4, #12]
 80099e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80099e8:	e78e      	b.n	8009908 <__sflush_r+0x1c>
 80099ea:	4407      	add	r7, r0
 80099ec:	eba8 0800 	sub.w	r8, r8, r0
 80099f0:	e7e9      	b.n	80099c6 <__sflush_r+0xda>
 80099f2:	bf00      	nop
 80099f4:	20400001 	.word	0x20400001

080099f8 <_fflush_r>:
 80099f8:	b538      	push	{r3, r4, r5, lr}
 80099fa:	690b      	ldr	r3, [r1, #16]
 80099fc:	4605      	mov	r5, r0
 80099fe:	460c      	mov	r4, r1
 8009a00:	b913      	cbnz	r3, 8009a08 <_fflush_r+0x10>
 8009a02:	2500      	movs	r5, #0
 8009a04:	4628      	mov	r0, r5
 8009a06:	bd38      	pop	{r3, r4, r5, pc}
 8009a08:	b118      	cbz	r0, 8009a12 <_fflush_r+0x1a>
 8009a0a:	6983      	ldr	r3, [r0, #24]
 8009a0c:	b90b      	cbnz	r3, 8009a12 <_fflush_r+0x1a>
 8009a0e:	f000 f887 	bl	8009b20 <__sinit>
 8009a12:	4b14      	ldr	r3, [pc, #80]	; (8009a64 <_fflush_r+0x6c>)
 8009a14:	429c      	cmp	r4, r3
 8009a16:	d11b      	bne.n	8009a50 <_fflush_r+0x58>
 8009a18:	686c      	ldr	r4, [r5, #4]
 8009a1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d0ef      	beq.n	8009a02 <_fflush_r+0xa>
 8009a22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009a24:	07d0      	lsls	r0, r2, #31
 8009a26:	d404      	bmi.n	8009a32 <_fflush_r+0x3a>
 8009a28:	0599      	lsls	r1, r3, #22
 8009a2a:	d402      	bmi.n	8009a32 <_fflush_r+0x3a>
 8009a2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a2e:	f000 f915 	bl	8009c5c <__retarget_lock_acquire_recursive>
 8009a32:	4628      	mov	r0, r5
 8009a34:	4621      	mov	r1, r4
 8009a36:	f7ff ff59 	bl	80098ec <__sflush_r>
 8009a3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a3c:	07da      	lsls	r2, r3, #31
 8009a3e:	4605      	mov	r5, r0
 8009a40:	d4e0      	bmi.n	8009a04 <_fflush_r+0xc>
 8009a42:	89a3      	ldrh	r3, [r4, #12]
 8009a44:	059b      	lsls	r3, r3, #22
 8009a46:	d4dd      	bmi.n	8009a04 <_fflush_r+0xc>
 8009a48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a4a:	f000 f908 	bl	8009c5e <__retarget_lock_release_recursive>
 8009a4e:	e7d9      	b.n	8009a04 <_fflush_r+0xc>
 8009a50:	4b05      	ldr	r3, [pc, #20]	; (8009a68 <_fflush_r+0x70>)
 8009a52:	429c      	cmp	r4, r3
 8009a54:	d101      	bne.n	8009a5a <_fflush_r+0x62>
 8009a56:	68ac      	ldr	r4, [r5, #8]
 8009a58:	e7df      	b.n	8009a1a <_fflush_r+0x22>
 8009a5a:	4b04      	ldr	r3, [pc, #16]	; (8009a6c <_fflush_r+0x74>)
 8009a5c:	429c      	cmp	r4, r3
 8009a5e:	bf08      	it	eq
 8009a60:	68ec      	ldreq	r4, [r5, #12]
 8009a62:	e7da      	b.n	8009a1a <_fflush_r+0x22>
 8009a64:	0800a6c0 	.word	0x0800a6c0
 8009a68:	0800a6e0 	.word	0x0800a6e0
 8009a6c:	0800a6a0 	.word	0x0800a6a0

08009a70 <std>:
 8009a70:	2300      	movs	r3, #0
 8009a72:	b510      	push	{r4, lr}
 8009a74:	4604      	mov	r4, r0
 8009a76:	e9c0 3300 	strd	r3, r3, [r0]
 8009a7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a7e:	6083      	str	r3, [r0, #8]
 8009a80:	8181      	strh	r1, [r0, #12]
 8009a82:	6643      	str	r3, [r0, #100]	; 0x64
 8009a84:	81c2      	strh	r2, [r0, #14]
 8009a86:	6183      	str	r3, [r0, #24]
 8009a88:	4619      	mov	r1, r3
 8009a8a:	2208      	movs	r2, #8
 8009a8c:	305c      	adds	r0, #92	; 0x5c
 8009a8e:	f7fb fde1 	bl	8005654 <memset>
 8009a92:	4b05      	ldr	r3, [pc, #20]	; (8009aa8 <std+0x38>)
 8009a94:	6263      	str	r3, [r4, #36]	; 0x24
 8009a96:	4b05      	ldr	r3, [pc, #20]	; (8009aac <std+0x3c>)
 8009a98:	62a3      	str	r3, [r4, #40]	; 0x28
 8009a9a:	4b05      	ldr	r3, [pc, #20]	; (8009ab0 <std+0x40>)
 8009a9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009a9e:	4b05      	ldr	r3, [pc, #20]	; (8009ab4 <std+0x44>)
 8009aa0:	6224      	str	r4, [r4, #32]
 8009aa2:	6323      	str	r3, [r4, #48]	; 0x30
 8009aa4:	bd10      	pop	{r4, pc}
 8009aa6:	bf00      	nop
 8009aa8:	08009e61 	.word	0x08009e61
 8009aac:	08009e83 	.word	0x08009e83
 8009ab0:	08009ebb 	.word	0x08009ebb
 8009ab4:	08009edf 	.word	0x08009edf

08009ab8 <_cleanup_r>:
 8009ab8:	4901      	ldr	r1, [pc, #4]	; (8009ac0 <_cleanup_r+0x8>)
 8009aba:	f000 b8af 	b.w	8009c1c <_fwalk_reent>
 8009abe:	bf00      	nop
 8009ac0:	080099f9 	.word	0x080099f9

08009ac4 <__sfmoreglue>:
 8009ac4:	b570      	push	{r4, r5, r6, lr}
 8009ac6:	2268      	movs	r2, #104	; 0x68
 8009ac8:	1e4d      	subs	r5, r1, #1
 8009aca:	4355      	muls	r5, r2
 8009acc:	460e      	mov	r6, r1
 8009ace:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009ad2:	f7ff fadd 	bl	8009090 <_malloc_r>
 8009ad6:	4604      	mov	r4, r0
 8009ad8:	b140      	cbz	r0, 8009aec <__sfmoreglue+0x28>
 8009ada:	2100      	movs	r1, #0
 8009adc:	e9c0 1600 	strd	r1, r6, [r0]
 8009ae0:	300c      	adds	r0, #12
 8009ae2:	60a0      	str	r0, [r4, #8]
 8009ae4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009ae8:	f7fb fdb4 	bl	8005654 <memset>
 8009aec:	4620      	mov	r0, r4
 8009aee:	bd70      	pop	{r4, r5, r6, pc}

08009af0 <__sfp_lock_acquire>:
 8009af0:	4801      	ldr	r0, [pc, #4]	; (8009af8 <__sfp_lock_acquire+0x8>)
 8009af2:	f000 b8b3 	b.w	8009c5c <__retarget_lock_acquire_recursive>
 8009af6:	bf00      	nop
 8009af8:	2000041d 	.word	0x2000041d

08009afc <__sfp_lock_release>:
 8009afc:	4801      	ldr	r0, [pc, #4]	; (8009b04 <__sfp_lock_release+0x8>)
 8009afe:	f000 b8ae 	b.w	8009c5e <__retarget_lock_release_recursive>
 8009b02:	bf00      	nop
 8009b04:	2000041d 	.word	0x2000041d

08009b08 <__sinit_lock_acquire>:
 8009b08:	4801      	ldr	r0, [pc, #4]	; (8009b10 <__sinit_lock_acquire+0x8>)
 8009b0a:	f000 b8a7 	b.w	8009c5c <__retarget_lock_acquire_recursive>
 8009b0e:	bf00      	nop
 8009b10:	2000041e 	.word	0x2000041e

08009b14 <__sinit_lock_release>:
 8009b14:	4801      	ldr	r0, [pc, #4]	; (8009b1c <__sinit_lock_release+0x8>)
 8009b16:	f000 b8a2 	b.w	8009c5e <__retarget_lock_release_recursive>
 8009b1a:	bf00      	nop
 8009b1c:	2000041e 	.word	0x2000041e

08009b20 <__sinit>:
 8009b20:	b510      	push	{r4, lr}
 8009b22:	4604      	mov	r4, r0
 8009b24:	f7ff fff0 	bl	8009b08 <__sinit_lock_acquire>
 8009b28:	69a3      	ldr	r3, [r4, #24]
 8009b2a:	b11b      	cbz	r3, 8009b34 <__sinit+0x14>
 8009b2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b30:	f7ff bff0 	b.w	8009b14 <__sinit_lock_release>
 8009b34:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009b38:	6523      	str	r3, [r4, #80]	; 0x50
 8009b3a:	4b13      	ldr	r3, [pc, #76]	; (8009b88 <__sinit+0x68>)
 8009b3c:	4a13      	ldr	r2, [pc, #76]	; (8009b8c <__sinit+0x6c>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	62a2      	str	r2, [r4, #40]	; 0x28
 8009b42:	42a3      	cmp	r3, r4
 8009b44:	bf04      	itt	eq
 8009b46:	2301      	moveq	r3, #1
 8009b48:	61a3      	streq	r3, [r4, #24]
 8009b4a:	4620      	mov	r0, r4
 8009b4c:	f000 f820 	bl	8009b90 <__sfp>
 8009b50:	6060      	str	r0, [r4, #4]
 8009b52:	4620      	mov	r0, r4
 8009b54:	f000 f81c 	bl	8009b90 <__sfp>
 8009b58:	60a0      	str	r0, [r4, #8]
 8009b5a:	4620      	mov	r0, r4
 8009b5c:	f000 f818 	bl	8009b90 <__sfp>
 8009b60:	2200      	movs	r2, #0
 8009b62:	60e0      	str	r0, [r4, #12]
 8009b64:	2104      	movs	r1, #4
 8009b66:	6860      	ldr	r0, [r4, #4]
 8009b68:	f7ff ff82 	bl	8009a70 <std>
 8009b6c:	68a0      	ldr	r0, [r4, #8]
 8009b6e:	2201      	movs	r2, #1
 8009b70:	2109      	movs	r1, #9
 8009b72:	f7ff ff7d 	bl	8009a70 <std>
 8009b76:	68e0      	ldr	r0, [r4, #12]
 8009b78:	2202      	movs	r2, #2
 8009b7a:	2112      	movs	r1, #18
 8009b7c:	f7ff ff78 	bl	8009a70 <std>
 8009b80:	2301      	movs	r3, #1
 8009b82:	61a3      	str	r3, [r4, #24]
 8009b84:	e7d2      	b.n	8009b2c <__sinit+0xc>
 8009b86:	bf00      	nop
 8009b88:	0800a200 	.word	0x0800a200
 8009b8c:	08009ab9 	.word	0x08009ab9

08009b90 <__sfp>:
 8009b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b92:	4607      	mov	r7, r0
 8009b94:	f7ff ffac 	bl	8009af0 <__sfp_lock_acquire>
 8009b98:	4b1e      	ldr	r3, [pc, #120]	; (8009c14 <__sfp+0x84>)
 8009b9a:	681e      	ldr	r6, [r3, #0]
 8009b9c:	69b3      	ldr	r3, [r6, #24]
 8009b9e:	b913      	cbnz	r3, 8009ba6 <__sfp+0x16>
 8009ba0:	4630      	mov	r0, r6
 8009ba2:	f7ff ffbd 	bl	8009b20 <__sinit>
 8009ba6:	3648      	adds	r6, #72	; 0x48
 8009ba8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009bac:	3b01      	subs	r3, #1
 8009bae:	d503      	bpl.n	8009bb8 <__sfp+0x28>
 8009bb0:	6833      	ldr	r3, [r6, #0]
 8009bb2:	b30b      	cbz	r3, 8009bf8 <__sfp+0x68>
 8009bb4:	6836      	ldr	r6, [r6, #0]
 8009bb6:	e7f7      	b.n	8009ba8 <__sfp+0x18>
 8009bb8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009bbc:	b9d5      	cbnz	r5, 8009bf4 <__sfp+0x64>
 8009bbe:	4b16      	ldr	r3, [pc, #88]	; (8009c18 <__sfp+0x88>)
 8009bc0:	60e3      	str	r3, [r4, #12]
 8009bc2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009bc6:	6665      	str	r5, [r4, #100]	; 0x64
 8009bc8:	f000 f847 	bl	8009c5a <__retarget_lock_init_recursive>
 8009bcc:	f7ff ff96 	bl	8009afc <__sfp_lock_release>
 8009bd0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009bd4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009bd8:	6025      	str	r5, [r4, #0]
 8009bda:	61a5      	str	r5, [r4, #24]
 8009bdc:	2208      	movs	r2, #8
 8009bde:	4629      	mov	r1, r5
 8009be0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009be4:	f7fb fd36 	bl	8005654 <memset>
 8009be8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009bec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009bf0:	4620      	mov	r0, r4
 8009bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bf4:	3468      	adds	r4, #104	; 0x68
 8009bf6:	e7d9      	b.n	8009bac <__sfp+0x1c>
 8009bf8:	2104      	movs	r1, #4
 8009bfa:	4638      	mov	r0, r7
 8009bfc:	f7ff ff62 	bl	8009ac4 <__sfmoreglue>
 8009c00:	4604      	mov	r4, r0
 8009c02:	6030      	str	r0, [r6, #0]
 8009c04:	2800      	cmp	r0, #0
 8009c06:	d1d5      	bne.n	8009bb4 <__sfp+0x24>
 8009c08:	f7ff ff78 	bl	8009afc <__sfp_lock_release>
 8009c0c:	230c      	movs	r3, #12
 8009c0e:	603b      	str	r3, [r7, #0]
 8009c10:	e7ee      	b.n	8009bf0 <__sfp+0x60>
 8009c12:	bf00      	nop
 8009c14:	0800a200 	.word	0x0800a200
 8009c18:	ffff0001 	.word	0xffff0001

08009c1c <_fwalk_reent>:
 8009c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c20:	4606      	mov	r6, r0
 8009c22:	4688      	mov	r8, r1
 8009c24:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009c28:	2700      	movs	r7, #0
 8009c2a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009c2e:	f1b9 0901 	subs.w	r9, r9, #1
 8009c32:	d505      	bpl.n	8009c40 <_fwalk_reent+0x24>
 8009c34:	6824      	ldr	r4, [r4, #0]
 8009c36:	2c00      	cmp	r4, #0
 8009c38:	d1f7      	bne.n	8009c2a <_fwalk_reent+0xe>
 8009c3a:	4638      	mov	r0, r7
 8009c3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c40:	89ab      	ldrh	r3, [r5, #12]
 8009c42:	2b01      	cmp	r3, #1
 8009c44:	d907      	bls.n	8009c56 <_fwalk_reent+0x3a>
 8009c46:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009c4a:	3301      	adds	r3, #1
 8009c4c:	d003      	beq.n	8009c56 <_fwalk_reent+0x3a>
 8009c4e:	4629      	mov	r1, r5
 8009c50:	4630      	mov	r0, r6
 8009c52:	47c0      	blx	r8
 8009c54:	4307      	orrs	r7, r0
 8009c56:	3568      	adds	r5, #104	; 0x68
 8009c58:	e7e9      	b.n	8009c2e <_fwalk_reent+0x12>

08009c5a <__retarget_lock_init_recursive>:
 8009c5a:	4770      	bx	lr

08009c5c <__retarget_lock_acquire_recursive>:
 8009c5c:	4770      	bx	lr

08009c5e <__retarget_lock_release_recursive>:
 8009c5e:	4770      	bx	lr

08009c60 <__swhatbuf_r>:
 8009c60:	b570      	push	{r4, r5, r6, lr}
 8009c62:	460e      	mov	r6, r1
 8009c64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c68:	2900      	cmp	r1, #0
 8009c6a:	b096      	sub	sp, #88	; 0x58
 8009c6c:	4614      	mov	r4, r2
 8009c6e:	461d      	mov	r5, r3
 8009c70:	da08      	bge.n	8009c84 <__swhatbuf_r+0x24>
 8009c72:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009c76:	2200      	movs	r2, #0
 8009c78:	602a      	str	r2, [r5, #0]
 8009c7a:	061a      	lsls	r2, r3, #24
 8009c7c:	d410      	bmi.n	8009ca0 <__swhatbuf_r+0x40>
 8009c7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c82:	e00e      	b.n	8009ca2 <__swhatbuf_r+0x42>
 8009c84:	466a      	mov	r2, sp
 8009c86:	f000 f951 	bl	8009f2c <_fstat_r>
 8009c8a:	2800      	cmp	r0, #0
 8009c8c:	dbf1      	blt.n	8009c72 <__swhatbuf_r+0x12>
 8009c8e:	9a01      	ldr	r2, [sp, #4]
 8009c90:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009c94:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009c98:	425a      	negs	r2, r3
 8009c9a:	415a      	adcs	r2, r3
 8009c9c:	602a      	str	r2, [r5, #0]
 8009c9e:	e7ee      	b.n	8009c7e <__swhatbuf_r+0x1e>
 8009ca0:	2340      	movs	r3, #64	; 0x40
 8009ca2:	2000      	movs	r0, #0
 8009ca4:	6023      	str	r3, [r4, #0]
 8009ca6:	b016      	add	sp, #88	; 0x58
 8009ca8:	bd70      	pop	{r4, r5, r6, pc}
	...

08009cac <__smakebuf_r>:
 8009cac:	898b      	ldrh	r3, [r1, #12]
 8009cae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009cb0:	079d      	lsls	r5, r3, #30
 8009cb2:	4606      	mov	r6, r0
 8009cb4:	460c      	mov	r4, r1
 8009cb6:	d507      	bpl.n	8009cc8 <__smakebuf_r+0x1c>
 8009cb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009cbc:	6023      	str	r3, [r4, #0]
 8009cbe:	6123      	str	r3, [r4, #16]
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	6163      	str	r3, [r4, #20]
 8009cc4:	b002      	add	sp, #8
 8009cc6:	bd70      	pop	{r4, r5, r6, pc}
 8009cc8:	ab01      	add	r3, sp, #4
 8009cca:	466a      	mov	r2, sp
 8009ccc:	f7ff ffc8 	bl	8009c60 <__swhatbuf_r>
 8009cd0:	9900      	ldr	r1, [sp, #0]
 8009cd2:	4605      	mov	r5, r0
 8009cd4:	4630      	mov	r0, r6
 8009cd6:	f7ff f9db 	bl	8009090 <_malloc_r>
 8009cda:	b948      	cbnz	r0, 8009cf0 <__smakebuf_r+0x44>
 8009cdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ce0:	059a      	lsls	r2, r3, #22
 8009ce2:	d4ef      	bmi.n	8009cc4 <__smakebuf_r+0x18>
 8009ce4:	f023 0303 	bic.w	r3, r3, #3
 8009ce8:	f043 0302 	orr.w	r3, r3, #2
 8009cec:	81a3      	strh	r3, [r4, #12]
 8009cee:	e7e3      	b.n	8009cb8 <__smakebuf_r+0xc>
 8009cf0:	4b0d      	ldr	r3, [pc, #52]	; (8009d28 <__smakebuf_r+0x7c>)
 8009cf2:	62b3      	str	r3, [r6, #40]	; 0x28
 8009cf4:	89a3      	ldrh	r3, [r4, #12]
 8009cf6:	6020      	str	r0, [r4, #0]
 8009cf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cfc:	81a3      	strh	r3, [r4, #12]
 8009cfe:	9b00      	ldr	r3, [sp, #0]
 8009d00:	6163      	str	r3, [r4, #20]
 8009d02:	9b01      	ldr	r3, [sp, #4]
 8009d04:	6120      	str	r0, [r4, #16]
 8009d06:	b15b      	cbz	r3, 8009d20 <__smakebuf_r+0x74>
 8009d08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d0c:	4630      	mov	r0, r6
 8009d0e:	f000 f91f 	bl	8009f50 <_isatty_r>
 8009d12:	b128      	cbz	r0, 8009d20 <__smakebuf_r+0x74>
 8009d14:	89a3      	ldrh	r3, [r4, #12]
 8009d16:	f023 0303 	bic.w	r3, r3, #3
 8009d1a:	f043 0301 	orr.w	r3, r3, #1
 8009d1e:	81a3      	strh	r3, [r4, #12]
 8009d20:	89a0      	ldrh	r0, [r4, #12]
 8009d22:	4305      	orrs	r5, r0
 8009d24:	81a5      	strh	r5, [r4, #12]
 8009d26:	e7cd      	b.n	8009cc4 <__smakebuf_r+0x18>
 8009d28:	08009ab9 	.word	0x08009ab9

08009d2c <memmove>:
 8009d2c:	4288      	cmp	r0, r1
 8009d2e:	b510      	push	{r4, lr}
 8009d30:	eb01 0402 	add.w	r4, r1, r2
 8009d34:	d902      	bls.n	8009d3c <memmove+0x10>
 8009d36:	4284      	cmp	r4, r0
 8009d38:	4623      	mov	r3, r4
 8009d3a:	d807      	bhi.n	8009d4c <memmove+0x20>
 8009d3c:	1e43      	subs	r3, r0, #1
 8009d3e:	42a1      	cmp	r1, r4
 8009d40:	d008      	beq.n	8009d54 <memmove+0x28>
 8009d42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d4a:	e7f8      	b.n	8009d3e <memmove+0x12>
 8009d4c:	4402      	add	r2, r0
 8009d4e:	4601      	mov	r1, r0
 8009d50:	428a      	cmp	r2, r1
 8009d52:	d100      	bne.n	8009d56 <memmove+0x2a>
 8009d54:	bd10      	pop	{r4, pc}
 8009d56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d5e:	e7f7      	b.n	8009d50 <memmove+0x24>

08009d60 <__malloc_lock>:
 8009d60:	4801      	ldr	r0, [pc, #4]	; (8009d68 <__malloc_lock+0x8>)
 8009d62:	f7ff bf7b 	b.w	8009c5c <__retarget_lock_acquire_recursive>
 8009d66:	bf00      	nop
 8009d68:	2000041c 	.word	0x2000041c

08009d6c <__malloc_unlock>:
 8009d6c:	4801      	ldr	r0, [pc, #4]	; (8009d74 <__malloc_unlock+0x8>)
 8009d6e:	f7ff bf76 	b.w	8009c5e <__retarget_lock_release_recursive>
 8009d72:	bf00      	nop
 8009d74:	2000041c 	.word	0x2000041c

08009d78 <_realloc_r>:
 8009d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d7c:	4680      	mov	r8, r0
 8009d7e:	4614      	mov	r4, r2
 8009d80:	460e      	mov	r6, r1
 8009d82:	b921      	cbnz	r1, 8009d8e <_realloc_r+0x16>
 8009d84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d88:	4611      	mov	r1, r2
 8009d8a:	f7ff b981 	b.w	8009090 <_malloc_r>
 8009d8e:	b92a      	cbnz	r2, 8009d9c <_realloc_r+0x24>
 8009d90:	f7ff f912 	bl	8008fb8 <_free_r>
 8009d94:	4625      	mov	r5, r4
 8009d96:	4628      	mov	r0, r5
 8009d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d9c:	f000 f8fa 	bl	8009f94 <_malloc_usable_size_r>
 8009da0:	4284      	cmp	r4, r0
 8009da2:	4607      	mov	r7, r0
 8009da4:	d802      	bhi.n	8009dac <_realloc_r+0x34>
 8009da6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009daa:	d812      	bhi.n	8009dd2 <_realloc_r+0x5a>
 8009dac:	4621      	mov	r1, r4
 8009dae:	4640      	mov	r0, r8
 8009db0:	f7ff f96e 	bl	8009090 <_malloc_r>
 8009db4:	4605      	mov	r5, r0
 8009db6:	2800      	cmp	r0, #0
 8009db8:	d0ed      	beq.n	8009d96 <_realloc_r+0x1e>
 8009dba:	42bc      	cmp	r4, r7
 8009dbc:	4622      	mov	r2, r4
 8009dbe:	4631      	mov	r1, r6
 8009dc0:	bf28      	it	cs
 8009dc2:	463a      	movcs	r2, r7
 8009dc4:	f7fe fc12 	bl	80085ec <memcpy>
 8009dc8:	4631      	mov	r1, r6
 8009dca:	4640      	mov	r0, r8
 8009dcc:	f7ff f8f4 	bl	8008fb8 <_free_r>
 8009dd0:	e7e1      	b.n	8009d96 <_realloc_r+0x1e>
 8009dd2:	4635      	mov	r5, r6
 8009dd4:	e7df      	b.n	8009d96 <_realloc_r+0x1e>

08009dd6 <_raise_r>:
 8009dd6:	291f      	cmp	r1, #31
 8009dd8:	b538      	push	{r3, r4, r5, lr}
 8009dda:	4604      	mov	r4, r0
 8009ddc:	460d      	mov	r5, r1
 8009dde:	d904      	bls.n	8009dea <_raise_r+0x14>
 8009de0:	2316      	movs	r3, #22
 8009de2:	6003      	str	r3, [r0, #0]
 8009de4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009de8:	bd38      	pop	{r3, r4, r5, pc}
 8009dea:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009dec:	b112      	cbz	r2, 8009df4 <_raise_r+0x1e>
 8009dee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009df2:	b94b      	cbnz	r3, 8009e08 <_raise_r+0x32>
 8009df4:	4620      	mov	r0, r4
 8009df6:	f000 f831 	bl	8009e5c <_getpid_r>
 8009dfa:	462a      	mov	r2, r5
 8009dfc:	4601      	mov	r1, r0
 8009dfe:	4620      	mov	r0, r4
 8009e00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e04:	f000 b818 	b.w	8009e38 <_kill_r>
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	d00a      	beq.n	8009e22 <_raise_r+0x4c>
 8009e0c:	1c59      	adds	r1, r3, #1
 8009e0e:	d103      	bne.n	8009e18 <_raise_r+0x42>
 8009e10:	2316      	movs	r3, #22
 8009e12:	6003      	str	r3, [r0, #0]
 8009e14:	2001      	movs	r0, #1
 8009e16:	e7e7      	b.n	8009de8 <_raise_r+0x12>
 8009e18:	2400      	movs	r4, #0
 8009e1a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009e1e:	4628      	mov	r0, r5
 8009e20:	4798      	blx	r3
 8009e22:	2000      	movs	r0, #0
 8009e24:	e7e0      	b.n	8009de8 <_raise_r+0x12>
	...

08009e28 <raise>:
 8009e28:	4b02      	ldr	r3, [pc, #8]	; (8009e34 <raise+0xc>)
 8009e2a:	4601      	mov	r1, r0
 8009e2c:	6818      	ldr	r0, [r3, #0]
 8009e2e:	f7ff bfd2 	b.w	8009dd6 <_raise_r>
 8009e32:	bf00      	nop
 8009e34:	20000010 	.word	0x20000010

08009e38 <_kill_r>:
 8009e38:	b538      	push	{r3, r4, r5, lr}
 8009e3a:	4d07      	ldr	r5, [pc, #28]	; (8009e58 <_kill_r+0x20>)
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	4604      	mov	r4, r0
 8009e40:	4608      	mov	r0, r1
 8009e42:	4611      	mov	r1, r2
 8009e44:	602b      	str	r3, [r5, #0]
 8009e46:	f7f8 ffa9 	bl	8002d9c <_kill>
 8009e4a:	1c43      	adds	r3, r0, #1
 8009e4c:	d102      	bne.n	8009e54 <_kill_r+0x1c>
 8009e4e:	682b      	ldr	r3, [r5, #0]
 8009e50:	b103      	cbz	r3, 8009e54 <_kill_r+0x1c>
 8009e52:	6023      	str	r3, [r4, #0]
 8009e54:	bd38      	pop	{r3, r4, r5, pc}
 8009e56:	bf00      	nop
 8009e58:	20000420 	.word	0x20000420

08009e5c <_getpid_r>:
 8009e5c:	f7f8 bf96 	b.w	8002d8c <_getpid>

08009e60 <__sread>:
 8009e60:	b510      	push	{r4, lr}
 8009e62:	460c      	mov	r4, r1
 8009e64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e68:	f000 f89c 	bl	8009fa4 <_read_r>
 8009e6c:	2800      	cmp	r0, #0
 8009e6e:	bfab      	itete	ge
 8009e70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009e72:	89a3      	ldrhlt	r3, [r4, #12]
 8009e74:	181b      	addge	r3, r3, r0
 8009e76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009e7a:	bfac      	ite	ge
 8009e7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009e7e:	81a3      	strhlt	r3, [r4, #12]
 8009e80:	bd10      	pop	{r4, pc}

08009e82 <__swrite>:
 8009e82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e86:	461f      	mov	r7, r3
 8009e88:	898b      	ldrh	r3, [r1, #12]
 8009e8a:	05db      	lsls	r3, r3, #23
 8009e8c:	4605      	mov	r5, r0
 8009e8e:	460c      	mov	r4, r1
 8009e90:	4616      	mov	r6, r2
 8009e92:	d505      	bpl.n	8009ea0 <__swrite+0x1e>
 8009e94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e98:	2302      	movs	r3, #2
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	f000 f868 	bl	8009f70 <_lseek_r>
 8009ea0:	89a3      	ldrh	r3, [r4, #12]
 8009ea2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ea6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009eaa:	81a3      	strh	r3, [r4, #12]
 8009eac:	4632      	mov	r2, r6
 8009eae:	463b      	mov	r3, r7
 8009eb0:	4628      	mov	r0, r5
 8009eb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009eb6:	f000 b817 	b.w	8009ee8 <_write_r>

08009eba <__sseek>:
 8009eba:	b510      	push	{r4, lr}
 8009ebc:	460c      	mov	r4, r1
 8009ebe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ec2:	f000 f855 	bl	8009f70 <_lseek_r>
 8009ec6:	1c43      	adds	r3, r0, #1
 8009ec8:	89a3      	ldrh	r3, [r4, #12]
 8009eca:	bf15      	itete	ne
 8009ecc:	6560      	strne	r0, [r4, #84]	; 0x54
 8009ece:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009ed2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009ed6:	81a3      	strheq	r3, [r4, #12]
 8009ed8:	bf18      	it	ne
 8009eda:	81a3      	strhne	r3, [r4, #12]
 8009edc:	bd10      	pop	{r4, pc}

08009ede <__sclose>:
 8009ede:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ee2:	f000 b813 	b.w	8009f0c <_close_r>
	...

08009ee8 <_write_r>:
 8009ee8:	b538      	push	{r3, r4, r5, lr}
 8009eea:	4d07      	ldr	r5, [pc, #28]	; (8009f08 <_write_r+0x20>)
 8009eec:	4604      	mov	r4, r0
 8009eee:	4608      	mov	r0, r1
 8009ef0:	4611      	mov	r1, r2
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	602a      	str	r2, [r5, #0]
 8009ef6:	461a      	mov	r2, r3
 8009ef8:	f7f8 ff87 	bl	8002e0a <_write>
 8009efc:	1c43      	adds	r3, r0, #1
 8009efe:	d102      	bne.n	8009f06 <_write_r+0x1e>
 8009f00:	682b      	ldr	r3, [r5, #0]
 8009f02:	b103      	cbz	r3, 8009f06 <_write_r+0x1e>
 8009f04:	6023      	str	r3, [r4, #0]
 8009f06:	bd38      	pop	{r3, r4, r5, pc}
 8009f08:	20000420 	.word	0x20000420

08009f0c <_close_r>:
 8009f0c:	b538      	push	{r3, r4, r5, lr}
 8009f0e:	4d06      	ldr	r5, [pc, #24]	; (8009f28 <_close_r+0x1c>)
 8009f10:	2300      	movs	r3, #0
 8009f12:	4604      	mov	r4, r0
 8009f14:	4608      	mov	r0, r1
 8009f16:	602b      	str	r3, [r5, #0]
 8009f18:	f7f8 ff93 	bl	8002e42 <_close>
 8009f1c:	1c43      	adds	r3, r0, #1
 8009f1e:	d102      	bne.n	8009f26 <_close_r+0x1a>
 8009f20:	682b      	ldr	r3, [r5, #0]
 8009f22:	b103      	cbz	r3, 8009f26 <_close_r+0x1a>
 8009f24:	6023      	str	r3, [r4, #0]
 8009f26:	bd38      	pop	{r3, r4, r5, pc}
 8009f28:	20000420 	.word	0x20000420

08009f2c <_fstat_r>:
 8009f2c:	b538      	push	{r3, r4, r5, lr}
 8009f2e:	4d07      	ldr	r5, [pc, #28]	; (8009f4c <_fstat_r+0x20>)
 8009f30:	2300      	movs	r3, #0
 8009f32:	4604      	mov	r4, r0
 8009f34:	4608      	mov	r0, r1
 8009f36:	4611      	mov	r1, r2
 8009f38:	602b      	str	r3, [r5, #0]
 8009f3a:	f7f8 ff8e 	bl	8002e5a <_fstat>
 8009f3e:	1c43      	adds	r3, r0, #1
 8009f40:	d102      	bne.n	8009f48 <_fstat_r+0x1c>
 8009f42:	682b      	ldr	r3, [r5, #0]
 8009f44:	b103      	cbz	r3, 8009f48 <_fstat_r+0x1c>
 8009f46:	6023      	str	r3, [r4, #0]
 8009f48:	bd38      	pop	{r3, r4, r5, pc}
 8009f4a:	bf00      	nop
 8009f4c:	20000420 	.word	0x20000420

08009f50 <_isatty_r>:
 8009f50:	b538      	push	{r3, r4, r5, lr}
 8009f52:	4d06      	ldr	r5, [pc, #24]	; (8009f6c <_isatty_r+0x1c>)
 8009f54:	2300      	movs	r3, #0
 8009f56:	4604      	mov	r4, r0
 8009f58:	4608      	mov	r0, r1
 8009f5a:	602b      	str	r3, [r5, #0]
 8009f5c:	f7f8 ff8d 	bl	8002e7a <_isatty>
 8009f60:	1c43      	adds	r3, r0, #1
 8009f62:	d102      	bne.n	8009f6a <_isatty_r+0x1a>
 8009f64:	682b      	ldr	r3, [r5, #0]
 8009f66:	b103      	cbz	r3, 8009f6a <_isatty_r+0x1a>
 8009f68:	6023      	str	r3, [r4, #0]
 8009f6a:	bd38      	pop	{r3, r4, r5, pc}
 8009f6c:	20000420 	.word	0x20000420

08009f70 <_lseek_r>:
 8009f70:	b538      	push	{r3, r4, r5, lr}
 8009f72:	4d07      	ldr	r5, [pc, #28]	; (8009f90 <_lseek_r+0x20>)
 8009f74:	4604      	mov	r4, r0
 8009f76:	4608      	mov	r0, r1
 8009f78:	4611      	mov	r1, r2
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	602a      	str	r2, [r5, #0]
 8009f7e:	461a      	mov	r2, r3
 8009f80:	f7f8 ff86 	bl	8002e90 <_lseek>
 8009f84:	1c43      	adds	r3, r0, #1
 8009f86:	d102      	bne.n	8009f8e <_lseek_r+0x1e>
 8009f88:	682b      	ldr	r3, [r5, #0]
 8009f8a:	b103      	cbz	r3, 8009f8e <_lseek_r+0x1e>
 8009f8c:	6023      	str	r3, [r4, #0]
 8009f8e:	bd38      	pop	{r3, r4, r5, pc}
 8009f90:	20000420 	.word	0x20000420

08009f94 <_malloc_usable_size_r>:
 8009f94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f98:	1f18      	subs	r0, r3, #4
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	bfbc      	itt	lt
 8009f9e:	580b      	ldrlt	r3, [r1, r0]
 8009fa0:	18c0      	addlt	r0, r0, r3
 8009fa2:	4770      	bx	lr

08009fa4 <_read_r>:
 8009fa4:	b538      	push	{r3, r4, r5, lr}
 8009fa6:	4d07      	ldr	r5, [pc, #28]	; (8009fc4 <_read_r+0x20>)
 8009fa8:	4604      	mov	r4, r0
 8009faa:	4608      	mov	r0, r1
 8009fac:	4611      	mov	r1, r2
 8009fae:	2200      	movs	r2, #0
 8009fb0:	602a      	str	r2, [r5, #0]
 8009fb2:	461a      	mov	r2, r3
 8009fb4:	f7f8 ff0c 	bl	8002dd0 <_read>
 8009fb8:	1c43      	adds	r3, r0, #1
 8009fba:	d102      	bne.n	8009fc2 <_read_r+0x1e>
 8009fbc:	682b      	ldr	r3, [r5, #0]
 8009fbe:	b103      	cbz	r3, 8009fc2 <_read_r+0x1e>
 8009fc0:	6023      	str	r3, [r4, #0]
 8009fc2:	bd38      	pop	{r3, r4, r5, pc}
 8009fc4:	20000420 	.word	0x20000420

08009fc8 <floorf>:
 8009fc8:	ee10 3a10 	vmov	r3, s0
 8009fcc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009fd0:	3a7f      	subs	r2, #127	; 0x7f
 8009fd2:	2a16      	cmp	r2, #22
 8009fd4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009fd8:	dc2a      	bgt.n	800a030 <floorf+0x68>
 8009fda:	2a00      	cmp	r2, #0
 8009fdc:	da11      	bge.n	800a002 <floorf+0x3a>
 8009fde:	eddf 7a18 	vldr	s15, [pc, #96]	; 800a040 <floorf+0x78>
 8009fe2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009fe6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fee:	dd05      	ble.n	8009ffc <floorf+0x34>
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	da23      	bge.n	800a03c <floorf+0x74>
 8009ff4:	4a13      	ldr	r2, [pc, #76]	; (800a044 <floorf+0x7c>)
 8009ff6:	2900      	cmp	r1, #0
 8009ff8:	bf18      	it	ne
 8009ffa:	4613      	movne	r3, r2
 8009ffc:	ee00 3a10 	vmov	s0, r3
 800a000:	4770      	bx	lr
 800a002:	4911      	ldr	r1, [pc, #68]	; (800a048 <floorf+0x80>)
 800a004:	4111      	asrs	r1, r2
 800a006:	420b      	tst	r3, r1
 800a008:	d0fa      	beq.n	800a000 <floorf+0x38>
 800a00a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800a040 <floorf+0x78>
 800a00e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a012:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a01a:	ddef      	ble.n	8009ffc <floorf+0x34>
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	bfbe      	ittt	lt
 800a020:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800a024:	fa40 f202 	asrlt.w	r2, r0, r2
 800a028:	189b      	addlt	r3, r3, r2
 800a02a:	ea23 0301 	bic.w	r3, r3, r1
 800a02e:	e7e5      	b.n	8009ffc <floorf+0x34>
 800a030:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a034:	d3e4      	bcc.n	800a000 <floorf+0x38>
 800a036:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a03a:	4770      	bx	lr
 800a03c:	2300      	movs	r3, #0
 800a03e:	e7dd      	b.n	8009ffc <floorf+0x34>
 800a040:	7149f2ca 	.word	0x7149f2ca
 800a044:	bf800000 	.word	0xbf800000
 800a048:	007fffff 	.word	0x007fffff

0800a04c <_init>:
 800a04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a04e:	bf00      	nop
 800a050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a052:	bc08      	pop	{r3}
 800a054:	469e      	mov	lr, r3
 800a056:	4770      	bx	lr

0800a058 <_fini>:
 800a058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a05a:	bf00      	nop
 800a05c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a05e:	bc08      	pop	{r3}
 800a060:	469e      	mov	lr, r3
 800a062:	4770      	bx	lr
